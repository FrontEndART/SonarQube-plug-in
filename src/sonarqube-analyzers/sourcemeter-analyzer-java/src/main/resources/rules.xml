<?xml version="1.0" encoding="UTF-8"?>
<rulset xmlns = "http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <rule key = "MET_AD">
    <name>API Documentation (AD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; ratio of the number of documented public methods in the class +1 if the class itself is documented to the number of all public methods in the class + 1 (the class itself); however, the nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the number of documented public classes and methods in the package to the number of all of its public classes and methods; however, the classes and methods of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CBO">
    <name>Coupling Between Object classes (CBO) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of directly used other classes (e.g. by inheritance, function call, type reference, attribute reference). Classes using many other classes highly depend on their environment, so it is difficult to test or reuse them; furthermore, they are very sensitive to the changes in the system.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CBOI">
    <name>Coupling Between Object classes Inverse (CBOI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of other classes, which directly use the class. Classes which are used by many other classes have a high impact on the behavior of the system, and should be modified very carefully and tested intensively.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CD">
    <name>Comment Density (CD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; ratio of the comment lines of the method (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class&lt;/strong&gt;: ratio of the comment lines of the class (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the comment lines of the package (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CLOC">
    <name>Comment Lines of Code (CLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of comment and documentation code lines of the method; however, its anonymous and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of comment and documentation code lines of the class, including its local methods and attributes; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of comment and documentation code lines of the package; however, its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_DIT">
    <name>Depth of Inheritance Tree (DIT) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; length of the path that leads from the class to its farthest ancestor in the inheritance tree.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_DLOC">
    <name>Documentation Lines of Code (DLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of documentation code lines of the method.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of documentation code lines of the class, including its local methods and attributes; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_LCOM5">
    <name>Lack of Cohesion in Methods 5 (LCOM5) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of functionalities of the class. One of the basic principles of object-oriented programming is encapsulation, meaning that attributes belonging together and the operations that use them should be organized into one class, and one class shall implement only one functionality, i.e. its attributes and methods should be coherent. This metric measures the lack of cohesion and computes into how many coherent classes the class could be split. It is calculated by taking a non-directed graph, where the nodes are the implemented local methods of the class and there is an edge between the two nodes if and only if a common (local or inherited) attribute or abstract method is used or a method invokes another. The value of the metric is the number of connected components in the graph not counting those, which contain only constructors, destructors, getters, or setters.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_LLOC">
    <name>Logical Lines of Code (LLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of non-empty and non-comment code lines of the method; however, its anonymous and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of non-empty and non-comment code lines of the class, including the non-empty and non-comment lines of its local methods; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of non-empty and non-comment code lines of the package; however, its subpackages are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of non-empty and non-comment code lines of the file.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_LOC">
    <name>Lines of Code (LOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of code lines of the method, including empty and comment lines; however, its anonymous and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of code lines of the class, including empty and comment lines, as well as its local methods; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of code lines of the package, including empty and comment lines; however, its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_McCC">
    <name>McCabe&apos;s Cyclomatic Complexity (McCC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; complexity of the method expressed as the number of independent control flow paths in it. It represents a lower bound for the number of possible execution paths in the source code and at the same time it is an upper bound for the minimum number of test cases needed for achieving full branch test coverage. The value of the metric is calculated as the number of the following instructions plus 1: if, for, foreach, while, do-while, case label (which belongs to a switch instruction), catch, conditional statement (?:). Moreover, logical “and” (&amp;amp;&amp;amp;) and logical “or” (||) expressions also add 1 to the value because their short-circuit evaluation can cause branching depending on the first operand. The following instructions are not included: else, switch, default label (which belongs to a switch instruction), try, finally.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NA">
    <name>Number of Attributes (NA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of attributes in the class, including the inherited ones; however, the attributes of its nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of attributes in the package; however, attributes of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NCL">
    <name>Number of Classes (NCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of classes in the package; however, the classes of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NEN">
    <name>Number of Enums (NEN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of enums in the package; however, the enums of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NG">
    <name>Number of Getters (NG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of getter methods in the class, including the inherited ones; however, the getter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package&lt;/strong&gt;: number of getter methods in the package; however, getter methods of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NII">
    <name>Number of Incoming Invocations (NII) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of other methods and attribute initializations which directly call the method. If the method is invoked several times from the same method or attribute initialization, it is counted only once.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of other methods and attribute initializations which directly call the local methods of the class. If a method is invoked several times from the same method or attribute initialization, it is counted only once.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NIN">
    <name>Number of Interfaces (NIN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of interfaces in the package; however, the interfaces of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NL">
    <name>Nesting Level (NL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; complexity of the method expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes. The following instructions are taken into account: if, else-if, else, for, while, do-while, switch, try, catch, finally and block statements that are directly inside another block statement. The following instructions do not increase the value by themselves; however, if additional embeddednesses can be found in their blocks, they are considered: case and default label (which belong to a switch instruction).&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes. It is calculated as the maximum nesting level (NL) of its local methods and init blocks.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NLA">
    <name>Number of Local Attributes (NLA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) attributes in the class; however, the attributes of nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NLE">
    <name>Nesting Level Else-If (NLE) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; complexity of the method expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes, where in the if-else-if construct only the first if instruction is considered. The following instructions are taken into account: if, else, for, while, do-while, switch, try, catch, finally and block statements that are directly inside another block statement. The following instructions do not increase the value by themselves; however, if additional embeddednesses can be found in their blocks, they are considered: else-if (i.e. in the if-else-if construct the use of else-if does not increase the value of the metric), case and default label (which belong to a switch instruction).&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes, where in the if-else-if construct only the first if instruction is considered. It is calculated as the maximum nesting level (NLE) of its local methods and init blocks.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NLG">
    <name>Number of Local Getters (NLG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) getter methods in the class; however, the getter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NLM">
    <name>Number of Local Methods (NLM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class; however, the methods of nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NLPA">
    <name>Number of Local Public Attributes (NLPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public attributes in the class; however, the attributes of nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NLPM">
    <name>Number of Local Public Methods (NLPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public methods in the class; however, the methods of nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NLS">
    <name>Number of Local Setters (NLS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) setter methods in the class; however, the setter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NM">
    <name>Number of Methods (NM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of methods in the class, including the inherited ones; however, the methods of its nested, anonymous and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of methods in the package; however, methods of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NOA">
    <name>Number of Ancestors (NOA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums and annotations from which the class is directly or indirectly inherited.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NOC">
    <name>Number of Children (NOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums and annotations which are directly derived from the class.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NOD">
    <name>Number of Descendants (NOD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums, annotations, which are directly or indirectly derived from the class.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NOI">
    <name>Number of Outgoing Invocations (NOI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of directly called methods. If a method is invoked several times, it is counted only once.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of directly called methods of other classes, including method invocations from attribute initializations. If a method is invoked several times, it is counted only once.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NOP">
    <name>Number of Parents (NOP) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums and annotations from which the class is directly inherited.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NOS">
    <name>Number of Statements (NOS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of statements in the method; however, the statements of its anonymous and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of statements in the class; however, the statements of its nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NPA">
    <name>Number of Public Attributes (NPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public attributes in the class, including the inherited ones; however, the public attributes of its nested, anonymous, and local classes are not included.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public attributes in the package; however, the public attributes of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NPKG">
    <name>Number of packages (NPKG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of directly contained subpackages of the package.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NPM">
    <name>Number of Public Methods (NPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public methods in the class, including the inherited ones; however, the public methods of nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public methods in the package; however, the public methods of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NS">
    <name>Number of Setters (NS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of setter methods in the class, including the inherited ones; however, the setter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of setter methods in the package; however, setter methods of its subpackages are not included.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_NUMPAR">
    <name>Number of Parameters (NUMPAR) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of the parameters of the method. The varargs parameter counts as one.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_PDA">
    <name>Public Documented API (PDA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of documented public methods in the class (+1 if the class itself is documented); however, the methods of its nested, anonymous, and local classes are not counted.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of documented public classes and methods in the package; however, the classes and methods of its subpackages are not counted.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_PUA">
    <name>Public Undocumented API (PUA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of undocumented public methods in the class (+1 if the class itself is undocumented); however, the methods of its nested, anonymous, and local classes are not counted.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of undocumented public classes and methods in the package; however, the classes and methods of its subpackages are not counted.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_RFC">
    <name>Response set For Class (RFC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class (NLM) plus the number of directly invoked other methods by its methods or attribute initializations (NOI).&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TAD">
    <name>Total API Documentation (TAD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the number of documented public classes and methods in the package to the number of all of its public classes and methods, including its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; ratio of the number of documented public classes and methods in the component to the number of all of its public classes and methods, including its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TCD">
    <name>Total Comment Density (TCD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; ratio of the total comment lines of the method (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; ratio of the total comment lines of the class (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the total comment lines of the package (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; ratio of the total comment lines of the component (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TCLOC">
    <name>Total Comment Lines of Code (TCLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of comment and documentation code lines of the method, including its anonymous and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of comment and documentation code lines of the class, including its local methods and attributes, as well as its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of comment and documentation code lines of the package, including its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of comment and documentation code lines of the component, including its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TLLOC">
    <name>Total Logical Lines of Code (TLLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of non-empty and non-comment code lines of the method, including the non-empty and non-comment lines of its anonymous and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of non-empty and non-comment code lines of the class, including the non-empty and non-comment code lines of its local methods, anonymous, local, and nested classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of non-empty and non-comment code lines of the package, including its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of non-empty and non-comment code lines of the component, including its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TLOC">
    <name>Total Lines of Code (TLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of code lines of the method, including empty and comment lines, as well as its anonymous and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of code lines of the class, including empty and comment lines, as well as its local methods, anonymous, local, and nested classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of code lines of the package, including empty and comment lines, as well as its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of code lines of the component, including empty and comment lines, as well as its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNA">
    <name>Total Number of Attributes (TNA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of attributes in the class, including the inherited ones, as well as the inherited and local attributes of its nested, anonymous and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of attributes in the package, including the attributes of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of attributes in the component, including the attributes of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNCL">
    <name>Total Number of Classes (TNCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of classes in the package, including the classes of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of classes in the component, including the classes of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNDI">
    <name>Total Number of Directories (TNDI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of directories that belong to the package, including the directories of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of directories that belong to the component, including its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNEN">
    <name>Total Number of Enums (TNEN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of enums in the package, including the enums of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of enums in the component, including the enums of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNFI">
    <name>Total Number of Files (TNFI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of files that belong to the package, including the files of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of files that belong to the component, including its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNG">
    <name>Total Number of Getters (TNG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of getter methods in the class, including the inherited ones, as well as the inherited and local getter methods of its nested, anonymous and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of getter methods in the package, including the getter methods of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of getter methods in the component, including the getter methods of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNIN">
    <name>Total Number of Interfaces (TNIN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of interfaces in the package, including the interfaces of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of interfaces in the component, including the interfaces of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNLA">
    <name>Total Number of Local Attributes (TNLA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) attributes in the class, including the attributes of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNLG">
    <name>Total Number of Local Getters (TNLG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) getter methods in the class, including the local getter methods of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNLM">
    <name>Total Number of Local Methods (TNLM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class, including the local methods of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNLPA">
    <name>Total Number of Local Public Attributes (TNLPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public attributes in the class, including the local public attributes of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNLPM">
    <name>Total Number of Local Public Methods (TNLPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public methods in the class, including the local methods of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNLS">
    <name>Total Number of Local Setters (TNLS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) setter methods in the class, including the local setter methods of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNM">
    <name>Total Number of Methods (TNM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of methods in the class, including the inherited ones, as well as the inherited and local methods of its nested, anonymous, and local classes. Methods that override abstract methods are not counted.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of methods in the package, including the methods of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of methods in the component, including the methods of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNOS">
    <name>Total Number of Statements (TNOS) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method:&lt;/b&gt; number of statements in the method, including the statements of its anonymous and local classes.&lt;br&gt;&lt;b&gt;Class:&lt;/b&gt; number of statements in the class, including the statements of its nested, anonymous, and local classes.&lt;br&gt;&lt;b&gt;Package:&lt;/b&gt; number of statements in the package, including the statements of its subpackages.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of statements in the component, including the statements of its subcomponents.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNPA">
    <name>Total Number of Public Attributes (TNPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public attributes in the class, including the inherited ones, as well as the inherited and local public attributes of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public attributes in the package, including the public attributes of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public attributes in the component, including the public attributes of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNPCL">
    <name>Total Number of Public Classes (TNPCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public classes in the package, including the public classes of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public classes in the component, including the public classes of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNPEN">
    <name>Total Number of Public Enums (TNPEN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public enums in the package, including the public enums of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public enums in the component, including the public enums of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNPIN">
    <name>Total Number of Public Interfaces (TNPIN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public interfaces in the package, including the public interfaces of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public interfaces in the component, including the public interfaces of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNPKG">
    <name>Total Number of Packages (TNPKG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of subpackages in the package, including all directly or indirectly contained subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of packages and subpackages that belong to the component, including its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNPM">
    <name>Total Number of Public Methods (TNPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public methods in the class, including the inherited ones, as well as the inherited and local public methods of its nested, anonymous, and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public methods in the package, including the public methods of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public methods in the component, including the public methods of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TNS">
    <name>Total Number of Setters (TNS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of setter methods in the class, including the inherited ones, as well as the inherited and local setter methods of its nested, anonymous and local classes.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of setter methods in the package, including the setter methods of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of setter methods in the component, including the setter methods of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TPDA">
    <name>Total Public Documented API (TPDA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of documented public classes and methods in the package, including the documented public classes and methods of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of documented public classes and methods in the component, including the documented public classes and methods of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_TPUA">
    <name>Total Public Undocumented API (TPUA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of undocumented public classes and methods in the package, including the undocumented public classes and methods of its subpackages.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of undocumented public classes and methods in the component, including the undocumented public classes and methods of its subcomponents.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_WMC">
    <name>Weighted Methods per Class (WMC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the number of independent control flow paths in it. It is calculated as the sum of the McCabe’s Cyclomatic Complexity (McCC) values of its local methods and init blocks.&lt;/p&gt;&#x0A;</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CA">
    <name>Clone Age (CA) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class/clone instance:&lt;/b&gt; number of previously analyzed revisions in which the clone class/clone instance was present + 1.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CC">
    <name>Clone Coverage (CC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of the source code element, expressed in terms of the number of syntactic entities (statements, expressions, etc.).&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of the number of syntactic entities (statements, expressions, etc.).</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CCL">
    <name>Clone Classes (CCL) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of clone classes having at least one clone instance in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of clone classes having at least one clone instance in the component.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CCO">
    <name>Clone Complexity (CCO) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; the McCabe complexity of the code fragment corresponding to the clone instance.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; sum of CCO of clone instances in the clone class.&lt;br&gt;&lt;b&gt;Method/class/package:&lt;/b&gt; sum of CCO of clone instances in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; sum of CCO of clone instances in the component.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CE">
    <name>Clone Embeddedness (CE) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; sum of incoming and outgoing references (function calls, variable references, type references; different references to the same entity are counted only once) in the code fragment corresponding to the clone instance, weighted with the number of directory changes between the referenced code fragments.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; sum of CE of the clone instances of the clone class + 1.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CEE">
    <name>Clone Elimination Effort (CEE) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; index of the effort required to eliminate the clone class. It is computed as the product of CI, CE, and NCR.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; index of the effort required to eliminate all clones from the component. It is computed as the sum of CEE of the clone classes in the component.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CEG">
    <name>Clone Elimination Gain (CEG) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; index of the gain resulting from eliminating the clone class. It is computed as the ratio of CR to CEE.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; index of the gain resulting from eliminating all clones from the component. It is computed as the logistic function of the ratio of CR to CEE.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CI">
    <name>Clone Instances (CI) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of clone instances in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of clone instances in the component.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; number of clone instances in the clone class.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CLC">
    <name>Clone Line Coverage (CLC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of the source code element, expressed in terms of lines of code.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of lines of code.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CLLC">
    <name>Clone Logical Line Coverage (CLLC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of source code element, expressed in terms of logical lines of code (non-empty, non-comment lines).&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of logical lines of code (non-empty, non-comment lines).</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CLLOC">
    <name>Clone Lines of Code (CLLOC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; length of the clone instance expressed in terms of lines of code.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt;  average of CLLOC of clone instances belonging to the clone class.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CR">
    <name>Clone Risk (CR) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; risk index of the existence of the clone class. It is computed as the product of CLLOC, CI, CCO, NCR, and CV.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; relative risk index of the existence of code duplications in the component. It is computed as the sum of CR of the clone classes in the component, divided by the total logical lines of code (non-empty, non-comment lines) of the component. It expresses the risk index projected to a non-empty, non-comment line of code in the component.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_CV">
    <name>Clone Variability (CV) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; instability of the clone instance since it appeared. It is computed as the ratio of the number of previously analyzed revisions when the instance had been changed to its age (CA).&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; instability of the clone class since it appeared. It is computed as the ratio of the number of previously analyzed revisions when its contained instances were moved, deleted, or added, to its age (CA), plus the average CV of its clone instances.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_LDC">
    <name>Lines of Duplicated Code (LDC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of code lines covered by code duplications in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of code lines covered by code duplications in the component.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "MET_LLDC">
    <name>Logical Lines of Duplicated Code (LLDC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of logical code lines (non-empty, non-comment lines) covered by code duplications in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; The number of logical code lines (non-empty, non-comment lines) covered by code duplications in the component.</description>
    <priority>INFO</priority>
  </rule>
  <rule key = "AAA">
    <name>Avoid Accessibility Alteration</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allows for the runtime alteration of variable, class, or method visibility, even if they are private. This violates the principle of encapsulation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.reflect.AccessibleObject;&#x0A;import java.lang.reflect.Method;&#x0A;import java.security.PrivilegedAction;&#x0A;&#x0A;public class Violation {&#x0A;  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {&#x0A;    &#x0A;    // Possible call to forbidden getDeclaredConstructors&#x0A;    Class[] arrayOfClass = new Class[1];&#x0A;    this.getClass().getDeclaredConstructors();&#x0A;    this.getClass().getDeclaredConstructor(arrayOfClass);&#x0A;    Class clazz = this.getClass();&#x0A;    clazz.getDeclaredConstructor(arrayOfClass);&#x0A;    clazz.getDeclaredConstructors();&#x0A;    &#x0A;    // Possible call to forbidden setAccessible&#x0A;    clazz.getMethod(&amp;quot;&amp;quot;, arrayOfClass).setAccessible(false);&#x0A;    AccessibleObject.setAccessible(null, false);&#x0A;    Method.setAccessible(null, false);&#x0A;    Method[] methodsArray = clazz.getMethods();&#x0A;    int nbMethod;&#x0A;    for ( nbMethod = 0; nbMethod &amp;lt; methodsArray.length; nbMethod++ ) {&#x0A;      methodsArray[nbMethod].setAccessible(false);&#x0A;    }&#x0A;&#x0A;    // Possible call to forbidden PrivilegedAction&#x0A;    PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "AAL">
    <name>Avoid Array Loops</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Instead of manually copying data between two arrays, use the efficient System.arraycopy method instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {&#x0A;  public void bar() {&#x0A;    int[] a = new int[10];&#x0A;    int[] b = new int[10];&#x0A;    for (int i=0;i&amp;lt;10;i++) {&#x0A;      b[i]=a[i];&#x0A;    }&#x0A;  }&#x0A;}&#x0A;&#x0A;// this will trigger the rule&#x0A;for (int i=0;i&amp;lt;10;i++) {&#x0A;  b[i]=a[c[i]];&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ABSALIL">
    <name>Avoid Branching Statement As Last In Loop</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Using a branching statement as the last part of a loop may be a bug, and/or is confusing. Ensure that the usage is not a bug, or consider using another approach.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// unusual use of branching statement in a loop&#x0A;for (int i = 0; i &amp;lt; 10; i++) {&#x0A;  if (i*i &amp;lt;= 25) {&#x0A;    continue;&#x0A;  }&#x0A;  break;&#x0A;}&#x0A;&#x0A;// this makes more sense ...&#x0A;for (int i = 0; i &amp;lt; 10; i++) {&#x0A;  if (i*i &amp;gt; 25) {&#x0A;    break;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ACF">
    <name>Avoid Calling Finalize</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains an explicit invocation of the &lt;code&gt;finalize()&lt;/code&gt;&#x0A;  method on an object.&amp;nbsp; Because finalizer methods are supposed to be&#x0A;  executed once, and only by the VM, this is a bad idea.&lt;/p&gt;&#x0A;&lt;p&gt;If a connected set of objects beings finalizable, then the VM will invoke the&#x0A;finalize method on all the finalizable object, possibly at the same time in different threads.&#x0A;Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize&#x0A;on objects referenced by X, because they may already be getting finalized in a separate thread.&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The method Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. It should not be invoked by application logic.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void foo() {&#x0A;  Bar b = new Bar();&#x0A;  b.finalize();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ACGE">
    <name>Avoid Catching Generic Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package com.igate.primitive;&#x0A;&#x0A;public class PrimitiveType {&#x0A;  public void downCastPrimitiveType() {&#x0A;    try {&#x0A;      System.out.println(&amp;quot; i [&amp;quot; + i + &amp;quot;]&amp;quot;);&#x0A;    } catch(Exception e) {&#x0A;      e.printStackTrace();&#x0A;    } catch(RuntimeException e) {&#x0A;      e.printStackTrace();&#x0A;    } catch(NullPointerException e) {&#x0A;      e.printStackTrace();&#x0A;    }&#x0A;  } &#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ACI">
    <name>Avoid Constants Interface</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;An interface should be used only to characterize the external behavior of an implementing class: using an interface as a container of constants is a poor usage pattern and not recommended.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface ConstantsInterface {&#x0A;  public static final int CONSTANT1=0;&#x0A;  public static final String CONSTANT2=&amp;quot;1&amp;quot;;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ACWAM">
    <name>Abstract Class Without Abstract Method</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided prevent direct instantiation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class Foo {&#x0A;  void int method1() { /*...*/ }&#x0A;  void int method2() { /*...*/ }&#x0A;  // consider using abstract methods or removing&#x0A;  // the abstract modifier and adding protected constructors&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ADL">
    <name>Avoid Duplicate Literals</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Code containing duplicate String literals can usually be improved by declaring the String as a constant field.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private void bar() {&#x0A;  buz(&amp;quot;Howdy&amp;quot;);&#x0A;  buz(&amp;quot;Howdy&amp;quot;);&#x0A;  buz(&amp;quot;Howdy&amp;quot;);&#x0A;  buz(&amp;quot;Howdy&amp;quot;);&#x0A;}&#x0A;private void buz(String x) {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ADLIBDC">
    <name>Avoid Decimal Literals In Big Decimal Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code creates a BigDecimal from a double value that doesn&apos;t translate well to a&#x0A;decimal number.&#x0A;For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.&#x0A;You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation&#x0A;of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).&#x0A;&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;One might assume that the result of &amp;quot;new BigDecimal(0.1)&amp;quot; is exactly equal to 0.1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite length). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding. The (String) constructor, on the other hand, is perfectly predictable: &apos;new BigDecimal(&amp;quot;0.1&amp;quot;)&apos; is exactly equal to 0.1, as one would expect. Therefore, it is generally recommended that the (String) constructor be used in preference to this one.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;BigDecimal bd = new BigDecimal(1.123);    // loss of precision, this would trigger the rule&#x0A;BigDecimal bd = new BigDecimal(&amp;quot;1.123&amp;quot;);  // preferred approach&#x0A;BigDecimal bd = new BigDecimal(12);       // preferred approach, ok for integer values&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ADS">
    <name>Avoid Dollar Signs</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using dollar signs in variable/method/class/interface names.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Fo$o { // not a recommended name&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "AFNMMN">
    <name>Avoid Field Name Matching Method Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  Object bar;&#x0A;  // bar is data or an action or both?&#x0A;  void bar() {&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "AFNMTN">
    <name>Avoid Field Name Matching Type Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and/or field names should be chosen more carefully.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Bar {&#x0A;  int foo; // There is probably a better name that can be used&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ALEI">
    <name>Avoid Losing Exception Information</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Statements in a catch block that invoke accessors on the exception without using the information only add to code size. Either remove the invocation, or use the return result.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  try {&#x0A;    // do something&#x0A;  } catch (SomeException se) {&#x0A;    se.getMessage();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "AMUO">
    <name>Avoid Multiple Unary Operators</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The use of multiple unary operators may be problematic, and/or confusing. Ensure that the intended usage is not a bug, or consider simplifying the expression.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// These are typo bugs, or at best needlessly complex and confusing:&#x0A;int i = - -1;&#x0A;int j = + - +1;&#x0A;int z = ~~2;&#x0A;boolean b = !!true;&#x0A;boolean c = !!!true;&#x0A;&#x0A;// These are better:&#x0A;int i = 1;&#x0A;int j = -1;&#x0A;int z = 2;&#x0A;boolean b = true;&#x0A;boolean c = false;&#x0A;&#x0A;// And these just make your brain hurt:&#x0A;int i = ~-2;&#x0A;int j = -~7;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "APFIFC">
    <name>Avoid Protected Field In Final Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This class is declared to be final, but declares fields to be protected. Since the class&#x0A;      is final, it can not be derived from, and the use of protected is confusing. The access&#x0A;      modifier for the field should be changed to private or public to represent the true&#x0A;      use for the field.&#x0A;      &lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public final class Bar {&#x0A;  private int x;&#x0A;  protected int y;  // bar cannot be subclassed, so is y really private or package visible?&#x0A;&#x0A;  Bar() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "APMIFCNE">
    <name>Avoid Protected Method In Final Class Not Extending</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whose visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public final class Foo {&#x0A;  private int bar() {}&#x0A;&#x0A;  protected int baz() {} // Foo cannot be subclassed, and doesn&amp;#39;t extend anything, &#x0A;                         // so is baz() really private or package visible? &#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "APMP">
    <name>Avoid Prefixing Method Parameters</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Prefixing parameters by &apos;in&apos; or &apos;out&apos; pollutes the name of the parameters and reduces code readability. To indicate whether or not a parameter will be modify in a method, its better to document method behavior with Javadoc.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Not really clear&#x0A;public class Foo {&#x0A;  public void bar(int inLeftOperand, Result outRightOperand) {&#x0A;    outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Far more useful&#x0A;public class Foo {&#x0A;  /**&#x0A;   *&#x0A;   * @param leftOperand, (purpose), not modified by method.&#x0A;   * @param rightOperand (purpose), will be modified by the method: contains the result.&#x0A;   */&#x0A;  public void bar(int leftOperand, Result rightOperand) {&#x0A;    rightOperand.setValue(leftOperand * rightOperand.getValue());&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ARP">
    <name>Avoid Reassigning Parameters</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private void foo(String bar) {&#x0A;    bar = &amp;quot;something else&amp;quot;;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ASBF">
    <name>Avoid String Buffer Field</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks if held within objects with long lifetimes.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private StringBuffer buffer;  // potential memory leak as an instance variable;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ATG">
    <name>Avoid Thread Group</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread-safe.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;  void buz() {&#x0A;    ThreadGroup tg = new ThreadGroup(&amp;quot;My threadgroup&amp;quot;);&#x0A;    tg = new ThreadGroup(tg, &amp;quot;my thread group&amp;quot;);&#x0A;    tg = Thread.currentThread().getThreadGroup();&#x0A;    tg = System.getSecurityManager().getThreadGroup();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ATNFS">
    <name>Assignment To Non Final Static</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Identifies a possible unsafe usage of a static field.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class StaticField {&#x0A;  static int x;&#x0A;&#x0A;  public FinalFields(int y) {&#x0A;    x = y; // unsafe&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ATNIOSE">
    <name>Avoid Throwing New Instance Of Same Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  try {&#x0A;    // do something&#x0A;  } catch (SomeException se) {&#x0A;    // harmless comment      &#x0A;    throw new SomeException(se);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "AUHCIP">
    <name>Avoid Using Hard Coded IP</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Application with hard-coded IP addresses can become impossible to deploy in some cases. Externalizing IP addresses is preferable.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private String ip = &amp;quot;127.0.0.1&amp;quot;; // not recommended&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "AUNC">
    <name>Avoid Using Native Code</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeJNIClass {&#x0A;  public SomeJNIClass() {&#x0A;    System.loadLibrary(&amp;quot;nativelib&amp;quot;);&#x0A;  }&#x0A;&#x0A;  static {&#x0A;    System.loadLibrary(&amp;quot;nativelib&amp;quot;);&#x0A;  }&#x0A;&#x0A;  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {&#x0A;    System.loadLibrary(&amp;quot;nativelib&amp;quot;);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "AUOV">
    <name>Avoid Using Octal Values</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int i = 012;  // set i with 10 not 12&#x0A;int j = 010;  // set j with 8 not 10&#x0A;k = i * j;    // set k with 80 not 120&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "AbCWAM">
    <name>Abstract Class Without Any Method</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If an abstract class does not provide any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class abstract Example {&#x0A;  String field;&#x0A;  int otherField;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "BC">
    <name>Bad Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This code checks to see if a floating point value is equal to the special&#x0A;    Not A Number value (e.g., &lt;code&gt;if (x == Double.NaN)&lt;/code&gt;). However,&#x0A;    because of the special semantics of &lt;code&gt;NaN&lt;/code&gt;, no value&#x0A;    is equal to &lt;code&gt;Nan&lt;/code&gt;, including &lt;code&gt;NaN&lt;/code&gt;. Thus,&#x0A;    &lt;code&gt;x == Double.NaN&lt;/code&gt; always evaluates to false.&#x0A;&#x0A;    To check to see if a value contained in &lt;code&gt;x&lt;/code&gt;&#x0A;    is the special Not A Number value, use&#x0A;    &lt;code&gt;Double.isNaN(x)&lt;/code&gt; (or &lt;code&gt;Float.isNaN(x)&lt;/code&gt; if&#x0A;    &lt;code&gt;x&lt;/code&gt; is floating point precision).&#x0A;    &lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid equality comparisons with Double.NaN. Due to the implicit lack of representation precision when comparing floating point numbers these are likely to cause logic errors.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;boolean x = (y == Double.NaN);&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BNC">
    <name>Broken Null Check</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of &amp;amp;&amp;amp; or vice versa.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public String bar(String string) {&#x0A;  // should be &amp;amp;&amp;amp;&#x0A;  if (string!=null || !string.equals(&amp;quot;&amp;quot;))&#x0A;    return string;&#x0A;  // should be ||&#x0A;  if (string==null &amp;amp;&amp;amp; string.equals(&amp;quot;&amp;quot;))&#x0A;    return string;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "CASR">
    <name>Consecutive Appends Should Reuse</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Consecutively calls to StringBuffer/StringBuilder .append should reuse the target object. This can improve the performance.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String foo = &amp;quot; &amp;quot;;&#x0A;&#x0A;StringBuffer buf = new StringBuffer();&#x0A;buf.append(&amp;quot;Hello&amp;quot;); // poor&#x0A;buf.append(foo);&#x0A;buf.append(&amp;quot;World&amp;quot;);&#x0A;&#x0A;StringBuffer buf = new StringBuffer();&#x0A;buf.append(&amp;quot;Hello&amp;quot;).append(foo).append(&amp;quot;World&amp;quot;); // good&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "CCEWTA">
    <name>Class Cast Exception With To Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code is casting the result of calling &lt;code&gt;toArray()&lt;/code&gt; on a collection&#x0A;to a type more specific than &lt;code&gt;Object[]&lt;/code&gt;, as in:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;String[] getAsArray(Collection&amp;lt;String&amp;gt; c) {&#x0A;  return (String[]) c.toArray();&#x0A;  }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;This will usually fail by throwing a ClassCastException. The &lt;code&gt;toArray()&lt;/code&gt;&#x0A;of almost all collections return an &lt;code&gt;Object[]&lt;/code&gt;. They can&apos;t really do anything else,&#x0A;since the Collection object has no reference to the declared generic type of the collection.&#x0A;&lt;p&gt;The correct way to do get an array of a specific type from a collection is to use&#x0A;  &lt;code&gt;c.toArray(new String[]);&lt;/code&gt;&#x0A;  or &lt;code&gt;c.toArray(new String[c.size()]);&lt;/code&gt; (the latter is slightly more efficient).&#x0A;&lt;p&gt;There is one common/known exception exception to this. The &lt;code&gt;toArray()&lt;/code&gt;&#x0A;method of lists returned by &lt;code&gt;Arrays.asList(...)&lt;/code&gt; will return a covariantly&#x0A;typed array. For example, &lt;code&gt;Arrays.asArray(new String[] { &quot;a&quot; }).toArray()&lt;/code&gt;&#x0A;will return a &lt;code&gt;String []&lt;/code&gt;. FindBugs attempts to detect and suppress&#x0A;such cases, but may miss some.&#x0A;&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;When deriving an array of a specific class from your Collection, one should provide an array of the same class as the parameter of the toArray() method. Doing otherwise you will result in a ClassCastException.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Collection c = new ArrayList();&#x0A;Integer obj = new Integer(1);&#x0A;c.add(obj);&#x0A;// this would trigger the rule (and throw a ClassCastException if executed)&#x0A;Integer[] a = (Integer [])c.toArray();&#x0A;&#x0A;// this is fine and will not trigger the rule&#x0A;Integer[] b = (Integer [])c.toArray(new Integer[c.size()]);&#x0A;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "CCOM">
    <name>Constructor Calls Overridable Method</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to debug. It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super(). If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SeniorClass {&#x0A;  public SeniorClass(){&#x0A;    toString(); //may throw NullPointerException if overridden&#x0A;  }&#x0A;&#x0A;  public String toString(){&#x0A;    return &amp;quot;IAmSeniorClass&amp;quot;;&#x0A;  }&#x0A;}&#x0A;&#x0A;public class JuniorClass extends SeniorClass {&#x0A;  private String name;&#x0A;&#x0A;  public JuniorClass(){&#x0A;    super(); //Automatic call leads to NullPointerException&#x0A;    name = &amp;quot;JuniorClass&amp;quot;;&#x0A;  }&#x0A;&#x0A;  public String toString(){&#x0A;    return name.toUpperCase();&#x0A;  }&#x0A;}&#x0A;  &lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "CIS">
    <name>Collapsible If Statements</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Sometimes two consecutive &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar() {&#x0A;  if (x) {      // original implementation&#x0A;    if (y) {&#x0A;      // do stuff&#x0A;    }&#x0A;  }&#x0A;}&#x0A;&#x0A;void bar() {&#x0A;  if (x &amp;amp;&amp;amp; y) { // optimized implementation&#x0A;    // do stuff&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "CLA">
    <name>Consecutive Literal Appends</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Consecutively calling StringBuffer/StringBuilder.append with String literals&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;StringBuffer buf = new StringBuffer();&#x0A;buf.append(&amp;quot;Hello&amp;quot;).append(&amp;quot; &amp;quot;).append(&amp;quot;World&amp;quot;); // poor&#x0A;buf.append(&amp;quot;Hello World&amp;quot;); // good&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "CNC">
    <name>Class Naming Conventions</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).&#x0A;&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Class names should always begin with an upper case character.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "CRS">
    <name>Check Result Set</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is &apos;false&apos;, it should be handled properly.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Statement stat = conn.createStatement();&#x0A;ResultSet rst = stat.executeQuery(&amp;quot;SELECT name FROM person&amp;quot;);&#x0A;rst.next(); // what if it returns false? bad form&#x0A;String firstName = rst.getString(1);&#x0A;Statement stat = conn.createStatement();&#x0A;ResultSet rst = stat.executeQuery(&amp;quot;SELECT name FROM person&amp;quot;);&#x0A;if (rst.next()) { // result is properly examined and used&#x0A;  String firstName = rst.getString(1);&#x0A;} else { // handle missing data&#x0A;}&#x0A;            &lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "CSR">
    <name>Check Skip Result</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private FileInputStream _s = new FileInputStream(&amp;quot;file&amp;quot;);&#x0A;&#x0A;  public void skip(int n) throws IOException {&#x0A;    _s.skip(n); // You are not sure that exactly n bytes are skipped&#x0A;  }&#x0A;&#x0A;  public void skipExactly(int n) throws IOException {&#x0A;    while (n != 0) {&#x0A;      long skipped = _s.skip(n);&#x0A;      if (skipped == 0)&#x0A;        throw new EOFException();&#x0A;      n -= skipped;&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "CTCNSE">
    <name>Clone Throws Clone Not Supported Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The method clone() should throw a CloneNotSupportedException.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass implements Cloneable {&#x0A;  public Object clone() { // will cause an error&#x0A;    MyClass clone = (MyClass)super.clone();&#x0A;    return clone;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "CWOPCSBF">
    <name>Class With Only Private Constructors Should Be Final</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A class with only private constructors should be final, unless the private constructor is invoked by an inner class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {  //Should be final&#x0A;  private Foo() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ClMMIC">
    <name>Clone Method Must Implement Cloneable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;   Class implements Cloneable but does not define or&#x0A;   use the clone method.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException. This version uses PMD&apos;s type resolution facilities, and can detect if the class implements or extends a Cloneable class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;&#x0A;public class MyClass {&#x0A;  public Object clone() throws CloneNotSupportedException {&#x0A;    return foo;&#x0A;  }&#x0A;}&#x0A;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DCL">
    <name>Double Checked Locking</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method may contain an instance of double-checked locking.&amp;nbsp;&#x0A;  This idiom is not correct according to the semantics of the Java memory&#x0A;  model.&amp;nbsp; For more information, see the web page&#x0A;  &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot;&#x0A;  &gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Partially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it creates the object the reference is intended to point to. For more details refer to: &lt;a href=&quot;http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html&quot; class=&quot;uri&quot;&gt;http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html&lt;/a&gt; or [http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html]&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  Object baz;&#x0A;&#x0A;  Object bar() {&#x0A;    if (baz == null) { // baz may be non-null yet not fully created&#x0A;      synchronized(this) {&#x0A;        if (baz == null) {&#x0A;          baz = new Object();&#x0A;        }&#x0A;      }&#x0A;    }&#x0A;    return baz;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DCTR">
    <name>Dont Call Thread Run</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method explicitly invokes &lt;code&gt;run()&lt;/code&gt; on an object.&amp;nbsp;&#x0A;  In general, classes implement the &lt;code&gt;Runnable&lt;/code&gt; interface because&#x0A;  they are going to have their &lt;code&gt;run()&lt;/code&gt; method invoked in a new thread,&#x0A;  in which case &lt;code&gt;Thread.start()&lt;/code&gt; is the right method to call.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Explicitly calling Thread.run() method will execute in the caller&apos;s thread of control. Instead, call Thread.start() for the intended behavior.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Thread t = new Thread();&#x0A;t.run();                 // use t.start() instead&#x0A;new Thread().run();      // same violation&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DI">
    <name>Duplicate Imports</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Duplicate or overlapping import statements should be avoided.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.String;&#x0A;import java.lang.*;&#x0A;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "DIJL">
    <name>Dont Import Java Lang</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid importing anything from the package &apos;java.lang&apos;. These classes are automatically imported (JLS 7.5.3).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.String;  // this is unnecessary&#x0A;&#x0A;public class Foo {}       // --- in another source code file...&#x0A;&#x0A;import java.lang.*;       // this is bad&#x0A;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "DIS">
    <name>Dont Import Sun</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid importing anything from the &apos;sun.*&apos; packages. These packages are not portable and are likely to change.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import sun.misc.foo;&#x0A;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DNCGCE">
    <name>Do Not Call Garbage Collection Explicitly</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Code explicitly invokes garbage collection.&#x0A;  Except for specific use in benchmarking, this is very dubious.&lt;/p&gt;&#x0A;  &lt;p&gt;In the past, situations where people have explicitly invoked&#x0A;  the garbage collector in routines such as close or finalize methods&#x0A;  has led to huge performance black holes. Garbage collection&#x0A;   can be expensive. Any situation that forces hundreds or thousands&#x0A;   of garbage collections will bring the machine to a crawl.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, &amp;quot;modern&amp;quot; jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class GCCall {&#x0A;  public GCCall() {&#x0A;    // Explicit gc call !&#x0A;    System.gc();&#x0A;  }&#x0A;&#x0A;  public void doSomething() {&#x0A;    // Explicit gc call !&#x0A;    Runtime.getRuntime().gc();&#x0A;  }&#x0A;&#x0A;  public explicitGCcall() { &#x0A;    // Explicit gc call ! System.gc(); &#x0A;  }&#x0A;&#x0A;  public void doSomething() { &#x0A;    // Explicit gc call ! Runtime.getRuntime().gc(); &#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DNCSE">
    <name>Do Not Call System Exit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Invoking System.exit shuts down the entire Java virtual machine. This&#x0A;   should only been done when it is appropriate. Such calls make it&#x0A;   hard or impossible for your code to be invoked by other code.&#x0A;   Consider throwing a RuntimeException instead.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Web applications should not call System.exit(), since only the web container or the application server should stop the JVM. This rule also checks for the equivalent call Runtime.getRuntime().exit().&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    System.exit(0); // never call this when running in an application server!&#x0A;}&#x0A;public void foo() {&#x0A;    Runtime.getRuntime().exit(0); // never stop the JVM manually, the container will do this.&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DNEJLE">
    <name>Do Not Extend Java Lang Error</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Errors are system exceptions. Do not extend them.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Error { }&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DNTEIF">
    <name>Do Not Throw Exception In Finally</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Throwing exceptions within a &apos;finally&apos; block is confusing since they may mask other exceptions or code defects. Note: This is a PMD implementation of the Lint4j rule &amp;quot;A throw in a finally block&amp;quot;&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void bar() {&#x0A;    try {&#x0A;      // Here do some stuff&#x0A;    } catch( Exception e) {&#x0A;      // Handling the issue&#x0A;    } finally {&#x0A;      // is this really a good idea ?&#x0A;      throw new Exception();&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DP">
    <name>Default Package</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Use explicit scoping instead of the default package private level.&lt;/p&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "DUFTFLI">
    <name>Dont Use Float Type For Loop Indices</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Don&apos;t use floating point for loop indices. If you must use floating point, use double unless you&apos;re certain that float provides enough precision and you have a compelling performance need (space or time).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Count {&#x0A;  public static void main(String[] args) {&#x0A;    final int START = 2000000000;&#x0A;    int count = 0;&#x0A;    for (float f = START; f &amp;lt; START + 50; f++)&#x0A;      count++;&#x0A;    //Prints 0 because (float) START == (float) (START + 50).&#x0A;    System.out.println(count);&#x0A;    //The termination test misbehaves due to floating point granularity.&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EAFC">
    <name>Exception As Flow Control</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging. Either add the necessary validation or use an alternate control structure.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  try {&#x0A;    try {&#x0A;    } catch (Exception e) {&#x0A;      throw new WrapperException(e);&#x0A;      // this is essentially a GOTO to the WrapperException catch block&#x0A;    }&#x0A;  } catch (WrapperException e) {&#x0A;    // do some more stuff&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EF">
    <name>Empty Finalizer</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Empty &lt;code&gt;finalize()&lt;/code&gt; methods are useless, so they should&#x0A;  be deleted.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty finalize methods serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  protected void finalize() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "EMIACSBA">
    <name>Empty Method In Abstract Class Should Be Abstract</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty methods in an abstract class should be tagged as abstract. This helps to remove their inappropriate usage by developers who should be implementing their own versions in the concrete subclasses.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class ShouldBeAbstract {&#x0A;  public Object couldBeAbstract() {&#x0A;    // Should be abstract method ?&#x0A;    return null;&#x0A;  }&#x0A;&#x0A;  public void couldBeAbstract() {&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EN">
    <name>Equals Null</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Tests for null should not use the equals() method. The &apos;==&apos; operator should be used instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String x = &amp;quot;foo&amp;quot;;&#x0A;&#x0A;if (x.equals(null)) { // bad form&#x0A;  doSomething();&#x0A;}&#x0A;&#x0A;if (x == null) { // preferred&#x0A;  doSomething();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EO">
    <name>Extends Object</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;No need to explicitly extend Object.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Object { // not required&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ESI">
    <name>Empty Static Initializer</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;An empty static initializer serves no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  static {&#x0A;    // empty&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ESNIL">
    <name>Empty Statement Not In Loop</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;An empty statement (or a semicolon by itself) that is not used as the sole body of a &apos;for&apos; or &apos;while&apos; loop is probably a bug. It could also be a double semicolon, which has no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doit() {&#x0A;  // this is probably not what you meant to do&#x0A;  ;&#x0A;  // the extra semicolon here this is not necessary&#x0A;  System.out.println(&amp;quot;look at the extra semicolon&amp;quot;);;&#x0A;}&#x0A;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "EmSB">
    <name>Empty Statement Block</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty block statements serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private int _bar;&#x0A;&#x0A;  public void setBar(int bar) {&#x0A;    { _bar = bar; } // Why not?&#x0A;    {}              // But remove this.&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "FDNCSF">
    <name>Finalize Does Not Call Super Finalize</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This &lt;code&gt;finalize()&lt;/code&gt; method does not make a call to its&#x0A;  superclass&apos;s &lt;code&gt;finalize()&lt;/code&gt; method.&amp;nbsp; So, any finalizer&#x0A;  actions defined for the superclass will not be performed.&amp;nbsp;&#x0A;  Add a call to &lt;code&gt;super.finalize()&lt;/code&gt;.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If the finalize() is implemented, its last action should be to call super.finalize.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;protected void finalize() {&#x0A;  something();&#x0A;  // neglected to call super.finalize()&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "FDSBASOC">
    <name>Field Declarations Should Be At Start Of Class</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class HelloWorldBean {&#x0A;&#x0A;  // Field declared before methods / inner classes - OK&#x0A;  private String _thing;&#x0A;&#x0A;  public String getMessage() {&#x0A;    return &amp;quot;Hello World!&amp;quot;;&#x0A;  }&#x0A;&#x0A;  // Field declared after methods / inner classes - avoid this&#x0A;  private String _fieldInWrongLocation;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "FFCBS">
    <name>Final Field Could Be Static</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public final int BAR = 42; // this could be static and save some space&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "FLSBWL">
    <name>For Loop Should Be While Loop</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Some for loops can be simplified while loops, this makes them more concise.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar() {&#x0A;    for (;true;) true; // No Init or Update part, may as well be: while (true)&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "FO">
    <name>Finalize Overloaded</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  // this is confusing and probably a bug&#x0A;  protected void finalize(int a) {&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "FOCSF">
    <name>Finalize Only Calls Super Finalize</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If the finalize() is implemented, it should do something besides just calling super.finalize().&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;protected void finalize() {&#x0A;  super.finalize();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "FSBP">
    <name>Finalize Should Be Protected</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A class&apos;s &lt;code&gt;finalize()&lt;/code&gt; method should have protected access,&#x0A;   not public.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;When overriding the finalize(), the new method should be set as protected. If made public, other classes may invoke it at inappropriate times.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void finalize() {&#x0A;  // do something&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "GDL">
    <name>Guard Debug Logging</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;When log messages are composed by concatenating strings, the whole section should be guarded by a isDebugEnabled() check to avoid performance and memory issues.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {&#x0A;  private static final Log __log = LogFactory.getLog(Test.class);&#x0A;  public void test() {&#x0A;    // okay:&#x0A;    __log.debug(&amp;quot;log something&amp;quot;);&#x0A;&#x0A;    // okay:&#x0A;    __log.debug(&amp;quot;log something with exception&amp;quot;, e);&#x0A;&#x0A;    // bad:&#x0A;    __log.debug(&amp;quot;log something&amp;quot; + &amp;quot; and &amp;quot; + &amp;quot;concat strings&amp;quot;);&#x0A;&#x0A;    // bad:&#x0A;    __log.debug(&amp;quot;log something&amp;quot; + &amp;quot; and &amp;quot; + &amp;quot;concat strings&amp;quot;, e);&#x0A;&#x0A;    // good:&#x0A;    if (__log.isDebugEnabled()) {&#x0A;      __log.debug(&amp;quot;bla&amp;quot; + &amp;quot;&amp;quot;,e );&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "GLS">
    <name>Guard Log Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Whenever using a log level, one should check if the loglevel is actually enabled, or otherwise skip the associate String creation and manipulation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Add this for performance&#x0A;if (log.isDebugEnabled() { &#x0A;  // ...&#x0A;  log.debug(&amp;quot;log something&amp;quot; + &amp;quot; and &amp;quot; + &amp;quot;concat strings&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "GLSJU">
    <name>Guard Log Statement Java Util</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Whenever using a log level, one should check if the loglevel is actually enabled, or otherwise skip the associate String creation and manipulation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Add this for performance&#x0A;if (log.isLoggable(Level.FINE)) {&#x0A;  // ...&#x0A;  log.fine(&amp;quot;log something&amp;quot; + &amp;quot; and &amp;quot; + &amp;quot;concat strings&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "GN">
    <name>Generics Naming</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Names for references to generic values should be limited to a single uppercase letter.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface GenericDao&amp;lt;E extends BaseModel, K extends Serializable&amp;gt; extends BaseDao {&#x0A;  // This is ok...&#x0A;}&#x0A;&#x0A;public interface GenericDao&amp;lt;E extends BaseModel, K extends Serializable&amp;gt; {&#x0A;  // Also this&#x0A;}&#x0A;&#x0A;public interface GenericDao&amp;lt;e extends BaseModel, K extends Serializable&amp;gt; {&#x0A;  // &amp;#39;e&amp;#39; should be an &amp;#39;E&amp;#39;&#x0A;}&#x0A;&#x0A;public interface GenericDao&amp;lt;EF extends BaseModel, K extends Serializable&amp;gt; {&#x0A;  // &amp;#39;EF&amp;#39; is not ok.&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "IF">
    <name>Immutable Field</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Identifies private fields whose values never change once they are initialized either in the declaration of the field or by a constructor. This helps in converting existing classes to becoming immutable ones.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private int x; // could be final&#x0A;&#x0A;  public Foo() {&#x0A;    x = 7;&#x0A;  }&#x0A;&#x0A;  public void foo() {&#x0A;    int a = x + 2;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "IFSP">
    <name>Import From Same Package</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;There is no need to import a type that lives in the same package.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt; package foo;&#x0A; &#x0A; import foo.Buz; // no need for this&#x0A; import foo.*; // or this&#x0A; &#x0A; public class Bar{}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "IO">
    <name>Idempotent Operations</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid idempotent operations - they have no effect.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void bar() {&#x0A;    int x = 2;&#x0A;    x = x;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ISB">
    <name>Inefficient String Buffering</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will need to be created and destroyed by the JVM.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Avoid this, two buffers are actually being created here&#x0A;StringBuffer sb = new StringBuffer(&amp;quot;tmp = &amp;quot;+System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;));&#x0A;    &#x0A;// do this instead&#x0A;StringBuffer sb = new StringBuffer(&amp;quot;tmp = &amp;quot;);&#x0A;sb.append(System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;));&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ISMUB">
    <name>If Stmts Must Use Braces</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using if statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (foo) // not recommended&#x0A;  x++;&#x0A;&#x0A;if (foo) { // preferred approach&#x0A;  x++;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ITGC">
    <name>Instantiation To Get Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method allocates an object just to call getClass() on it, in order to&#x0A;  retrieve the Class object for it. It is simpler to just access the .class property of the class.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid instantiating an object just to call getClass() on it; use the .class public member instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// replace this&#x0A;Class c = new String().getClass();&#x0A;&#x0A;// with this:&#x0A;Class c = String.class;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "JI">
    <name>Jumbled Incrementer</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid jumbled loop incrementers - it&apos;s usually a mistake, and is confusing even if intentional.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class JumbledIncrementerRule1 {&#x0A;  public void foo() {&#x0A;    for (int i = 0; i &amp;lt; 10; i++) {      // only references &amp;#39;i&amp;#39;&#x0A;      for (int k = 0; k &amp;lt; 20; i++) {    // references both &amp;#39;i&amp;#39; and &amp;#39;k&amp;#39;&#x0A;        System.out.println(&amp;quot;Hello&amp;quot;);&#x0A;      }&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "JUASIM">
    <name>JUnit Assertions Should Include Message</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;JUnit assertions should include an informative message - i.e., use the three-argument version of assertEquals(), not the two-argument version.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends TestCase {&#x0A;  public void testSomething() {&#x0A;    assertEquals(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);&#x0A;    // Use the form:&#x0A;    // assertEquals(&amp;quot;Foo does not equals bar&amp;quot;, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);&#x0A;    // instead&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "JUS">
    <name>JUnit Spelling</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Some JUnit framework methods are easy to misspell.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import junit.framework.*;&#x0A;&#x0A;public class Foo extends TestCase {&#x0A;  public void setup() {} // oops, should be setUp&#x0A;  public void TearDown() {} // oops, should be tearDown&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "JUSS">
    <name>JUnit Static Suite</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Class is a JUnit TestCase and implements the suite() method.&#x0A; The suite method should be declared as being static, but isn&apos;t.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The suite() method in a JUnit test needs to be both public and static.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import junit.framework.*;&#x0A;&#x0A;public class Foo extends TestCase {&#x0A;  public void suite() {}         // oops, should be static&#x0A;  private static void suite() {} // oops, should be public&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "JUTCTMA">
    <name>JUnit Test Contains Too Many Asserts</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;JUnit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which it is harder to verify correctness. Consider breaking the test scenario into multiple, shorter test scenarios. Customize the maximum number of assertions used by this Rule to suit your needs.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyTestCase extends TestCase {&#x0A;  // Ok&#x0A;  public void testMyCaseWithOneAssert() {&#x0A;    boolean myVar = false;&#x0A;    assertFalse(&amp;quot;should be false&amp;quot;, myVar);&#x0A;  }&#x0A;&#x0A;  // Bad, too many asserts (assuming max=1)&#x0A;  public void testMyCaseWithMoreAsserts() {&#x0A;    boolean myVar = false;&#x0A;    assertFalse(&amp;quot;myVar should be false&amp;quot;, myVar);&#x0A;    assertEquals(&amp;quot;should equals false&amp;quot;, false, myVar);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "JUTSIA">
    <name>JUnit Tests Should Include Assert</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;JUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends TestCase {&#x0A;  public void testSomething() {&#x0A;    Bar b = findBar();&#x0A;    // This is better than having a NullPointerException&#x0A;    // assertNotNull(&amp;quot;bar not found&amp;quot;, b);&#x0A;    b.work();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "LHNC">
    <name>Local Home Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The Local Home interface of a Session EJB should be suffixed by &apos;LocalHome&apos;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name&#x0A;public interface MissingProperSuffix extends javax.ejb.EJBLocalHome {} // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "LI">
    <name>Logic Inversion</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Use opposite operator instead of negating the whole expression with a logic complement operator.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean bar(int a, int b) {&#x0A;  if (!(a == b)) // use !=&#x0A;    return false;&#x0A;  if (!(a &amp;lt; b)) // use &amp;gt;=&#x0A;    return false;&#x0A;  return true;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "LINSF">
    <name>Logger Is Not Static Final</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;In most cases, the Logger reference can be declared as static and final.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  Logger log = Logger.getLogger(Foo.class.getName());               // not recommended&#x0A;  static final Logger log = Logger.getLogger(Foo.class.getName());  // preferred approach&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "LISNC">
    <name>Local Interface Session Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The Local Interface of a Session EJB should be suffixed by &apos;Local&apos;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyLocal extends javax.ejb.EJBLocalObject {} // proper name&#x0A;public interface MissingProperSuffix extends javax.ejb.EJBLocalObject {} // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MDBASBNC">
    <name>MDBAnd Session Bean Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by &apos;Bean&apos;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeBean implements SessionBean{} // proper name&#x0A;public class MissingTheProperSuffix implements SessionBean {} // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MNC">
    <name>Misplaced Null Check</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The null check here is misplaced. If the variable is null a NullPointerException will be thrown. Either the check is useless (the variable will never be &amp;quot;null&amp;quot;) or it is incorrect.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar() {&#x0A;    if (a.equals(baz) &amp;amp;&amp;amp; a != null) {}&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar() {&#x0A;    if (a.equals(baz) || a == null) {}&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MRIA">
    <name>Method Returns Internal Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A public static method returns a reference to&#x0A;   an array that is part of the static state of the class.&#x0A;   Any code that calls this method can freely modify&#x0A;   the underlying array.&#x0A;   One fix is to return a copy of the array.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Exposing internal arrays to the caller violates object encapsulation since elements can be removed or replaced outside of the object that owns it. It is safer to return a copy of the array.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SecureSystem {&#x0A;  UserData [] ud;&#x0A;  public UserData [] getUserData() {&#x0A;    // Don&amp;#39;t return directly the internal array, return a copy&#x0A;    return ud;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MSMINIC">
    <name>Missing Static Method In Non Instantiatable Class</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A class that has private constructors and does not have any static methods or fields cannot be used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// This class is unusable, since it cannot be&#x0A;// instantiated (private constructor),&#x0A;// and no static method can be called.&#x0A;&#x0A;public class Foo {&#x0A;  private Foo() {}&#x0A;  void foo() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "MSVUID">
    <name>Missing Serial Version UID</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface, but does&#x0A;  not define a &lt;code&gt;serialVersionUID&lt;/code&gt; field.&amp;nbsp;&#x0A;  A change as simple as adding a reference to a .class object&#x0A;    will add synthetic fields to the class,&#x0A;   which will unfortunately change the implicit&#x0A;   serialVersionUID (e.g., adding a reference to &lt;code&gt;String.class&lt;/code&gt;&#x0A;   will generate a static field &lt;code&gt;class$java$lang$String&lt;/code&gt;).&#x0A;   Also, different source code to bytecode compilers may use different&#x0A;   naming conventions for synthetic variables generated for&#x0A;   references to class objects or inner classes.&#x0A;   To ensure interoperability of Serializable across versions,&#x0A;   consider adding an explicit serialVersionUID.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Serializable classes should provide a serialVersionUID field.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements java.io.Serializable {&#x0A;  String name;&#x0A;  // Define serialization id to avoid serialization related bugs&#x0A;  // i.e., public static final long serialVersionUID = 4328743;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MTOL">
    <name>More Than One Logger</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Normally only one logger is used in each class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  Logger log = Logger.getLogger(Foo.class.getName());&#x0A;  // It is very rare to see two loggers on a class, normally&#x0A;  // log information is multiplexed by levels&#x0A;  Logger log2= Logger.getLogger(Foo.class.getName());&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NCLISS">
    <name>Non Case Label In Switch Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A non-case label (e.g. a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar(int a) {&#x0A;    switch (a) {&#x0A;      case 1:&#x0A;        // do something&#x0A;        break;&#x0A;      mylabel: // this is legal, but confusing!&#x0A;        break;&#x0A;      default:&#x0A;        break;&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NP">
    <name>No Package</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Detects when a class or interface does not have a package definition.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// no package declaration&#x0A;public class ClassInDefaultPackage {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "NSI">
    <name>Non Static Initializer</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {&#x0A;  // this block gets run before any call to a constructor&#x0A;  {&#x0A;    System.out.println(&amp;quot;I am about to construct myself&amp;quot;);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NTSS">
    <name>Non Thread Safe Singleton</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an initialize-on-demand holder class (do not use the double-check idiom). See Effective Java, item 48.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static Foo foo = null;&#x0A;&#x0A;//multiple simultaneous callers may see partially initialized objects&#x0A;public static Foo getFoo() {&#x0A;  if (foo==null)&#x0A;    foo = new Foo();&#x0A;  return foo;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "OBEAH">
    <name>Override Both Equals And Hashcode</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar { // poor, missing a hashCode() method&#x0A;  public boolean equals(Object o) {&#x0A;    // do some comparison&#x0A;  }&#x0A;}&#x0A;&#x0A;public class Baz { // poor, missing an equals() method&#x0A;  public int hashCode() {&#x0A;    // return some hash value&#x0A;  }&#x0A;}&#x0A;&#x0A;public class Foo { // perfect, both methods provided&#x0A;  public boolean equals(Object other) {&#x0A;    // do some comparison&#x0A;  }&#x0A;  public int hashCode() {&#x0A;    // return some hash value&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ODPL">
    <name>One Declaration Per Line</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String name;            // separate declarations&#x0A;String lastname;&#x0A;&#x0A;String name, lastname;  // combined declaration, a violation&#x0A;&#x0A;String name,&#x0A;       lastname;        // combined declaration on multiple lines, no violation by default.&#x0A;                        // Set property strictMode to true to mark this as violation.&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "OTAC">
    <name>Optimizable To Array Call</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method uses the toArray() method of a collection derived class, and passes&#x0A;in a zero-length prototype array argument.  It is more efficient to use&#x0A;&lt;code&gt;myCollection.toArray(new Foo[myCollection.size()])&lt;/code&gt;&#x0A;If the array passed in is big enough to store all of the&#x0A;elements of the collection, then it is populated and returned&#x0A;directly. This avoids the need to create a second array&#x0A;(by reflection) to return as the result.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Calls to a collection&apos;s toArray() method should specify target arrays sized to match the size of the collection. Initial arrays that are too small are discarded in favour of new ones that have to be created that are the proper size.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;List foos = getFoos();&#x0A;&#x0A;// inefficient, the array will be discarded&#x0A;Foo[] fooArray = foos.toArray(new Foo[0]);&#x0A;   &#x0A;// much better; this one sizes the destination array, &#x0A;// avoiding of a new one via reflection&#x0A;Foo[] fooArray = foos.toArray(new Foo[foos.size()]);&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "PC">
    <name>Package Case</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Detects when a package definition contains uppercase characters.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package com.MyCompany;  // should be lowercase name&#x0A;&#x0A;public class SomeClass {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "PCI">
    <name>Proper Clone Implementation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This non-final class defines a clone() method that does not call super.clone().&#x0A;If this class (&quot;&lt;i&gt;A&lt;/i&gt;&quot;) is extended by a subclass (&quot;&lt;i&gt;B&lt;/i&gt;&quot;),&#x0A;and the subclass &lt;i&gt;B&lt;/i&gt; calls super.clone(), then it is likely that&#x0A;&lt;i&gt;B&lt;/i&gt;&apos;s clone() method will return an object of type &lt;i&gt;A&lt;/i&gt;,&#x0A;which violates the standard contract for clone().&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt; If all clone() methods call super.clone(), then they are guaranteed&#x0A;to use Object.clone(), which always returns an object of the correct type.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Object clone() should be implemented with super.clone().&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  public Object clone() {&#x0A;    return new Foo(); // This is bad&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "PL">
    <name>Proper Logger</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A logger should normally be defined private static final and be associated with the correct class. Private final Log log; is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private static final Log LOG = LogFactory.getLog(Foo.class);  // proper way&#x0A;  protected Log LOG = LogFactory.getLog(Testclass.class);       // wrong approach&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "REARTN">
    <name>Return Empty Array Rather Than Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This clone method seems to return null in some circumstances, but clone is never&#x0A;    allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError&#x0A;    instead.&#x0A;      &lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;For any method that returns an array, it is a better to return an empty array rather than a null reference. This removes the need for null checking all results and avoids inadvertent NullPointerExceptions.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Example {&#x0A;  // Not a good idea...&#x0A;  public int[] badBehavior() {&#x0A;    // ...&#x0A;    return null;&#x0A;  }&#x0A;&#x0A;  // Good behavior&#x0A;  public String[] bonnePratique() {&#x0A;    //...&#x0A;    return new String[0];&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RFFB">
    <name>Return From Finally Block</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid returning from a finally block, this can discard exceptions.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;  public String foo() {&#x0A;    try {&#x0A;      throw new Exception( &amp;quot;My Exception&amp;quot; );&#x0A;    } catch (Exception e) {&#x0A;      throw e;&#x0A;    } finally {&#x0A;      return &amp;quot;A. O. K.&amp;quot;; // return not recommended here&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RFI">
    <name>Redundant Field Initializer</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class C {&#x0A;  boolean b = false; // examples of redundant initializers&#x0A;  byte by   = 0;&#x0A;  short s   = 0;&#x0A;  char c    = 0;&#x0A;  int i     = 0;&#x0A;  long l    = 0;&#x0A;  float f   = .0f;    // all possible float literals&#x0A;  double d  = 0d;     // all possible double literals&#x0A;  Object o  = null;&#x0A;  MyClass mca[] = null;&#x0A;  int i1 = 0, ia1[] = null;&#x0A;  class Nested {&#x0A;    boolean b = false;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "RINC">
    <name>Remote Interface Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Remote Interface of a Session EJB should not have a suffix.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;/* Poor Session suffix */&#x0A;public interface BadSuffixSession extends javax.ejb.EJBObject {}&#x0A;&#x0A;/* Poor EJB suffix */&#x0A;public interface BadSuffixEJB extends javax.ejb.EJBObject {}&#x0A;&#x0A;/* Poor Bean suffix */&#x0A;public interface BadSuffixBean extends javax.ejb.EJBObject {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RSINC">
    <name>Remote Session Interface Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A Remote Home interface type of a Session EJB should be suffixed by &apos;Home&apos;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyBeautifulHome extends javax.ejb.EJBHome {} // proper name&#x0A;public interface MissingProperSuffix extends javax.ejb.EJBHome {} // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SBA">
    <name>Simplify Boolean Assertion</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid negation in an assertTrue or assertFalse test. For example, rephrase: assertTrue(!expr); as: assertFalse(expr);&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {&#x0A;  public void testX() {&#x0A;    assertTrue(&amp;quot;not empty&amp;quot;, !r.isEmpty()); // replace with assertFalse(&amp;quot;not empty&amp;quot;, r.isEmpty())&#x0A;    assertFalse(!r.isEmpty()); // replace with assertTrue(r.isEmpty())&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SBE">
    <name>Simplify Boolean Expressions</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;  // can be simplified to&#x0A;  // bar = isFoo();&#x0A;  private boolean bar = (isFoo() == true);&#x0A;&#x0A;  public isFoo() { return false;}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SBIWC">
    <name>String Buffer Instantiation With Char</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Individual character values provided as initialization arguments will be converted into integers. This can lead to internal buffer sizes that are larger than expected.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// misleading instantiation, these buffers&#x0A;// are actually sized to 99 characters long&#x0A;StringBuffer  sb1 = new StringBuffer(&amp;#39;c&amp;#39;);   &#x0A;StringBuilder sb2 = new StringBuilder(&amp;#39;c&amp;#39;);&#x0A;&#x0A;// in these forms, just single characters are allocated&#x0A;StringBuffer  sb3 = new StringBuffer(&amp;quot;c&amp;quot;);&#x0A;StringBuilder sb4 = new StringBuilder(&amp;quot;c&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SBR">
    <name>Simplify Boolean Returns</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid unnecessary if-then-else statements when returning a boolean. The result of the conditional test can be returned instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean isBarEqualTo(int x) {&#x0A;  if (bar == x) { // this bit of code...&#x0A;    return true;&#x0A;  } else {&#x0A;    return false;&#x0A;  }&#x0A;}&#x0A;&#x0A;public boolean isBarEqualTo(int x) {&#x0A;    return bar == x; // can be replaced with this&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SCFN">
    <name>Suspicious Constant Field Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Field names using all uppercase characters - Sun&apos;s Java naming conventions indicating constants - should be declared as final.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  // this is bad, since someone could accidentally&#x0A;  // do PI = 2.71828; which is actually e&#x0A;  // final double PI = 3.14; is ok&#x0A;  double PI = 3.14;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SCN">
    <name>Short Class Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Class names with fewer than five characters are not recommended.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SEJBFSBF">
    <name>Static EJBField Should Be Final</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;According to the J2EE specification, an EJB should not have any static fields with write access. However, static read-only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeEJB extends EJBObject implements EJBLocalHome {&#x0A;  private static int CountA; // poor, field can be edited&#x0A;  private static final int CountB; // preferred, read-only access&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SEMN">
    <name>Suspicious Equals Method Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The method name and parameter number are suspiciously close to equals(Object), which can denote an intention to override the equals(Object) method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public int equals(Object o) {&#x0A;    // oops, this probably was supposed to be boolean equals&#x0A;  }&#x0A;  public boolean equals(String s) {&#x0A;    // oops, this probably was supposed to be equals(Object)&#x0A;  }&#x0A;  public boolean equals(Object o1, Object o2) {&#x0A;    // oops, this probably was supposed to be equals(Object)&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SF">
    <name>Singular Field</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Fields whose scopes are limited to just single methods do not rely on the containing object to provide them to other methods. They may be better implemented as local variables within those methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private int x;  // no reason to exist at the Foo instance level&#x0A;&#x0A;  public void foo(int y) {&#x0A;    x = y + 5;&#x0A;    return x;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SOE">
    <name>Suspicious Octal Escape</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigitAny octal escape sequence followed by non-octal digits can be confusing, e.g. &amp;quot;\038&amp;quot; is interpreted as the octal escape sequence &amp;quot;\03&amp;quot; followed by the literal character &amp;quot;8&amp;quot;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() {&#x0A;  // interpreted as octal 12, followed by character &amp;#39;8&amp;#39;&#x0A;  System.out.println(&amp;quot;suspicious: \128&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "STS">
    <name>String To String</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Calling &lt;code&gt;String.toString()&lt;/code&gt; is just a redundant operation.&#x0A;  Just use the String.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid calling toString() on objects already known to be string instances; this is unnecessary.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private String baz() {&#x0A;  String bar = &amp;quot;howdy&amp;quot;;&#x0A;  return bar.toString();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SiDTE">
    <name>Signature Declare Throws Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception. JUnit classes are excluded.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void methodThrowingException() throws Exception {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "StI">
    <name>String Instantiation</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private String bar = new String(&amp;quot;bar&amp;quot;); // just do a String bar = &amp;quot;bar&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "TCWTC">
    <name>Test Class Without Test Cases</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;//Consider changing the name of the class if it is not a test&#x0A;//Consider adding test methods if it is a test&#x0A;public class CarTest {&#x0A;  public static void main(String[] args) {&#x0A;    // do something&#x0A;  }&#x0A;  // code&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "TFBFASS">
    <name>Too Few Branches For ASwitch Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Switch statements are intended to be used to support complex branching behavior. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use the if-then statement to increase code readability.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// With a minimumNumberCaseForASwitch of 3&#x0A;public class Foo {&#x0A;  public void bar() {&#x0A;    switch (condition) {&#x0A;      case ONE:&#x0A;        instruction;&#x0A;        break;&#x0A;      default:&#x0A;        break; // not enough for a &amp;#39;switch&amp;#39; stmt, a simple &amp;#39;if&amp;#39; stmt would have been more appropriate&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "TMSI">
    <name>Too Many Static Imports</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import static Lennon;&#x0A;import static Ringo;&#x0A;import static George;&#x0A;import static Paul;&#x0A;import static Yoko; // Too much !&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UAAL">
    <name>Use Arrays As List</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The java.util.Arrays class has an &amp;quot;asList&amp;quot; method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {&#x0A;  public void foo(Integer[] ints) {&#x0A;    // could just use Arrays.asList(ints)&#x0A;    List l= new ArrayList(10);&#x0A;    for (int i=0; i&amp;lt; 100; i++) {&#x0A;      l.add(ints[i]);&#x0A;    }&#x0A;    for (int i=0; i&amp;lt; 100; i++) {&#x0A;      l.add(a[i].toString()); // won&amp;#39;t trigger the rule&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UAEIOAT">
    <name>Use Assert Equals Instead Of Assert True</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {&#x0A;  void testCode() {&#x0A;    Object a, b;&#x0A;    assertTrue(a.equals(b));                  // bad usage&#x0A;    assertEquals(?a should equals b?, a, b);  // good usage&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UANIOAT">
    <name>Use Assert Null Instead Of Assert True</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {&#x0A;  void testCode() {&#x0A;    Object a = doSomething();&#x0A;    assertTrue(a==null);        // bad usage&#x0A;    assertNull(a);              // good usage&#x0A;    assertTrue(a != null);      // bad usage&#x0A;    assertNotNull(a);           // good usage&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UASIOAT">
    <name>Use Assert Same Instead Of Assert True</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {&#x0A;  void testCode() {&#x0A;    Object a, b;&#x0A;    assertTrue(a == b); // bad usage&#x0A;    assertSame(a, b);   // good usage&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UATIOAE">
    <name>Use Assert True Instead Of Assert Equals</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;When asserting a value is the same as a boolean literal, use assertTrue/assertFalse, instead of assertEquals.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyTestCase extends TestCase {&#x0A;  public void testMyCase() {&#x0A;    boolean myVar = true;&#x0A;    // Ok&#x0A;    assertTrue(&amp;quot;myVar is true&amp;quot;, myVar);&#x0A;    // Bad&#x0A;    assertEquals(&amp;quot;myVar is true&amp;quot;, true, myVar);&#x0A;    // Bad&#x0A;    assertEquals(&amp;quot;myVar is false&amp;quot;, false, myVar);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UBA">
    <name>Unnecessary Boolean Assertion</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false). If you just want a test to halt after finding an error, use the fail() method and provide an indication message of why it did.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {&#x0A;  public void testX() {&#x0A;    assertTrue(true);  // serves no real purpose&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UC">
    <name>Unnecessary Constructor</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects when a constructor is not necessary; i.e., when there is only one constructor, its public, has an empty body, and takes no arguments.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public Foo() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UCC">
    <name>Unnecessary Case Change</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;boolean answer1 = buz.toUpperCase().equals(&amp;quot;baz&amp;quot;);            // should be buz.equalsIgnoreCase(&amp;quot;baz&amp;quot;)&#x0A;boolean answer2 = buz.toUpperCase().equalsIgnoreCase(&amp;quot;baz&amp;quot;);  // another unnecessary toUpperCase()&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UCEL">
    <name>Use Correct Exception Logging</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Main {&#x0A;  private static final Log _LOG = LogFactory.getLog( Main.class );&#x0A;  void bar() {&#x0A;    try {&#x0A;    } catch( Exception e ) {&#x0A;      _LOG.error( e ); //Wrong!&#x0A;    } catch( OtherException oe ) {&#x0A;      _LOG.error( oe.getMessage(), oe ); //Correct&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UCIE">
    <name>Use Collection Is Empty</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements. Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void good() {&#x0A;    List foo = getList();&#x0A;    if (foo.isEmpty()) {&#x0A;      // blah&#x0A;    }&#x0A;  }&#x0A;&#x0A;  void bad() {&#x0A;    List foo = getList();&#x0A;    if (foo.size() == 0) {&#x0A;      // blah&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UCT">
    <name>Unnecessary Conversion Temporary</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public String convert(int x) {&#x0A;  String foo = new Integer(x).toString(); // this wastes an object&#x0A;  return Integer.toString(x);             // preferred approach&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UEC">
    <name>Uncommented Empty Constructor</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public Foo() {&#x0A;  // This constructor is intentionally empty. Nothing special is needed here.&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UFQN">
    <name>Unnecessary Fully Qualified Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. Consider using the non-fully qualified name.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.util.List;&#x0A;&#x0A;public class Foo {&#x0A;  private java.util.List list1; // Unnecessary FQN&#x0A;  private List list2;           // More appropriate given import of &amp;#39;java.util.List&amp;#39;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UIS">
    <name>Unconditional If Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Do not use &amp;quot;if&amp;quot; statements whose conditionals are always true or always false.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void close() {&#x0A;    if (true) { // fixed conditional, not recommended&#x0A;      // ...&#x0A;    }&#x0A;  }&#x0A;}&#x0A;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UNAION">
    <name>Use Notify All Instead Of Notify</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;  void bar() {&#x0A;    x.notify();&#x0A;    // If many threads are monitoring x, only one (and you won&amp;#39;t know which) will be notified.&#x0A;    // use instead:&#x0A;    x.notifyAll();&#x0A;  }&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UNCIE">
    <name>Unused Null Check In Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This implementation of equals(Object) violates the contract defined&#x0A;      by java.lang.Object.equals() because it does not check for null&#x0A;      being passed as the argument.  All equals() methods should return&#x0A;      false if passed a null value.&#x0A;      &lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object&apos;s equals() method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {&#x0A;  public String method1() {&#x0A;    return &amp;quot;ok&amp;quot;;&#x0A;  }&#x0A;  &#x0A;  public String method2() {&#x0A;    return null;&#x0A;  }&#x0A;  &#x0A;  public void method(String a) {&#x0A;    String b;&#x0A;  &#x0A;    // I don&amp;#39;t know it method1() can be &amp;quot;null&amp;quot;&#x0A;    // but I know &amp;quot;a&amp;quot; is not null..&#x0A;    // I&amp;#39;d better write a.equals(method1())&#x0A;    if (a!=null &amp;amp;&amp;amp; method1().equals(a)) { // will trigger the rule&#x0A;      //whatever&#x0A;    }&#x0A;&#x0A;    if (method1().equals(a) &amp;amp;&amp;amp; a != null) { // won&amp;#39;t trigger the rule&#x0A;      //whatever&#x0A;    }&#x0A;&#x0A;    if (a!=null &amp;amp;&amp;amp; method1().equals(b)) { // won&amp;#39;t trigger the rule&#x0A;      //whatever&#x0A;    }&#x0A;&#x0A;    if (a!=null &amp;amp;&amp;amp; &amp;quot;LITERAL&amp;quot;.equals(a)) { // won&amp;#39;t trigger the rule&#x0A;      //whatever&#x0A;    }&#x0A;&#x0A;    if (a!=null &amp;amp;&amp;amp; !a.equals(&amp;quot;go&amp;quot;)) { // won&amp;#39;t trigger the rule&#x0A;      a=method2();&#x0A;      if (method1().equals(a)) {&#x0A;        //whatever&#x0A;      }&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UOOI">
    <name>Useless Operation On Immutable</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;An operation on an Immutable object (String, BigDecimal or BigInteger) won&apos;t change the object itself since the result of the operation is a new object. Therefore, ignoring the operation result is an error.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.math.*;&#x0A;&#x0A;class Test {&#x0A;  void method1() {&#x0A;    BigDecimal bd=new BigDecimal(10);&#x0A;    bd.add(new BigDecimal(5)); // this will trigger the rule&#x0A;  }&#x0A;&#x0A;  void method2() {&#x0A;    BigDecimal bd=new BigDecimal(10);&#x0A;    bd = bd.add(new BigDecimal(5)); // this won&amp;#39;t trigger the rule&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "USDF">
    <name>Unsynchronized Static Date Formatter</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;SimpleDateFormat instances are not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private static final SimpleDateFormat sdf = new SimpleDateFormat();&#x0A;&#x0A;  void bar() {&#x0A;    sdf.format(); // poor, no thread-safety&#x0A;  }&#x0A;&#x0A;  synchronized void foo() {&#x0A;    sdf.format(); // preferred&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UV">
    <name>Use Varargs</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void foo(String s, Object[] args) {&#x0A;    // Do something here...&#x0A;  }&#x0A;&#x0A;  public void bar(String s, Object... args) {&#x0A;    // Ahh, varargs tastes much better...&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UWOC">
    <name>Unnecessary Wrapper Object Creation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      Using &lt;code&gt;new Integer(int)&lt;/code&gt; is guaranteed to always result in a new object whereas&#x0A;      &lt;code&gt;Integer.valueOf(int)&lt;/code&gt; allows caching of values to be done by the compiler, class library, or JVM.&#x0A;      Using of cached values avoids object allocation and the code will be faster.&#x0A;      &lt;/p&gt;&#x0A;      &lt;p&gt;&#x0A;      Values between -128 and 127 are guaranteed to have corresponding cached instances&#x0A;      and using &lt;code&gt;valueOf&lt;/code&gt; is approximately 3.5 times faster than using constructor.&#x0A;      For values outside the constant range the performance of both styles is the same.&#x0A;      &lt;/p&gt;&#x0A;      &lt;p&gt;&#x0A;      Unless the class must be compatible with JVMs predating Java 1.5,&#x0A;      use either autoboxing or the &lt;code&gt;valueOf()&lt;/code&gt; method when creating instances of&#x0A;      &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, and &lt;code&gt;Byte&lt;/code&gt;.&#x0A;      &lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Most wrapper classes provide static conversion methods that avoid the need to create intermediate objects just to create the primitive forms. Using these avoids the cost of creating objects that also need to be garbage-collected later.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public int convert(String s) {&#x0A;  int i, i2;&#x0A;&#x0A;  i = Integer.valueOf(s).intValue();            // this wastes an object&#x0A;  i = Integer.parseInt(s);                      // this is better&#x0A;&#x0A;  i2 = Integer.valueOf(i).intValue();           // this wastes an object&#x0A;  i2 = i;                                       // this is better&#x0A;&#x0A;  String s3 = Integer.valueOf(i2).toString();   // this wastes an object&#x0A;  s3 = Integer.toString(i2);                    // this is better&#x0A;&#x0A;  return i2;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "VNC">
    <name>Variable Naming Conventions</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A variable naming conventions rule - customize this to your liking. Currently, it checks for final variables that should be fully capitalized and non-final variables that should not include underscores.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public static final int MY_NUM = 0;&#x0A;  public String myTest = &amp;quot;&amp;quot;;&#x0A;  DataModule dmTest = new DataModule();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "CI">
    <name>Command Injection</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;In case of command injection the attacker forces the application to execute manipulated OS commands.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Escape not acceptable characters like &apos;;&apos; or &apos;&amp;amp;&apos;. (The given characters are just examples and not a complete list. The list of the characters, which you should take care of, is platform dependent.).&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String dir =request.getParameter(&amp;quot;dir_name&amp;quot;);&amp;#x0A;String osCommand =&amp;quot;c:\\WINDOWS\\SYSTEM32\\cmd.exe /c dir &amp;quot;;&amp;#x0A;Process process =Runtime.getRuntime().exec(osCommand + dir);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;bin &amp;amp; rmdir /S /Q data&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; The bin directory is listed and the data directory with all its subdirectories is deleted.&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "HTTPRS">
    <name>HTTP Response Splitting</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;In case of HTTP response splitting attack the attacker forces the server to print a carriage return (CR) and line feed (LF) character into a field of the header in order to add new fields or split the response into two by adding an entirely new body with inserting two line breaks.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Check the user input for CR and LF characters.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String author =request.getParameter(AUTHOR_PARAM);&amp;#x0A;Cookie cookie = newCookie(&amp;quot;author&amp;quot;, author);&amp;#x0A;response.addCookie(cookie);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;John\r\nContent-Length: 0\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type:text/html\r\n\r\n&amp;lt;html&amp;gt;&amp;lt;a title=&amp;quot;Click here!!!&amp;quot;href=&amp;quot;http://www.maliciouspage.org/&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; The attacker creates two responses from one and shows his own malicious page instead of the original.&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "LDAPI">
    <name>LDAP Injection</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;LDAP Injection is an attack used to exploit web-based applications that construct LDAP statements based on user input. Improper sanitization of the user input could result in the execution of arbitrary commands such as granting permissions to unauthorized queries.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; (, ), *, logical (AND &amp;quot;&amp;amp;&amp;quot;, OR &amp;quot;|&amp;quot; and NOT &amp;quot;!&amp;quot;) and relational (=,&amp;gt;=,&amp;lt;=,~=) operators should be filtered out before usage.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String userName =request.getParameter(&amp;quot;user&amp;quot;);&amp;#x0A;String pwd =request.getParameter(&amp;quot;pwd&amp;quot;);&amp;#x0A;String filter = &amp;quot;(&amp;amp;(USER=&amp;quot; +userName + &amp;quot;)(PASSWORD=&amp;quot; + pwd + &amp;quot;))&amp;quot;;&amp;#x0A;LdapContext ctx = new InitialLdapContext();&amp;#x0A;NamingEnumeration&amp;lt;?&amp;gt; results =ctx.search(base, filter, sc);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input: &lt;/b&gt;&lt;/p&gt;&lt;p&gt;userName = &amp;quot;John) (cn=*))(|(cn=*&amp;quot;&lt;/p&gt;&lt;p&gt;pwd = anything&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; Only the first filter is processed by the LDAP server, so the attacker gains access to the system without having avalid password.&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "PT">
    <name>Path Traversal</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;Some programs create a path name from an external input, which gives the opportunity to the attacker to traverse the file system outside the application&apos;s folder.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Do not allow &amp;quot;..&amp;quot; or full path to be used in the inputs.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String dir =request.getParameter(&amp;quot;dir_name&amp;quot;);&amp;#x0A;File file = newFile(&amp;quot;C:\\webapp\\&amp;quot; + dir);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;..\Windows\System32\&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; Create a file object that points outside the directory of the web application.&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "SQLI">
    <name>SQL Injection</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;The purpose of SQL injection attack is to insert malicious inputs into SQL queries. With this type of attack, the attacker can get sensitive information from the database and also modify data with inserted Insert/Update/Delete queries.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Use parameterized queries or at least check the inputs for suspicious keywords or characters.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String userName =request.getParameter(&amp;quot;name&amp;quot;);&amp;#x0A;Statement sqlStatement =dbConnection.createStatement();&amp;#x0A;sqlStatement.executeUpdate(&amp;quot;UPDATEusers SET status=&apos;updated&apos; &amp;quot; +&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;WHERE name=&apos;&amp;quot; + userName + &amp;quot;&apos;&amp;quot;);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;John&amp;#8217;; DROP TABLE users;--&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; John&apos;s status is updated, and then the users table is dropped.&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "XSS">
    <name>Cross-Site Scripting</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;In a typical cross-site scripting attack the hacker infects a legitimate web page with his malicious client-side script.When a user visits this web page the script is downloaded to his browser and executed.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Encode special characters (for example &amp;lt; to &amp;amp;lt) on server side.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String userName =request.getParameter(&amp;quot;name&amp;quot;);&amp;#x0A;response.getWriter().println(&amp;quot;Welcome&amp;quot; + userName);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;John&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; The page will display all the cookies in an alert window.&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "ACNPE">
    <name>Avoid Catching NPE</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Catching NPE&lt;/b&gt;: Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; void bar() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // do something&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } catch (NullPointerException npe) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar() {&#x0A;    try {&#x0A;      // do something&#x0A;    } catch (NullPointerException npe) {&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ACT">
    <name>Avoid Catching Throwable</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Catching Throwable&lt;/b&gt;: Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void bar() {&amp;#x0A;  &amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // do something&amp;#x0A;  &amp;nbsp; } catch (Throwable th) { // should not catch Throwable&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; th.printStackTrace();&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  try {&#x0A;    // do something&#x0A;  } catch (Throwable th) { // should not catch Throwable&#x0A;    th.printStackTrace();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ADNIS">
    <name>Avoid Deeply Nested If Stmts</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Deeply Nested If Stmts&lt;/b&gt;: Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public void bar(int x, int y, int z) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; if (x&amp;gt;y) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (y&amp;gt;z) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (z==x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;// !! too deep&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;&#x0A;public class Foo {&#x0A;  public void bar(int x, int y, int z) {&#x0A;    if (x&gt;y) {&#x0A;      if (y&gt;z) {&#x0A;        if (z==x) {&#x0A;         // !! too deep&#x0A;        }&#x0A;      }&#x0A;    }&#x0A;  }&#x0A;}&#x0A;&#x0A;    &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "AES">
    <name>Add Empty String</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Add Empty String&lt;/b&gt;: The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific toString() methods instead.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  String s = &amp;quot;&amp;quot; + 123; // inefficient &amp;#x0A;  String t = Integer.toString(456); // preferred approach&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific toString() methods instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String s = &amp;quot;&amp;quot; + 123;                // inefficient &#x0A;String t = Integer.toString(456);   // preferred approach&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "AICICC">
    <name>Avoid Instanceof Checks In Catch Clause</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Instanceof Checks In Catch Clause&lt;/b&gt;: Each caught exception type should be handled in its own catch clause.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  try { // Avoid this&amp;#x0A;  &amp;nbsp;&amp;nbsp;// do something&amp;#x0A;  } catch (Exception ee) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;if (ee instanceof IOException) {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;cleanup();&amp;#x0A;  &amp;nbsp;&amp;nbsp;}&amp;#x0A;  }&amp;#x0A;  try {&amp;nbsp; // Prefer this:&amp;#x0A;  &amp;nbsp;&amp;nbsp;// do something&amp;#x0A;  } catch (IOException ee) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;cleanup();&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Each caught exception type should be handled in its own catch clause.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;try { // Avoid this&#x0A;  // do something&#x0A;} catch (Exception ee) {&#x0A;  if (ee instanceof IOException) {&#x0A;    cleanup();&#x0A;  }&#x0A;}&#x0A;&#x0A;try { // Prefer this:&#x0A;  // do something&#x0A;} catch (IOException ee) {&#x0A;  cleanup();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "AIO">
    <name>Assignment In Operand</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Assignments In Operands&lt;/b&gt;: Avoid Assignments in operands: this can make code more complicated and harder to read&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public void bar(int x, int y, int z) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; if ((x = y) &amp;gt; 6) { // assignment operator in condition&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;z = 9;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid assignments in operands; this can make code more complicated and harder to read.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  int x = 2;&#x0A;  if ((x = getX()) == 3) {&#x0A;    System.out.println(&amp;quot;3!&amp;quot;);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "AISD">
    <name>Array Is Stored Directly</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Array Is Stored Directly&lt;/b&gt;: Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; private String [] x;&amp;#x0A;  &amp;nbsp; public void foo (String [] param) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // Don&apos;t do this, make a copy of the array at least&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; this.x=param;&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private String [] x;&#x0A;  public void foo (String [] param) {&#x0A;    // Don&amp;#39;t do this, make a copy of the array at least&#x0A;    this.x=param;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "APST">
    <name>Avoid Print Stack Trace</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Print Stack Trace&lt;/b&gt;: Avoid printStackTrace(); use a logger call instead.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  class Foo {&amp;#x0A;  &amp;nbsp; void bar() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; try {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// do something&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } catch (Exception e) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;e.printStackTrace();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid printStackTrace(); use a logger call instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  void bar() {&#x0A;    try {&#x0A;      // do something&#x0A;    } catch (Exception e) {&#x0A;      e.printStackTrace();&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ARE">
    <name>Avoid Rethrowing Exception</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Rethrowing Exception&lt;/b&gt;: Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity. In cases when the rethrowed exception can be caught by following catches are allowed.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void bar() {&amp;#x0A;  &amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // do something&amp;#x0A;  &amp;nbsp; } catch (SomeException se) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; throw se;&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  public void foo(int a) throws IOException {&amp;#x0A;  &amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; if(a == 20) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new IOException();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; } catch (IOException e) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; throw e; // this is pointless&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &amp;nbsp;&amp;#x0A;  public void goo(int a) throws IOException {&amp;#x0A;  &amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; if(a == 20) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new IOException();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Eception();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; } catch(IOException e) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; throw e; // it&amp;#8217;s OK, we don&amp;#8217;t want to catch the IOException here.&amp;#x0A;  &amp;nbsp; } catch(Exception e){&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // do something&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  try {&#x0A;    // do something&#x0A;  } catch (SomeException se) {&#x0A;    throw se;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ATNPE">
    <name>Avoid Throwing Null Pointer Exception</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Throwing Null Pointer Exception&lt;/b&gt;: Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception. The rule also warns on null pointer exception instantiations.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; void bar() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; throw new NullPointerException();&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar() {&#x0A;    throw new NullPointerException();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ATRET">
    <name>Avoid Throwing Raw Exception Types</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Avoid Throwing Raw Exception Types&lt;/b&gt;: Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead. The rule also warns on raw exception instantiations.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public void bar() throws Exception {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception();&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void bar() throws Exception {&#x0A;    throw new Exception();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "BGMN">
    <name>Boolean Get Method Name</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Boolean Get Method Name&lt;/b&gt;: Methods that return boolean results should be named as predicate statements to denote this. I.e, &apos;isReady()&apos;, &apos;hasValues()&apos;, &apos;canCommit()&apos;, &apos;willFail()&apos;, etc. Avoid the use of the &apos;get&apos; prefix for these methods.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public boolean getFoo(); // bad&amp;#x0A;  public boolean isFoo(); // ok&amp;#x0A;  public boolean getFoo(boolean bar); // ok&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Methods that return boolean results should be named as predicate statements to denote this. I.e, &apos;isReady()&apos;, &apos;hasValues()&apos;, &apos;canCommit()&apos;, &apos;willFail()&apos;, etc. Avoid the use of the &apos;get&apos; prefix for these methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean getFoo();              // bad&#x0A;public boolean isFoo();               // ok&#x0A;public boolean getFoo(boolean bar);   // ok, unless checkParameterizedMethods=true&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "BI">
    <name>Boolean Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Boolean Instantiation&lt;/b&gt;: Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.&lt;/p&gt;  &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  Boolean bar = new Boolean(&amp;quot;true&amp;quot;); // unnecessary creation, just reference Boolean.TRUE;&amp;#x0A;  Boolean buz = Boolean.valueOf(false); // ..., just reference Boolean.FALSE;&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Boolean bar = new Boolean(&amp;quot;true&amp;quot;);    // unnecessary creation, just reference Boolean.TRUE;&#x0A;Boolean buz = Boolean.valueOf(false); // ...., just reference Boolean.FALSE;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "BII">
    <name>Big Integer Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Big Integer Instantiation&lt;/b&gt;: Don&apos;t create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  BigInteger bi = new BigInteger(1); // reference BigInteger.ONE instead&amp;#x0A;  BigInteger bi2 = new BigInteger(&amp;quot;0&amp;quot;); // reference BigInteger.ZERO instead&amp;#x0A;  BigInteger bi3 = new BigInteger(0.0); // reference BigInteger.ZERO instead&amp;#x0A;  BigInteger bi4;&amp;#x0A;  bi4 = new BigInteger(0); // reference BigInteger.ZERO instead&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Don&apos;t create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;BigInteger bi = new BigInteger(1);    // reference BigInteger.ONE instead&#x0A;BigInteger bi2 = new BigInteger(&amp;quot;0&amp;quot;); // reference BigInteger.ZERO instead&#x0A;BigInteger bi3 = new BigInteger(0.0); // reference BigInteger.ZERO instead&#x0A;BigInteger bi4;&#x0A;bi4 = new BigInteger(0);              // reference BigInteger.ZERO instead&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ByI">
    <name>Byte Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Byte Instantiation&lt;/b&gt;: Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; private Byte i = new Byte(0); // change to Byte i =&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Byte.valueOf(0);&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;&#x0A;public class Foo {&#x0A;&#x09;private Byte i = new Byte(0); // change to Byte i =&#x09;Byte.valueOf(0);&#x0A;}&#x0A;&#x0A;     &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ClR">
    <name>Close Resource</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Close Resource&lt;/b&gt;: Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed in a finally block after use.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Bar {&amp;#x0A;  &amp;nbsp; public void foo() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; Connection c = pool.getConnection();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // do stuff&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } catch (SQLException ex) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;// handle exception&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } finally {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // oops, should close the connection using &apos;close&apos;!&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // c.close();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;  public void foo() {&#x0A;    Connection c = pool.getConnection();&#x0A;    try {&#x0A;      // do stuff&#x0A;    } catch (SQLException ex) {&#x0A;      // handle exception&#x0A;    } finally {&#x0A;      // oops, should close the connection using &amp;#39;close&amp;#39;!&#x0A;      // c.close();&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DLNLISS">
    <name>Default Label Not Last In Switch Stmt</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Default Label Not Last In Switch Stmt&lt;/b&gt;: By convention, the default label should be the last label in a switch statement.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; void bar(int a) {&amp;#x0A;  &amp;nbsp;&amp;nbsp; &amp;nbsp;switch (a) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;case 1:&amp;nbsp; // do something&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;break;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;default: // the default case should be last, by convention&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;break;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;case 2:&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;break;&amp;#x0A;  &amp;nbsp;&amp;nbsp; &amp;nbsp;}&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a switch statement where default case is missing.&#x0A;  Usually you need to provide a default case.&lt;/p&gt;&#x0A;  &lt;p&gt;Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered if&#x0A;the default case is at the end of the switch statement and doesn&apos;t end with a break statement.&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;By convention, the default label should be the last label in a switch statement.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar(int a) {&#x0A;    switch (a) {&#x0A;      case 1:  // do something&#x0A;        break;&#x0A;      default:  // the default case should be last, by convention&#x0A;        break;&#x0A;      case 2:&#x0A;        break;&#x0A;    }&#x0A;  }&#x0A;}   &lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ECB">
    <name>Empty Catch Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty Catch Block&lt;/b&gt;: Empty Catch Block finds instances where an exception is caught, but nothing is done, except if there is a comment in the code. In most circumstances, this swallows an exception which should either be acted on or reported.&lt;/p&gt;  &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void doSomething() {&amp;#x0A;  &amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; FileInputStream fis = new FileInputStream(&amp;quot;/tmp/bugger&amp;quot;);&amp;#x0A;  &amp;nbsp; } catch (IOException ioe) {&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doSomething() {&#x0A;  try {&#x0A;    FileInputStream fis = new FileInputStream(&amp;quot;/tmp/bugger&amp;quot;);&#x0A;  } catch (IOException ioe) {&#x0A;    // not good&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EFB">
    <name>Empty Finally Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty Finally Block&lt;/b&gt;: Empty finally blocks serve no purpose and should be removed.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp;&amp;nbsp;public void bar() {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;int x=2;&amp;#x0A;  &amp;nbsp;&amp;nbsp; &amp;nbsp;} finally {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;// empty!&amp;#x0A;  &amp;nbsp;&amp;nbsp; &amp;nbsp;}&amp;#x0A;  &amp;nbsp;&amp;nbsp;}&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty finally blocks serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void bar() {&#x0A;    try {&#x0A;      int x=2;&#x0A;    } finally {&#x0A;      // empty!&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "EIS">
    <name>Empty If Stmt</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty If Stmt&lt;/b&gt;: Empty If Statement finds instances where a condition is checked but nothing is done about it.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp;&amp;nbsp;void bar(int x) {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;if (x == 0) {&amp;#x0A;  &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;// empty!&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;}&amp;#x0A;  &amp;nbsp;&amp;nbsp;}&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty If Statement finds instances where a condition is checked but nothing is done about it.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A; void bar(int x) {&#x0A;    if (x == 0) {&#x0A;      // empty!&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EMRC">
    <name>Equal Method Returns Constant</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Equal Method Returns Constant&lt;/b&gt;: Do not use equals() methods with a constant return value. These are potentially unfinished methods.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; @Override&amp;#x0A;  &amp;nbsp; public boolean equals(Object arg) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return true; // returns with constant&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "EOB">
    <name>Empty Override Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty Override Block&lt;/b&gt;: Do not override an empty method with another empty method. It is useless.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public void bar() {&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &amp;nbsp;&amp;#x0A;  public class Child extends Foo{&amp;#x0A;  &amp;nbsp; @Override&amp;#x0A;  &amp;nbsp; public void bar() { // empty override block&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ESB">
    <name>Empty Synchronized Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty Synchronized Block&lt;/b&gt;: Empty synchronized blocks serve no purpose and should be removed.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp;&amp;nbsp;public void bar() {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;synchronized (this) {&amp;#x0A;  &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;// empty!&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;}&amp;#x0A;  &amp;nbsp;&amp;nbsp;}&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The code contains an empty synchronized block:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;synchronized() {}&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;Empty synchronized blocks are far more subtle and hard to use correctly&#x0A;than most people recognize, and empty synchronized blocks&#x0A;are almost never a better solution&#x0A;than less contrived solutions.&#x0A;&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty synchronized blocks serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void bar() {&#x0A;    synchronized (this) {&#x0A;      // empty!&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ESS">
    <name>Empty Switch Statements</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty Switch Statements&lt;/b&gt;: Empty switch statements serve no purpose and should be removed.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void bar() {&amp;#x0A;  &amp;nbsp; int x = 2;&amp;#x0A;  &amp;nbsp; switch (x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // once there was code here&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // but it&apos;s been commented out or something&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty switch statements serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  int x = 2;&#x0A;  switch (x) {&#x0A;    // once there was code here&#x0A;    // but it&amp;#39;s been commented out or something&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ETB">
    <name>Empty Try Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty Try Block&lt;/b&gt;: Avoid empty try blocks - what&apos;s the point?&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp;&amp;nbsp;public void bar() {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;try {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;} catch (Exception e) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;e.printStackTrace();&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;}&amp;#x0A;  &amp;nbsp;&amp;nbsp;}&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid empty try blocks - what&apos;s the point?&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void bar() {&#x0A;    try {&#x0A;    } catch (Exception e) {&#x0A;      e.printStackTrace();&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EWS">
    <name>Empty While Stmt</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Empty While Stmt&lt;/b&gt;: Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the condition expression (increase, decrease, assign or call a method), no warning is issued.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  void bar(int a, int b) {&amp;#x0A;  &amp;nbsp; while (a == b) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // empty!&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the exit expression, rewrite it to make it clearer.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar(int a, int b) {&#x0A;  while (a == b) {&#x0A;    // empty!&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "FLMUB">
    <name>For Loops Must Use Braces</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;For Loops Must Use Braces&lt;/b&gt;: Avoid using &apos;for&apos; statements without using curly braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  for (int i = 0; i &amp;lt; 42; i++)&amp;#x0A;  &amp;nbsp; foo();&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using &apos;for&apos; statements without using curly braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;for (int i = 0; i &amp;lt; 42; i++)&#x0A;  foo();&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "HF">
    <name>Hide Field</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Hide Field&lt;/b&gt;: Reach fields via getter/setter functions, not by direct reference.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public int i;&amp;#x0A;  }&amp;#x0A;  class Bar {&amp;#x0A;  &amp;nbsp; public void example() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; Foo f = new Foo();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; int z = f.i; // should be accessed via a getter&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "IESMUB">
    <name>If Else Stmts Must Use Braces</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;If Else Stmts Must Use Braces&lt;/b&gt;: Avoid using if or if..else statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  if (foo)&amp;#x0A;  &amp;nbsp; x = x+1;&amp;#x0A;  else&amp;#x0A;  &amp;nbsp; x = x-1;&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using if..else statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// this is OK&#x0A;if (foo) x++;&#x0A;   &#x0A;// but this is not&#x0A;if (foo)&#x0A;  x = x+1;&#x0A;else&#x0A;  x = x-1;&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "II">
    <name>Integer Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Integer Instantiation&lt;/b&gt;: Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; private Integer i = new Integer(0);&amp;#x0A;  &amp;nbsp; // change to Integer i = Integer.valueOf(0);&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;  &#x0A;public class Foo {&#x0A;&#x09;private Integer i = new Integer(0); // change to Integer i = Integer.valueOf(0);&#x0A;}&#x0A;   &#x0A;      &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "LoC">
    <name>Loose Coupling</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Loose Coupling&lt;/b&gt;: Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  import java.util.ArrayList;&amp;#x0A;  import java.util.HashSet;&amp;#x0A;  &amp;nbsp;&amp;#x0A;  public class Bar {&amp;#x0A;  &amp;nbsp; // Use List instead&amp;#x0A;  &amp;nbsp; private ArrayList list = new ArrayList();&amp;#x0A;  &amp;nbsp; // Use Set instead&amp;#x0A;  &amp;nbsp; public HashSet getFoo() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return new HashSet();&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.util.ArrayList;&#x0A;import java.util.HashSet;&#x0A;&#x0A;public class Bar {&#x0A;  // Use List instead&#x0A;  private ArrayList list = new ArrayList();&#x0A;  // Use Set instead&#x0A;  public HashSet getFoo() {&#x0A;    return new HashSet();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "LoI">
    <name>Long Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Long Instantiation&lt;/b&gt;: Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; private Long i = new Long(0); // change to Long i = Long.valueOf(0);&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;&#x0A;public class Foo {&#x0A;&#x09;private Long i = new Long(0); // change to Long i = Long.valueOf(0);&#x0A;}&#x0A;&#x0A;    &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "MBIS">
    <name>Missing Break In Switch</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Missing Break In Switch&lt;/b&gt;: Switch statements without break, continue, throw or return statements for each case branch may indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through. When the case branch ends with a comment with &apos;fall-through&apos; content are ignored as well. Missing break in the last case branch does not cause any problem so it is also ignored.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void bar(int status) {&amp;#x0A;  &amp;nbsp; switch(status) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; case CANCELLED:&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; doCancelled();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // break; hm, should this be commented out?&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; case NEW:&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; doNew();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // is this really a fall-through?&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; case REMOVED:&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; doRemoved();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // what happens if you add another case after this one?&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; case OTHER: // empty case - this is interpreted as an intentional&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // fall-through&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; case ERROR:&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; doErrorHandling();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a switch statement where one case branch will fall through to the next case.&#x0A;  Usually you need to end this case with a break or return.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Switch statements without break or return statements for each case option may indicate problematic behavior. Empty cases are ignored as these indicate an intentional fall-through.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar(int status) {&#x0A;  switch(status) {&#x0A;    case CANCELLED:&#x0A;      doCancelled();&#x0A;      // break; hm, should this be commented out?&#x0A;    case NEW:&#x0A;      doNew();&#x0A;      // is this really a fall-through?&#x0A;    case REMOVED:&#x0A;      doRemoved();&#x0A;      // what happens if you add another case after this one?&#x0A;    case OTHER: // empty case - this is interpreted as an intentional fall-through&#x0A;    case ERROR:&#x0A;      doErrorHandling();&#x0A;      break;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MNCTS">
    <name>Missing Null Check In ToString</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Missing Null Check In ToString&lt;/b&gt;: Avoid using an object&apos;s members in toString methods without checking whether the object is null. A null check may be required to avoid NullPointerException.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; private Object o;&amp;#x0A;  &amp;nbsp; @Override&amp;#x0A;  &amp;nbsp; public String toString() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return o.toString(); // missing null check&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "MWSNAEC">
    <name>Method With Same Name As Enclosing Class</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Method With Same Name As Enclosing Class&lt;/b&gt;: Non-constructor methods should not have the same name as the enclosing class.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class MyClass {&amp;#x0A;  &amp;nbsp;&amp;#x0A;  &amp;nbsp; public MyClass() {} // this is OK because it is a constructor&amp;#x0A;  &amp;nbsp;&amp;#x0A;  &amp;nbsp; public void MyClass() {} // this is bad because it is a method&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.&#x0A;      If it was intended to be a constructor, remove the declaration of a void return value.&#x0A;    If you had accidently defined this method, realized the mistake, defined a proper constructor&#x0A;    but can&apos;t get rid of this method due to backwards compatibility, deprecate the method.&#x0A;&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Non-constructor methods should not have the same name as the enclosing class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {&#x0A;  public MyClass() {}         // this is OK because it is a constructor&#x0A;  public void MyClass() {}    // this is bad because it is a method&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "MeNC">
    <name>Method Naming Conventions</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Method Naming Conventions&lt;/b&gt;: Method names should always begin with a lower case character, and should not contain underscores.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public void fooStuff() {&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.&#x0A;&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Method names should always begin with a lower case character, and should not contain underscores.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void fooStuff() {&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "NFSVMBSB">
    <name>Non Final Static Variable Must Be In Synchronized Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Non Final Static Variable Must Be In Synchronized Block&lt;/b&gt;: Non-constant static variable must be used in synchronized block or method.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public static int a;&amp;#x0A;  &amp;nbsp; public void bar() { // should be synchronized&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; if (a == 0){&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; a = 10;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "PLFIC">
    <name>Position Literals First In Comparisons</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Position Literals First In Comparisons&lt;/b&gt;: Position literals (or static final variables) first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false. &lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  class Foo {&amp;#x0A;  &amp;nbsp; private static final String OK_BUTTON = &amp;quot;OK&amp;quot;;&amp;#x0A;  &amp;nbsp; boolean bar(String x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return x.equals(&amp;quot;2&amp;quot;); // should be &amp;quot;2&amp;quot;.equals(x)&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  &amp;nbsp;&amp;#x0A;  &amp;nbsp; boolean isOK(String x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return x.equals(OK_BUTTON); // should be OK_BUTTON.equals(x)&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  boolean bar(String x) {&#x0A;    return x.equals(&amp;quot;2&amp;quot;); // should be &amp;quot;2&amp;quot;.equals(x)&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "PLFICIC">
    <name>Position Literals First In Case Insensitive Comparisons</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Position Literals First In Case Insensitive Comparisons&lt;/b&gt;: Position literals (or static final variables) first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false. &lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  class Foo {&amp;#x0A;  &amp;nbsp; private static final String OK_BUTTON = &amp;quot;OK&amp;quot;;&amp;#x0A;  &amp;nbsp; boolean bar(String x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // should be &amp;quot;Bar&amp;quot;.equalsIgnoreCase(x)&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return x.equalsIgnoreCase(&amp;quot;Bar&amp;quot;);&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  &amp;nbsp;&amp;#x0A;  &amp;nbsp; boolean isOK(String x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // should be OK_BUTTON.equalsIgnoreCase(x)&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return x.equalsIgnoreCase(OK_BUTTON);&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  boolean bar(String x) {&#x0A;    return x.equalsIgnoreCase(&amp;quot;2&amp;quot;); // should be &amp;quot;2&amp;quot;.equalsIgnoreCase(x)&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "PST">
    <name>Preserve Stack Trace</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Preserve Stack Trace&lt;/b&gt;: Throwing a new exception from a catch block without passing the original exception into the new exception will cause the original stack trace to be lost making it difficult to debug effectively.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; void good() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; try{&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Integer.parseInt(&amp;quot;a&amp;quot;);&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } catch (Exception e) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception(e); // first possibility to create &amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // exception chain&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; try {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Integer.parseInt(&amp;quot;a&amp;quot;);&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } catch (Exception e) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw (IllegalStateException)new IllegalStateException()&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .initCause(e);// second possibility to create exception chain.&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  &amp;nbsp; void bad() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; try{&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Integer.parseInt(&amp;quot;a&amp;quot;);&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } catch (Exception e) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception(e.getMessage()); // loosing the stack trace!&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Throwing a new exception from a catch block without passing the original exception into the new exception will cause the original stack trace to be lost making it difficult to debug effectively.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void good() {&#x0A;    try{&#x0A;      Integer.parseInt(&amp;quot;a&amp;quot;);&#x0A;    } catch (Exception e) {&#x0A;      throw new Exception(e); // first possibility to create exception chain&#x0A;    }&#x0A;    &#x0A;    try {&#x0A;      Integer.parseInt(&amp;quot;a&amp;quot;);&#x0A;    } catch (Exception e) {&#x0A;      throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.&#x0A;    }&#x0A;  }&#x0A;&#x0A;  void bad() {&#x0A;    try{&#x0A;      Integer.parseInt(&amp;quot;a&amp;quot;);&#x0A;    } catch (Exception e) {&#x0A;      throw new Exception(e.getMessage());&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RHWM">
    <name>Replace Hashtable With Map</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Replace Hashtable With Map&lt;/b&gt;: Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; void bar() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; Hashtable h = new Hashtable();&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;    &#x0A;public class Foo {&#x0A;&#x09;void bar() {&#x0A;&#x09;&#x09;Hashtable h = new Hashtable();&#x0A;&#x09;}&#x0A;}&#x0A;    &#x0A;      &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "RVWL">
    <name>Replace Vector With List</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Replace Vector With List&lt;/b&gt;: Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp;&amp;nbsp;void bar() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; Vector v = new Vector();&amp;#x0A;  &amp;nbsp;&amp;nbsp;}&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;&#x0A;public class Foo {&#x0A; void bar() {&#x0A;    Vector v = new Vector();&#x0A; }&#x0A;}&#x0A;&#x0A;  &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SC">
    <name>Simplify Conditional</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Simplify Conditional&lt;/b&gt;: No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  class Foo {&amp;#x0A;  &amp;nbsp; void bar(Object x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; if (x != null &amp;amp;&amp;amp; x instanceof Bar) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // just drop the &amp;quot;x != null&amp;quot; check&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  void bar(Object x) {&#x0A;    if (x != null &amp;amp;&amp;amp; x instanceof Bar) {&#x0A;      // just drop the &amp;quot;x != null&amp;quot; check&#x0A;    }&#x0A;  }&#x0A;}      &lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SDFNL">
    <name>Simple Date Format Needs Locale</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Simple Date Format Needs Locale&lt;/b&gt;: Be sure to specify a Locale when creating java.text.SimpleDateFormat instances to ensure that locale-appropriate formatting is used.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; // Should specify Locale.US (or whatever)&amp;#x0A;  &amp;nbsp; private SimpleDateFormat sdf = new SimpleDateFormat(&amp;quot;pattern&amp;quot;);&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate formatting is used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  // Should specify Locale.US (or whatever)&#x0A;  private SimpleDateFormat sdf = new SimpleDateFormat(&amp;quot;pattern&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SHMN">
    <name>Suspicious Hashcode Method Name</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Suspicious Hashcode Method Name&lt;/b&gt;: The method name and return type are suspiciously close to hashCode(), which may denote an intention to override the hashCode() method.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public int hashcode() { // oops, this probably was &amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;// supposed to be &apos;hashCode&apos;&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a method called &lt;code&gt;hashcode()&lt;/code&gt;.&amp;nbsp; This method&#x0A;  does not override the &lt;code&gt;hashCode()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;,&#x0A;  which is probably what was intended.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The method name and return type are suspiciously close to hashCode(), which may denote an intention to override the hashCode() method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public int hashcode() { // oops, this probably was supposed to be &amp;#39;hashCode&amp;#39;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SI">
    <name>Short Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Short Instantiation&lt;/b&gt;: Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; private Short i = new Short(0); // change to Short i = Short.valueOf(0);&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;&#x0A;public class Foo {&#x0A;&#x09;private Short i = new Short(0); // change to Short i = Short.valueOf(0);&#x0A;}&#x0A;&#x0A;          &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SMN">
    <name>Short Method Name</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Short Method Name&lt;/b&gt;: Method names that are very short are not helpful to the reader. Names like &apos;or&apos;, &apos;in&apos;, &apos;lt&apos;, &apos;gt&apos;, &apos;eq&apos;, &apos;le&apos;, &apos;ge&apos;, &apos;ne&apos; are allowed.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class ShortMethod {&amp;#x0A;  &amp;nbsp; public void a( int i ) { // Violation&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Method names that are very short are not helpful to the reader.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class ShortMethod {&#x0A;  public void a( int i ) { // Violation&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SP">
    <name>System Println</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;System Println&lt;/b&gt;: Printing to System.(out|err) is usually intended for debugging purposes and should not remain in the code.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; Logger log = Logger.getLogger(Foo.class.getName());&amp;#x0A;  &amp;nbsp; public void testA() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(&amp;quot;Entering&amp;quot;);&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // Better use this&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; log.info(&amp;quot;Entering&amp;quot;);&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;References to System.(out|err).print are usually intended for debugging purposes and can remain in the codebase even in production code. By using a logger one can enable/disable this behavior at will (and by priority) and avoid clogging the Standard out log.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  Logger log = Logger.getLogger(Foo.class.getName());&#x0A;  public void testA () {&#x0A;    System.out.println(&amp;quot;Entering test&amp;quot;);&#x0A;    // Better use this&#x0A;    log.fine(&amp;quot;Entering test&amp;quot;);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SSSHD">
    <name>Switch Stmts Should Have Default</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Switch Stmts Should Have Default&lt;/b&gt;: All switch statements should include a default option to catch any unspecified values.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void bar() {&amp;#x0A;  &amp;nbsp; int x = 2;&amp;#x0A;  &amp;nbsp; switch (x) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; case 1: int j = 6;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; case 2: int j = 8;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; // missing default: here&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;All switch statements should include a default option to catch any unspecified values.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;  int x = 2;&#x0A;  switch (x) {&#x0A;    case 1: int j = 6;&#x0A;    case 2: int j = 8;&#x0A;    // missing default: here&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "TMR">
    <name>Too Many Returns</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Too Many Returns&lt;/b&gt;: Do not use more than one return statement in a method. Too many return statements can make a method less understandable.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public void bar(int x, int y, int z) { // too many returns&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; if (x &amp;gt; y &amp;amp;&amp;amp; x &amp;gt; z) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return x;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } else if (y &amp;gt; x &amp;amp;&amp;amp; y &amp;gt; z) {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return y;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return z;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UALIOV">
    <name>Use Array List Instead Of Vector</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Use Array List Instead Of Vector&lt;/b&gt;: ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class SimpleTest extends TestCase {&amp;#x0A;  &amp;nbsp; public void testX() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; Collection c1 = new Vector();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; Collection c2 = new ArrayList(); // achieves the same &amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // with much better performance&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {&#x0A;  public void testX() {&#x0A;    Collection c1 = new Vector();&#x0A;    Collection c2 = new ArrayList();  // achieves the same with much better performance&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UEM">
    <name>Uncommented Empty Method</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Uncommented Empty Method&lt;/b&gt;: Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void doSomething() {&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doSomething() {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UETCS">
    <name>Use Equals To Compare Strings</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Use Equals To Compare Strings&lt;/b&gt;: Using &apos;==&apos; or &apos;!=&apos; to compare strings only works if intern version is used on both sides. Use the equals() method instead.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public boolean test(String s) {&amp;#x0A;  &amp;nbsp; if (s == &amp;quot;one&amp;quot;) return true; // unreliable&amp;#x0A;  &amp;nbsp; if (&amp;quot;two&amp;quot;.equals(s)) return true; // better&amp;#x0A;  &amp;nbsp; return false;&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Using &apos;==&apos; or &apos;!=&apos; to compare strings only works if intern version is used on both sides. Use the equals() method instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean test(String s) {&#x0A;  if (s == &amp;quot;one&amp;quot;) return true;        // unreliable&#x0A;  if (&amp;quot;two&amp;quot;.equals(s)) return true;   // better&#x0A;  return false;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ULBR">
    <name>Unnecessary Local Before Return</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Unnecessary Local Before Return&lt;/b&gt;: Consider simply returning the value vs storing it in a local variable.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public int foo() {&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;int x = doSomething();&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return x; // instead, just &apos;return doSomething();&apos;&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid the creation of unnecessary local variables.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public int foo() {&#x0A;    int x = doSomething();&#x0A;    return x;  // instead, just &amp;#39;return doSomething();&amp;#39;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ULV">
    <name>Unused Local Variable</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Unused Local Variable&lt;/b&gt;: Detects when a local variable is just declared, but not used. &lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; public void doSomething() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; int i = 5; // Unused&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Detects when a local variable is declared and/or assigned, but not used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public void doSomething() {&#x0A;    int i = 5; // Unused&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ULWCC">
    <name>Use Locale With Case Conversions</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Use Locale With Case Conversions&lt;/b&gt;: When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoid problems with languages that have unusual conventions, i.e. Turkish.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  class Foo {&amp;#x0A;  &amp;nbsp;&amp;nbsp;// BAD&amp;#x0A;  &amp;nbsp;&amp;nbsp;if (x.toLowerCase().equals(&amp;quot;list&amp;quot;))...&amp;#x0A;  &amp;nbsp;&amp;nbsp;// This will not match &amp;quot;LIST&amp;quot; when in Turkish locale&amp;#x0A;  &amp;nbsp;&amp;nbsp;// The above could be&amp;#x0A;  &amp;nbsp;&amp;nbsp;// if (x.toLowerCase(Locale.US).equals(&amp;quot;list&amp;quot;)) ...&amp;#x0A;  &amp;nbsp;&amp;nbsp;// or simply&amp;#x0A;  &amp;nbsp;&amp;nbsp;// if (x.equalsIgnoreCase(&amp;quot;list&amp;quot;)) ...&amp;#x0A;  &amp;nbsp;&amp;#x0A;  &amp;nbsp;&amp;nbsp;// GOOD&amp;#x0A;  &amp;nbsp;&amp;nbsp;String z = a.toLowerCase(Locale.EN);&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A String is being converted to upper or lowercase, using the platform&apos;s default encoding. This may&#x0A;      result in improper conversions when used with international characters. Use the &lt;/p&gt;&#x0A;      &lt;ul&gt;&#x0A;    &lt;li&gt;String.toUpperCase( Locale l )&lt;/li&gt;&#x0A;    &lt;li&gt;String.toLowerCase( Locale l )&lt;/li&gt;&#x0A;    &lt;/ul&gt;&#x0A;      &lt;p&gt;versions instead.&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoids problems with languages that have unusual conventions, i.e. Turkish.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  // BAD&#x0A;  if (x.toLowerCase().equals(&amp;quot;list&amp;quot;))&#x0A;    // ...&#x0A;&#x0A;  /*&#x0A;  This will not match &amp;quot;LIST&amp;quot; when in Turkish locale&#x0A;  The above could be&#x0A;  if (x.toLowerCase(Locale.US).equals(&amp;quot;list&amp;quot;)) ...&#x0A;  or simply&#x0A;  if (x.equalsIgnoreCase(&amp;quot;list&amp;quot;)) ...&#x0A;  */&#x0A;&#x0A;  // GOOD&#x0A;  String z = a.toLowerCase(Locale.EN);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UOM">
    <name>Useless Overriding Method</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Useless Overriding Method&lt;/b&gt;: The overriding method merely calls the same method defined in a superclass.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public void foo(String bar) {&amp;#x0A;  &amp;nbsp; super.foo(bar);&amp;nbsp; // why bother overriding?&amp;#x0A;  }&amp;#x0A;  &amp;nbsp;&amp;#x0A;  public String foo() {&amp;#x0A;  &amp;nbsp; return super.foo();&amp;nbsp; // why bother overriding?&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The overriding method merely calls the same method defined in a superclass.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo(String bar) {&#x0A;  super.foo(bar); // why bother overriding?&#x0A;}&#x0A;&#x0A;public String foo() {&#x0A;  return super.foo(); // why bother overriding?&#x0A;}&#x0A;&#x0A;@Id&#x0A;public Long getId() {&#x0A;  return super.getId(); // OK if &amp;#39;ignoreAnnotations&amp;#39; is false, which is the default behavior&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UPF">
    <name>Unused Private Field</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Unused Private Field&lt;/b&gt;: Detects when a private field is just declared, but not used.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Something {&amp;#x0A;  &amp;nbsp; private static int FOO = 2; // Unused&amp;#x0A;  &amp;nbsp; private int i = 5; // Unused&amp;#x0A;  &amp;nbsp; private int j = 6;&amp;#x0A;  &amp;nbsp; public int addOne() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; return j++;&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This statement has a return such as &lt;code&gt;return x++;&lt;/code&gt;.&#x0A;A postfix increment/decrement does not impact the value of the expression,&#x0A;so this increment/decrement has no effect.&#x0A;Please verify that this statement does the right thing.&#x0A;&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Detects when a private field is declared and/or assigned a value, but not used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Something {&#x0A;  private static int FOO = 2; // Unused&#x0A;  private int i = 5; // Unused&#x0A;  private int j = 6;&#x0A;  public int addOne() {&#x0A;    return j++;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UPM">
    <name>Unused Private Method</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Unused Private Method&lt;/b&gt;: Unused Private Method detects when a private method is declared but is unused.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Something {&amp;#x0A;  &amp;nbsp; private void foo() {} // unused&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Unused Private Method detects when a private method is declared but is unused.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;&#x0A;public class Something {&#x0A;&#x09;private void foo() {} // unused&#x0A;}&#x0A;&#x0A;    &lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "USBFSA">
    <name>Use String Buffer For String Appends</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Use StringBuffer For String Appends&lt;/b&gt;: The use of the &apos;+=&apos; operator for appending strings causes the JVM to create and use an internal StringBuffer. If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Foo {&amp;#x0A;  &amp;nbsp; void bar() {&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; String a;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; a = &amp;quot;foo&amp;quot;;&amp;#x0A;  &amp;nbsp;&amp;nbsp;&amp;nbsp; a += &amp;quot; bar&amp;quot;;&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;// better would be:&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;// StringBuilder a = new StringBuilder(&amp;quot;foo&amp;quot;);&amp;#x0A;  &amp;nbsp; &amp;nbsp;&amp;nbsp;// a.append(&amp;quot; bar);&amp;#x0A;  &amp;nbsp; }&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method seems to be building a String using concatenation in a loop.&#x0A;In each iteration, the String is converted to a StringBuffer/StringBuilder,&#x0A;   appended to, and converted back to a String.&#x0A;   This can lead to a cost quadratic in the number of iterations,&#x0A;   as the growing string is recopied in each iteration. &lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;Better performance can be obtained by using&#x0A;a StringBuffer (or StringBuilder in Java 1.5) explicitly.&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt; For example:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;  // This is bad&#x0A;  String s = &quot;&quot;;&#x0A;  for (int i = 0; i &amp;lt; field.length; ++i) {&#x0A;    s = s + field[i];&#x0A;  }&#x0A;&#x0A;  // This is better&#x0A;  StringBuffer buf = new StringBuffer();&#x0A;  for (int i = 0; i &amp;lt; field.length; ++i) {&#x0A;    buf.append(field[i]);&#x0A;  }&#x0A;  String s = buf.toString();&#x0A;&lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The use of the &apos;+=&apos; operator for appending strings causes the JVM to create and use an internal StringBuffer. If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar() {&#x0A;    String a;&#x0A;    a = &amp;quot;foo&amp;quot;;&#x0A;    a += &amp;quot; bar&amp;quot;;&#x0A;    // better would be:&#x0A;    // StringBuilder a = new StringBuilder(&amp;quot;foo&amp;quot;);&#x0A;    // a.append(&amp;quot; bar);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UnI">
    <name>Unused Imports</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Unused Imports&lt;/b&gt;: Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  import java.io.*; // not referenced or required&amp;#x0A;  &amp;nbsp;&amp;#x0A;  public class Foo {}&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.io.*; // not referenced or required&#x0A;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "WLMUB">
    <name>While Loops Must Use Braces</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;While Loops Must Use Braces&lt;/b&gt;: Avoid using &apos;while&apos; statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  while (true)&amp;nbsp; // not recommended&amp;#x0A;  &amp;nbsp; x++;&amp;#x0A;  &amp;nbsp;&amp;#x0A;  while (true) {&amp;nbsp; // preferred approach&amp;#x0A;  &amp;nbsp; x++;&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using &apos;while&apos; statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;while (true) // not recommended&#x0A;  x++;&#x0A;&#x0A;while (true) { // preferred approach&#x0A;  x++;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "CSF">
    <name>Call Super First</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Call Super First:&lt;/b&gt; Super call should be the first method invocation in the override ofthe following methods of the Activity, Application, Service and Fragmentclasses:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;onCreate()&lt;/li&gt;&lt;li&gt;onConfigurationChanged()&lt;/li&gt;&lt;li&gt;onPostCreate()&lt;/li&gt;&lt;li&gt;onPostResume()&lt;/li&gt;&lt;li&gt;onRestart()&lt;/li&gt;&lt;li&gt;onRestorInstanceState()&lt;/li&gt;&lt;li&gt;onResume()&lt;/li&gt;&lt;li&gt;onStart()&lt;/li&gt;&lt;/ul&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; public void onCreate(Bundle bundle) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; foo();&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onCreate(bundle);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Super should be called at the start of the method&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;public class DummyActivity extends Activity {&#x0A;&#x09;public void onCreate(Bundle bundle) {&#x0A;     // missing call to super.onCreate(bundle)&#x0A;&#x09;&#x09;foo();&#x0A;&#x09;}&#x0A;}&#x0A;&#x0A;    &lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "CSL">
    <name>Call Super Last</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Call Super Last:&lt;/b&gt; Super call should be the last method invocation in the override ofthe following methods of the Activity, Application, Service and Fragment classes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;finish()&lt;/li&gt;&lt;li&gt;onDestroy()&lt;/li&gt;&lt;li&gt;onPause()&lt;/li&gt;&lt;li&gt;onSaveInstanceState()&lt;/li&gt;&lt;li&gt;onStop()&lt;/li&gt;&lt;li&gt;onTerminate()&lt;/li&gt;&lt;/ul&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; public void onStop() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onStop();&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; foo();&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Super should be called at the end of the method&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;      &#x0A;public class DummyActivity extends Activity {&#x0A;&#x09;public void onPause() {&#x0A;&#x09;&#x09;foo();&#x0A;&#x09;&#x09;// missing call to super.onPause()&#x0A;&#x09;}&#x0A;}&#x0A;&#x0A;    &lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DNHCSDC">
    <name>Do not hard code the SD card.</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Do Not Hard Code SD Card:&lt;/b&gt; Hard-coding external storage directory can easily lead to faults, asit can differ on different devices. Instead of &amp;#8220;/sdcard&amp;#8221; use thegetExternalStorageDirectory() method of the android.os.Environment class.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; public void foo() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; String storage =&amp;#8220;/sdcard/myfolder&amp;#8221;;&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;Use Environment.getExternalStorageDirectory() instead of &quot;/sdcard&quot;&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;      &#x0A;public class MyActivity extends Activity {&#x0A;&#x09;protected void foo() {&#x0A;&#x09;&#x09;String storageLocation = &quot;/sdcard/mypackage&quot;;&#x09;// hard-coded, poor approach&#x0A;&#x0A;&#x09;&#x09;storageLocation = Environment.getExternalStorageDirectory() + &quot;/mypackage&quot;; // preferred approach&#x0A;&#x09;}&#x0A;}&#x0A;&#x0A;    &lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DNODICP">
    <name>Do Not Open Database In ContentProvider</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Do Not Open Database In ContentProvider:&lt;/b&gt; Database upgrade may take a long time, you should not call thegetWritableDatabase() and the getReadableDatabase() methods from the ContentProvider.onCreate().&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyContentProvider extends ContentProvider{&amp;#x0A;&amp;nbsp; public boolean onCreate() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; DatabaseHelper foo = newDatabaseHelper(getContext());&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; SQLiteDatabase db = foo.getReadableDatabase();&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "DNSBF">
    <name>Database Name Should Be Final</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Database Name Should Be Final:&lt;/b&gt; The name of a database should be final, if it is possible.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class DatabaseHelper extends SQLiteOpenHelper{&amp;#x0A;&amp;nbsp; private String DATABASE_NAME =&amp;#8220;mydatabase.db&amp;#8221;&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; // The content of DATABASE_NAME doesnot change&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; DatabaseHelper(Context context) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context,DATABASE_NAME, DATABASE_VERSION);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "ISC">
    <name>Is Super Called</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Is Super Called:&lt;/b&gt; In the classes, which inherits from Activity, you must call throughto the super class&apos;s implementation, if you override the so-called lifecycle methods.Otherwise, an exception will be thrown.The Activity&amp;#8217;s lifecycle methodsare the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;onCreate()&lt;/li&gt;&lt;li&gt;onStart()&lt;/li&gt;&lt;li&gt;onPause()&lt;/li&gt;&lt;li&gt;onResume()&lt;/li&gt;&lt;li&gt;onDestroy()&lt;/li&gt;&lt;li&gt;onRestart()&lt;/li&gt;&lt;li&gt;onStop()&lt;/li&gt;&lt;li&gt;onSaveInstanceState()&lt;/li&gt;&lt;/ul&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onCreate(BundlesavedInstanceState) {&amp;#x0A;&amp;nbsp; &amp;nbsp;&amp;nbsp;...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing super.onCreate()&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; protected void onStop() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing super.onStop()&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ISCF">
    <name>Is Super Called Fragment</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Is Super Called Fragment:&lt;/b&gt; In the classes, which extends Fragment, you must call through tothe super class&apos;s implementation, if you override the following methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;onInflate()&lt;/li&gt;&lt;li&gt;onAttach()&lt;/li&gt;&lt;li&gt;onCreate()&lt;/li&gt;&lt;li&gt;onActivityCreated()&lt;/li&gt;&lt;li&gt;onViewStateRestored()&lt;/li&gt;&lt;li&gt;onStart()&lt;/li&gt;&lt;li&gt;onResume()&lt;/li&gt;&lt;li&gt;onConfigurationChanged ()&lt;/li&gt;&lt;li&gt;onPause()&lt;/li&gt;&lt;li&gt;onStop()&lt;/li&gt;&lt;li&gt;onLowMemory()&lt;/li&gt;&lt;li&gt;onTrimMemory()&lt;/li&gt;&lt;li&gt;onDestroyView()&lt;/li&gt;&lt;li&gt;onDestroy()&lt;/li&gt;&lt;li&gt;onDetach()&lt;/li&gt;&lt;/ul&gt;Otherwise, an exception will be thrown.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyFragment extends Fragment{&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onAttach(Activity activity){&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing super.onAttach(activity)&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MRU">
    <name>Missing Remove Updates</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Missing Remove Updates:&lt;/b&gt; If you attach a listener to a location resource then you shouldalways detach it.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity implementsLocationListener {&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onStart(BundlesavedInstanceState) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; myLocationManager.requestLocationUpdates(&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LocationManager.GPS_PROVIDER,0, 0, this);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; //Missing lm.removeUpdates(this);&amp;#x0A;&amp;nbsp; ...&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MURIA">
    <name>Missing Unregister Receiver In Activity</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Missing Unregister Receiver In Activity:&lt;/b&gt; If you register a receiver in your Activity.onResume()implementation, you should unregister it in Activity.onPause() You won&apos;treceive intents when paused, and this will cut down on unnecessary systemoverhead.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity {&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onResume() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; registerReceiver(myReceiver,new IntentFilter(&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onPause() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing unregisterReceiver(myReceiver);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRITWP">
    <name>Resource Release In The Wrong Place</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Resource Release In The Wrong Place:&lt;/b&gt; Do not place any release of resources inActivity.onSaveInstanceState(), because this callback is not always called whenan activity is being placed in the background or on its way to destruction. Anideal place to release resources is the Activity.onPause().&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity {&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onSaveInstanceState(BundeloutState) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;unregisterReceiver(myReceiver); //wrong place&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; public void onPause() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; unregisterReceiver(myReceiver);//good place&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ACEJFE">
    <name>Creates Empty Jar File Entry</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code calls &lt;code&gt;putNextEntry()&lt;/code&gt;, immediately&#x0A;followed by a call to &lt;code&gt;closeEntry()&lt;/code&gt;. This results&#x0A;in an empty JarFile entry. The contents of the entry&#x0A;should be written to the JarFile between the calls to&#x0A;&lt;code&gt;putNextEntry()&lt;/code&gt; and&#x0A;&lt;code&gt;closeEntry()&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ACEZFE">
    <name>Creates Empty Zip File Entry</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code calls &lt;code&gt;putNextEntry()&lt;/code&gt;, immediately&#x0A;followed by a call to &lt;code&gt;closeEntry()&lt;/code&gt;. This results&#x0A;in an empty ZipFile entry. The contents of the entry&#x0A;should be written to the ZipFile between the calls to&#x0A;&lt;code&gt;putNextEntry()&lt;/code&gt; and&#x0A;&lt;code&gt;closeEntry()&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "AOSOCA">
    <name>Operation Sequence On Concurrent Abstraction</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code contains a sequence of calls to a concurrent  abstraction&#x0A;            (such as a concurrent hash map).&#x0A;            These calls will not be executed atomically.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "BA">
    <name>And</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares an expression of the form (e &amp;amp; C) to D,&#x0A;which will always compare unequal&#x0A;due to the specific values of constants C and D.&#x0A;This may indicate a logic error or typo.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BAOSB">
    <name>Add Of Signed Byte</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Adds a byte value and a value which is known to have the 8 lower bits clear.&#x0A;Values loaded from a byte array are sign extended to 32 bits&#x0A;before any any bitwise operations are performed on the value.&#x0A;Thus, if &lt;code&gt;b[0]&lt;/code&gt; contains the value &lt;code&gt;0xff&lt;/code&gt;, and&#x0A;&lt;code&gt;x&lt;/code&gt; is initially 0, then the code&#x0A;&lt;code&gt;((x &amp;lt;&amp;lt; 8) + b[0])&lt;/code&gt;  will sign extend &lt;code&gt;0xff&lt;/code&gt;&#x0A;to get &lt;code&gt;0xffffffff&lt;/code&gt;, and thus give the value&#x0A;&lt;code&gt;0xffffffff&lt;/code&gt; as the result.&#x0A;&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;In particular, the following code for packing a byte array into an int is badly wrong: &lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++)&#x0A;  result = ((result &amp;lt;&amp;lt; 8) + b[i]);&#x0A;&lt;/pre&gt;&#x0A;&#x0A;&lt;p&gt;The following idiom will work instead: &lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++)&#x0A;  result = ((result &amp;lt;&amp;lt; 8) + (b[i] &amp;amp; 0xff));&#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BAZ">
    <name>And Zz</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares an expression of the form (e &amp;amp; 0) to 0,&#x0A;which will always compare equal.&#x0A;This may indicate a logic error or typo.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BBCTAC">
    <name>Bad Cast To Abstract Collection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code casts a Collection to an abstract collection&#x0A;(such as &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or &lt;code&gt;Map&lt;/code&gt;).&#x0A;Ensure that you are guaranteed that the object is of the type&#x0A;you are casting to. If all you need is to be able&#x0A;to iterate through a collection, you don&apos;t need to cast it to a Set or List.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "BBCTCC">
    <name>Bad Cast To Concrete Collection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code casts an abstract collection (such as a Collection, List, or Set)&#x0A;to a specific concrete implementation (such as an ArrayList or HashSet).&#x0A;This might not be correct, and it may make your code fragile, since&#x0A;it makes it harder to switch to other concrete implementations at a future&#x0A;point. Unless you have a particular reason to do so, just use the abstract&#x0A;collection class.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BBIU">
    <name>Boxing Immediately Unboxed</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A primitive is boxed, and then immediately unboxed. This probably is due to a manual&#x0A;    boxing in a place where an unboxed value is required, thus forcing the compiler&#x0A;to immediately undo the work of the boxing.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "BBIUTPC">
    <name>Boxing Immediately Unboxed To Perform Coercion</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A primitive boxed value constructed and then immediately converted into a different primitive type&#x0A;(e.g., &lt;code&gt;new Double(d).intValue()&lt;/code&gt;). Just perform direct primitive coercion (e.g., &lt;code&gt;(int) d&lt;/code&gt;).&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "BBOA">
    <name>Badly Overridden Adapter</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method overrides a method found in a parent class, where that class is an Adapter that implements&#x0A;a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not&#x0A;get called when the event occurs.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BEMSWFAO">
    <name>Equals Method Should Work For All Objects</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The &lt;code&gt;equals(Object o)&lt;/code&gt; method shouldn&apos;t make any assumptions&#x0A;about the type of &lt;code&gt;o&lt;/code&gt;. It should simply return&#x0A;false if &lt;code&gt;o&lt;/code&gt; is not the same type as &lt;code&gt;this&lt;/code&gt;.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BIC">
    <name>Impossible Cast</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This cast will always throw a ClassCastException.&#x0A;FindBugs tracks type information from instanceof checks,&#x0A;and also uses more precise information about the types&#x0A;of values returned from methods and loaded from fields.&#x0A;Thus, it may have more precise information that just&#x0A;the declared type of a variable, and can use this to determine&#x0A;that a cast will always throw an exception at runtime.&#x0A;&#x0A;&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "BID">
    <name>Impossible Downcast</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This cast will always throw a ClassCastException.&#x0A;The analysis believes it knows&#x0A;the precise type of the value being cast, and the attempt to&#x0A;downcast it to a subtype will always fail by throwing a ClassCastException.&#x0A;&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "BIOSB">
    <name>Ior Of Signed Byte</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Loads a byte value (e.g., a value loaded from a byte array or returned by a method&#x0A;with return type byte)  and performs a bitwise OR with&#x0A;that value. Byte values are sign extended to 32 bits&#x0A;before any any bitwise operations are performed on the value.&#x0A;Thus, if &lt;code&gt;b[0]&lt;/code&gt; contains the value &lt;code&gt;0xff&lt;/code&gt;, and&#x0A;&lt;code&gt;x&lt;/code&gt; is initially 0, then the code&#x0A;&lt;code&gt;((x &amp;lt;&amp;lt; 8) | b[0])&lt;/code&gt;  will sign extend &lt;code&gt;0xff&lt;/code&gt;&#x0A;to get &lt;code&gt;0xffffffff&lt;/code&gt;, and thus give the value&#x0A;&lt;code&gt;0xffffffff&lt;/code&gt; as the result.&#x0A;&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;In particular, the following code for packing a byte array into an int is badly wrong: &lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++)&#x0A;  result = ((result &amp;lt;&amp;lt; 8) | b[i]);&#x0A;&lt;/pre&gt;&#x0A;&#x0A;&lt;p&gt;The following idiom will work instead: &lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++)&#x0A;  result = ((result &amp;lt;&amp;lt; 8) | (b[i] &amp;amp; 0xff));&#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BSC">
    <name>Signed Check</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares an expression such as&lt;/p&gt;&#x0A;&lt;pre&gt;((event.detail &amp;amp; SWT.SELECTED) &amp;gt; 0)&lt;/pre&gt;.&#x0A;&lt;p&gt;Using bit arithmetic and then comparing with the greater than operator can&#x0A;lead to unexpected results (of course depending on the value of&#x0A;SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate&#x0A;for a bug. Even when SWT.SELECTED is not negative, it seems good practice&#x0A;to use &apos;!= 0&apos; instead of &apos;&amp;gt; 0&apos;.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;&#x0A;&lt;em&gt;Boris Bokowski&lt;/em&gt;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BSCHB">
    <name>Signed Check High Bit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares an expression such as&lt;/p&gt;&#x0A;&lt;pre&gt;((event.detail &amp;amp; SWT.SELECTED) &amp;gt; 0)&lt;/pre&gt;.&#x0A;&lt;p&gt;Using bit arithmetic and then comparing with the greater than operator can&#x0A;lead to unexpected results (of course depending on the value of&#x0A;SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate&#x0A;for a bug. Even when SWT.SELECTED is not negative, it seems good practice&#x0A;to use &apos;!= 0&apos; instead of &apos;&amp;gt; 0&apos;.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;&#x0A;&lt;em&gt;Boris Bokowski&lt;/em&gt;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BUACFTO">
    <name>Unboxed And Coerced For Ternary Operator</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A wrapped primitive value is unboxed and converted to another primitive type as part of the&#x0A;evaluation of a conditional ternary operator (the &lt;code&gt; b ? e1 : e2&lt;/code&gt; operator). The&#x0A;semantics of Java mandate that if &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are wrapped&#x0A;numeric values, the values are unboxed and converted/coerced to their common type (e.g,&#x0A;if &lt;code&gt;e1&lt;/code&gt; is of type &lt;code&gt;Integer&lt;/code&gt;&#x0A;and &lt;code&gt;e2&lt;/code&gt; is of type &lt;code&gt;Float&lt;/code&gt;, then &lt;code&gt;e1&lt;/code&gt; is unboxed,&#x0A;converted to a floating point value, and boxed. See JLS Section 15.25.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "BUC">
    <name>Unconfirmed Cast</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This cast is unchecked, and not all instances of the type casted from can be cast to&#x0A;the type it is being cast to. Check that your program logic ensures that this&#x0A;cast will not fail.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BUCORV">
    <name>Unconfirmed Cast Of Return Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code performs an unchecked cast of the return value of a method.&#x0A;The code might be calling the method in such a way that the cast is guaranteed to be&#x0A;safe, but FindBugs is unable to verify that the cast is safe.  Check that your program logic ensures that this&#x0A;cast will not fail.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BUIR">
    <name>Unboxing Immediately Reboxed</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A boxed value is unboxed and then immediately reboxed.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "BVI">
    <name>Vacuous Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This instanceof test will always return true (unless the value being tested is null).&#x0A;Although this is safe, make sure it isn&apos;t&#x0A;an indication of some misunderstanding or some other logic error.&#x0A;If you really want to test the value for being null, perhaps it would be clearer to do&#x0A;better to do a null test rather than an instanceof test.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BcII">
    <name>Impossible Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This instanceof test will always return false. Although this is safe, make sure it isn&apos;t&#x0A;an indication of some misunderstanding or some other logic error.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "BiI">
    <name>Ior</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares an expression of the form (e | C) to D.&#x0A;which will always compare unequal&#x0A;due to the specific values of constants C and D.&#x0A;This may indicate a logic error or typo.&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt; Typically, this bug occurs because the code wants to perform&#x0A;a membership test in a bit set, but uses the bitwise OR&#x0A;operator (&quot;|&quot;) instead of bitwise AND (&quot;&amp;amp;&quot;).&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "CAS">
    <name>Abstract Self</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a covariant version of &lt;code&gt;compareTo()&lt;/code&gt;.&amp;nbsp;&#x0A;  To correctly override the &lt;code&gt;compareTo()&lt;/code&gt; method in the&#x0A;  &lt;code&gt;Comparable&lt;/code&gt; interface, the parameter of &lt;code&gt;compareTo()&lt;/code&gt;&#x0A;  must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "CCRMV">
    <name>Compareto Results Min Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; In some situation, this compareTo or compare method returns&#x0A;the  constant Integer.MIN_VALUE, which is an exceptionally bad practice.&#x0A;  The only thing that matters about the return value of compareTo is the sign of the result.&#x0A;    But people will sometimes negate the return value of compareTo, expecting that this will negate&#x0A;    the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE.&#x0A;    So just return -1 rather than Integer.MIN_VALUE.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "CICBNC">
    <name>Implements Clone But Not Cloneable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a clone() method but the class doesn&apos;t implement Cloneable.&#x0A;There are some situations in which this is OK (e.g., you want to control how subclasses&#x0A;can clone themselves), but just make sure that this is what you intended.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "CRCV">
    <name>Rough Constant Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;It&apos;s recommended to use the predefined library constant for code clarity and better precision.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "CSNO">
    <name>Self No Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a covariant version of &lt;code&gt;compareTo()&lt;/code&gt;.&amp;nbsp;&#x0A;  To correctly override the &lt;code&gt;compareTo()&lt;/code&gt; method in the&#x0A;  &lt;code&gt;Comparable&lt;/code&gt; interface, the parameter of &lt;code&gt;compareTo()&lt;/code&gt;&#x0A;  must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DAINVTR">
    <name>Annotation Is Not Visible To Reflection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can&apos;t be observed using reflection&#x0A;(e.g., by using the isAnnotationPresent method).&#x0A;   .&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DAWO">
    <name>Arguments Wrong Order</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The arguments to this method call seem to be in the wrong order.&#x0A;For example, a call &lt;code&gt;Preconditions.checkNotNull(&quot;message&quot;, message)&lt;/code&gt;&#x0A;has reserved arguments: the value to be checked is the first argument.&#x0A;&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "DBC">
    <name>Boolean Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Creating new instances of &lt;code&gt;java.lang.Boolean&lt;/code&gt; wastes&#x0A;  memory, since &lt;code&gt;Boolean&lt;/code&gt; objects are immutable and there are&#x0A;  only two useful values of this type.&amp;nbsp; Use the &lt;code&gt;Boolean.valueOf()&lt;/code&gt;&#x0A;  method (or Java 1.5 autoboxing) to create &lt;code&gt;Boolean&lt;/code&gt; objects instead.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DBM">
    <name>Bad Month</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code passes a constant month&#x0A;value outside the expected range of 0..11 to a method.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DBMOU">
    <name>Blocking Methods On Url</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The equals and hashCode&#x0A;method of URL perform domain name resolution, this can result in a big performance hit.&#x0A;See &lt;a href=&quot;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&quot;&gt;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&lt;/a&gt; for more information.&#x0A;Consider using &lt;code&gt;java.net.URI&lt;/code&gt; instead.&#x0A;   &lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "DBPFP">
    <name>Boxed Primitive For Parsing</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A boxed primitive is created from a String, just to extract the unboxed primitive value.&#x0A;  It is more efficient to just call the static parseXXX method.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DBPT">
    <name>Boxed Primitive Tostring</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A boxed primitive is allocated just to call toString(). It is more effective to just use the static&#x0A;  form of toString which takes the primitive value. So,&lt;/p&gt;&#x0A;  &lt;table&gt;&#x0A;     &lt;tr&gt;&lt;th&gt;Replace...&lt;/th&gt;&lt;th&gt;With this...&lt;/th&gt;&lt;/tr&gt;&#x0A;     &lt;tr&gt;&lt;td&gt;new Integer(1).toString()&lt;/td&gt;&lt;td&gt;Integer.toString(1)&lt;/td&gt;&lt;/tr&gt;&#x0A;     &lt;tr&gt;&lt;td&gt;new Long(1).toString()&lt;/td&gt;&lt;td&gt;Long.toString(1)&lt;/td&gt;&lt;/tr&gt;&#x0A;     &lt;tr&gt;&lt;td&gt;new Float(1.0).toString()&lt;/td&gt;&lt;td&gt;Float.toString(1.0)&lt;/td&gt;&lt;/tr&gt;&#x0A;     &lt;tr&gt;&lt;td&gt;new Double(1.0).toString()&lt;/td&gt;&lt;td&gt;Double.toString(1.0)&lt;/td&gt;&lt;/tr&gt;&#x0A;     &lt;tr&gt;&lt;td&gt;new Byte(1).toString()&lt;/td&gt;&lt;td&gt;Byte.toString(1)&lt;/td&gt;&lt;/tr&gt;&#x0A;     &lt;tr&gt;&lt;td&gt;new Short(1).toString()&lt;/td&gt;&lt;td&gt;Short.toString(1)&lt;/td&gt;&lt;/tr&gt;&#x0A;     &lt;tr&gt;&lt;td&gt;new Boolean(true).toString()&lt;/td&gt;&lt;td&gt;Boolean.toString(true)&lt;/td&gt;&lt;/tr&gt;&#x0A;  &lt;/table&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DCCIDP">
    <name>Create Classloader Inside Do Privileged</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code creates a classloader,  which needs permission if a security manage is installed.&#x0A;  If this code might be invoked by code that does not&#x0A;  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DCDP">
    <name>Constant Db Password</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can&#x0A;    easily learn the password.&#x0A;&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "DCNFH">
    <name>Calling Next From Hasnext</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The hasNext() method invokes the next() method. This is almost certainly wrong,&#x0A;since the hasNext() method is not supposed to change the state of the iterator,&#x0A;and the next method is supposed to change the state of the iterator.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DCOU">
    <name>Collection Of Urls</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode&#x0A;method of URL perform domain name resolution, this can result in a big performance hit.&#x0A;See &lt;a href=&quot;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&quot;&gt;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&lt;/a&gt; for more information.&#x0A;Consider using &lt;code&gt;java.net.URI&lt;/code&gt; instead.&#x0A;   &lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "DCSNCT">
    <name>Collections Should Not Contain Themselves</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This call to a generic collection&apos;s method would only make sense if a collection contained&#x0A;itself (e.g., if &lt;code&gt;s.contains(s)&lt;/code&gt; were true). This is unlikely to be true and would cause&#x0A;problems if it were true (such as the computation of the hash code resulting in infinite recursion).&#x0A;It is likely that the wrong value is being passed as a parameter.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DDB">
    <name>Duplicate Branches</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method uses the same code to implement two branches of a conditional branch.&#x0A;    Check to ensure that this isn&apos;t a coding mistake.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DDE">
    <name>Default Encoding</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.  &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DDIDP">
    <name>Do Inside Do Privileged</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code invokes a method that requires a security permission check.&#x0A;  If this code will be granted security permissions, but might be invoked by code that does not&#x0A;  have security permissions, then the invocation needs to occur inside a doPrivileged block.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DDLS">
    <name>Dead Local Store</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This instruction assigns a value to a local variable,&#x0A;but the value is not read or used in any subsequent instruction.&#x0A;Often, this indicates an error, because the value computed is never&#x0A;used.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;&#x0A;Note that Sun&apos;s javac compiler often generates dead stores for&#x0A;final local variables.  Because FindBugs is a bytecode-based tool,&#x0A;there is no easy way to eliminate these false positives.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DDLSIR">
    <name>Dead Local Store In Return</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This statement assigns to a local variable in a return statement. This assignment&#x0A;has effect. Please verify that this statement does the right thing.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DDLSON">
    <name>Dead Local Store Of Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code stores null into a local variable, and the stored value is not&#x0A;read. This store may have been introduced to assist the garbage collector, but&#x0A;as of Java SE 6.0, this is no longer needed or useful.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DDLSSF">
    <name>Dead Local Store Shadows Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This instruction assigns a value to a local variable,&#x0A;but the value is not read or used in any subsequent instruction.&#x0A;Often, this indicates an error, because the value computed is never&#x0A;used. There is a field with the same name as the local variable. Did you&#x0A;mean to assign to that variable instead?&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DDSC">
    <name>Duplicate Switch Clauses</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method uses the same code to implement two clauses of a switch statement.&#x0A;    This could be a case of duplicate code, but it might also indicate&#x0A;    a coding mistake.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DDSOCL">
    <name>Dead Store Of Class Literal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This instruction assigns a class literal to a variable and then never uses it.&#x0A;&lt;a href=&quot;//java.sun.com/j2se/1.5.0/compatibility.html#literal&quot;&gt;The behavior of this differs in Java 1.4 and in Java 5.&lt;/a&gt;&#x0A;In Java 1.4 and earlier, a reference to &lt;code&gt;Foo.class&lt;/code&gt; would force the static initializer&#x0A;for &lt;code&gt;Foo&lt;/code&gt; to be executed, if it has not been executed already.&#x0A;In Java 5 and later, it does not.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;See Sun&apos;s &lt;a href=&quot;//java.sun.com/j2se/1.5.0/compatibility.html#literal&quot;&gt;article on Java SE compatibility&lt;/a&gt;&#x0A;for more details and examples, and suggestions on how to force class initialization in Java 5.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DEDP">
    <name>Empty Db Password</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DESMREO">
    <name>Entry Sets May Reuse Entry Objects</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The entrySet() method is allowed to return a view of the&#x0A;     underlying Map in which a single Entry object is reused and returned&#x0A;     during the iteration.  As of Java 1.6, both IdentityHashMap&#x0A;     and EnumMap did so. When iterating through such a Map,&#x0A;     the Entry value is only valid until you advance to the next iteration.&#x0A;     If, for example, you try to pass such an entrySet to an addAll method,&#x0A;     things will go badly wrong.&#x0A;    &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DFATCMSOSTPE">
    <name>Futile Attempt To Change Maxpool Size Of Scheduled Thread Pool Executor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;(&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html&quot;&gt;Javadoc&lt;/a&gt;)&#x0A;While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.&#x0A;    &lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "DFNC">
    <name>Fp Number Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      Using &lt;code&gt;new Double(double)&lt;/code&gt; is guaranteed to always result in a new object whereas&#x0A;      &lt;code&gt;Double.valueOf(double)&lt;/code&gt; allows caching of values to be done by the compiler, class library, or JVM.&#x0A;      Using of cached values avoids object allocation and the code will be faster.&#x0A;      &lt;/p&gt;&#x0A;      &lt;p&gt;&#x0A;      Unless the class must be compatible with JVMs predating Java 1.5,&#x0A;      use either autoboxing or the &lt;code&gt;valueOf()&lt;/code&gt; method when creating instances of &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Float&lt;/code&gt;.&#x0A;      &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DHAF">
    <name>Hardcoded Absolute Filename</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code constructs a File object using a hard coded to an absolute pathname&#x0A;(e.g., &lt;code&gt;new File(&quot;/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment&quot;);&lt;/code&gt;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DIHOA">
    <name>Invoking Hashcode On Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code invokes hashCode on an array. Calling hashCode on&#x0A;an array returns the same value as System.identityHashCode, and ingores&#x0A;the contents and length of the array. If you need a hashCode that&#x0A;depends on the contents of an array &lt;code&gt;a&lt;/code&gt;,&#x0A;use &lt;code&gt;java.util.Arrays.hashCode(a)&lt;/code&gt;.&#x0A;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DITOA">
    <name>Invoking Tostring On Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code invokes toString on an array, which will generate a fairly useless result&#x0A;such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable&#x0A;String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DITOAA">
    <name>Invoking Tostring On Anonymous Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result&#x0A;such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable&#x0A;String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DLBTDIOI">
    <name>Long Bits To Double Invoked On Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed&#x0A;    as an argument. This almostly certainly is not intended and is unlikely&#x0A;    to give the intended result.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DMD">
    <name>Might Drop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method might drop an exception.&amp;nbsp; In general, exceptions&#x0A;  should be handled or reported in some way, or they should be thrown&#x0A;  out of the method.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DMI">
    <name>Might Ignore</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method might ignore an exception.&amp;nbsp; In general, exceptions&#x0A;  should be handled or reported in some way, or they should be thrown&#x0A;  out of the method.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DMWOC">
    <name>Monitor Wait On Condition</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method calls &lt;code&gt;wait()&lt;/code&gt; on a&#x0A;      &lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt; object.&amp;nbsp;&#x0A;      Waiting for a &lt;code&gt;Condition&lt;/code&gt; should be done using one of the &lt;code&gt;await()&lt;/code&gt;&#x0A;      methods defined by the &lt;code&gt;Condition&lt;/code&gt; interface.&#x0A;      &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DNOW">
    <name>Nonserializable Object Written</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.&#x0A;If the object is, indeed, non-serializable, an error will result.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DNUT">
    <name>Thread Passed Where Runnable Expected</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A Thread object is passed as a parameter to a method where&#x0A;a Runnable is expected. This is rather unusual, and may indicate a logic error&#x0A;or cause unexpected behavior.&#x0A;   &lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;PMD&lt;/h3&gt;The J2EE specification explicitly forbids the use of threads.&lt;br&gt;Example(s):&lt;br&gt;&lt;pre&gt;&#x0A;            &#x09;&#x0A;            // This is not allowed&#x0A;public class UsingThread extends Thread {&#x0A;&#x0A; }&#x0A;&#x09;// Neither this,&#x0A;public class OtherThread implements Runnable {&#x0A;&#x09;// Nor this ...&#x0A;&#x09;public void methode() {&#x0A;&#x09;&#x09;&#x09;Runnable thread = new Thread(); thread.run();&#x0A;&#x09;}&#x0A;}&#x0A;&#x09;&#x09;&#x09;&#x09;&#x0A;&#x09;&#x09;&lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DNVN">
    <name>Nextint Via Nextdouble</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;If &lt;code&gt;r&lt;/code&gt; is a &lt;code&gt;java.util.Random&lt;/code&gt;, you can generate a random number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;&#x0A;using &lt;code&gt;r.nextInt(n)&lt;/code&gt;, rather than using &lt;code&gt;(int)(r.nextDouble() * n)&lt;/code&gt;.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;The argument to nextInt must be positive. If, for example, you want to generate a random&#x0A;value from -99 to 0, use &lt;code&gt;-r.nextInt(100)&lt;/code&gt;.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DOI">
    <name>Overwritten Increment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code performs an increment operation (e.g., &lt;code&gt;i++&lt;/code&gt;) and then&#x0A;immediately overwrites it. For example, &lt;code&gt;i = i++&lt;/code&gt; immediately&#x0A;overwrites the incremented value with the original value.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DRFOE">
    <name>Run Finalizers On Exit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; &lt;em&gt;Never call System.runFinalizersOnExit&#x0A;or Runtime.runFinalizersOnExit for any reason: they are among the most&#x0A;dangerous methods in the Java libraries.&lt;/em&gt; -- Joshua Bloch&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DRUOO">
    <name>Random Used Only Once</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code creates a java.util.Random object, uses it to generate one random number, and then discards&#x0A;the Random object. This produces mediocre quality random numbers and is inefficient.&#x0A;If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number&#x0A;is required invoke a method on the existing Random object to obtain it.&#x0A;&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;If it is important that the generated Random numbers not be guessable, you &lt;em&gt;must&lt;/em&gt; not create a new Random for each random&#x0A;number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead&#x0A;(and avoid allocating a new SecureRandom for each random number needed).&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DSC">
    <name>String Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Using the &lt;code&gt;java.lang.String(String)&lt;/code&gt; constructor wastes memory&#x0A;  because the object so constructed will be functionally indistinguishable&#x0A;  from the &lt;code&gt;String&lt;/code&gt; passed as a parameter.&amp;nbsp; Just use the&#x0A;  argument &lt;code&gt;String&lt;/code&gt; directly.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DSOB">
    <name>Synchronization On Boolean</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The code synchronizes on a boxed primitive constant, such as an Boolean.&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;private static Boolean inited = Boolean.FALSE;&#x0A;...&#x0A;  synchronized(inited) {&#x0A;    if (!inited) {&#x0A;       init();&#x0A;       inited = Boolean.TRUE;&#x0A;       }&#x0A;     }&#x0A;...&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness&#x0A;and possible deadlock&lt;/p&gt;&#x0A;&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DSOBP">
    <name>Synchronization On Boxed Primitive</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The code synchronizes on a boxed primitive constant, such as an Integer.&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;private static Integer count = 0;&#x0A;...&#x0A;  synchronized(count) {&#x0A;     count++;&#x0A;     }&#x0A;...&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;Since Integer objects can be cached and shared,&#x0A;this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness&#x0A;and possible deadlock&lt;/p&gt;&#x0A;&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DSOSC">
    <name>Synchronization On Shared Constant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The code synchronizes on interned String.&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;private static String LOCK = &quot;LOCK&quot;;&#x0A;...&#x0A;  synchronized(LOCK) { ...}&#x0A;...&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this could&#x0A;is locking on something that other code might also be locking. This could result in very strange and hard to diagnose&#x0A;blocking and deadlock behavior. See &lt;a href=&quot;http://www.javalobby.org/java/forums/t96352.html&quot;&gt;http://www.javalobby.org/java/forums/t96352.html&lt;/a&gt; and &lt;a href=&quot;http://jira.codehaus.org/browse/JETTY-352&quot;&gt;http://jira.codehaus.org/browse/JETTY-352&lt;/a&gt;.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DSOUBP">
    <name>Synchronization On Unshared Boxed Primitive</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The code synchronizes on an apparently unshared boxed primitive,&#x0A;such as an Integer.&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;private static final Integer fileLock = new Integer(1);&#x0A;...&#x0A;  synchronized(fileLock) {&#x0A;     .. do something ..&#x0A;     }&#x0A;...&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;It would be much better, in this code, to redeclare fileLock as&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;private static final Object fileLock = new Object();&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;&#x0A;The existing code might be OK, but it is confusing and a&#x0A;future refactoring, such as the &quot;Remove Boxing&quot; refactoring in IntelliJ,&#x0A;might replace this with the use of an interned Integer object shared&#x0A;throughout the JVM, leading to very confusing behavior and potential deadlock.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DSTPEWZCT">
    <name>Scheduled Thread Pool Executor With Zero Core Threads</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;(&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int)&quot;&gt;Javadoc&lt;/a&gt;)&#x0A;A ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.&#x0A;&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "DSVC">
    <name>String Void Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Creating a new &lt;code&gt;java.lang.String&lt;/code&gt; object using the&#x0A;  no-argument constructor wastes memory because the object so created will&#x0A;  be functionally indistinguishable from the empty string constant&#x0A;  &lt;code&gt;&quot;&quot;&lt;/code&gt;.&amp;nbsp; Java guarantees that identical string constants&#x0A;  will be represented by the same &lt;code&gt;String&lt;/code&gt; object.&amp;nbsp; Therefore,&#x0A;  you should just use the empty string constant directly.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DUM">
    <name>Unsupported Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;All targets of this method invocation throw an UnsupportedOperationException.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DURTCC">
    <name>Using Removeall To Clear Collection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; If you want to remove all elements from a collection &lt;code&gt;c&lt;/code&gt;, use &lt;code&gt;c.clear&lt;/code&gt;,&#x0A;not &lt;code&gt;c.removeAll(c)&lt;/code&gt;. Calling  &lt;code&gt;c.removeAll(c)&lt;/code&gt; to clear a collection&#x0A;is less clear, susceptible to errors from typos, less efficient and&#x0A;for some collections, might throw a &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DUS">
    <name>Useless Substring</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code invokes substring(0) on a String, which returns the original value.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DUT">
    <name>Useless Thread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method creates a thread without specifying a run method either by deriving from the Thread class, or&#x0A;  by passing a Runnable object. This thread, then, does nothing but waste time.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "DVCTEM">
    <name>Vacuous Call To Easymock Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This call doesn&apos;t pass any objects to the EasyMock method, so the call doesn&apos;t do anything.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DVSCC">
    <name>Vacuous Self Collection Call</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This call doesn&apos;t make sense. For any collection &lt;code&gt;c&lt;/code&gt;, calling &lt;code&gt;c.containsAll(c)&lt;/code&gt; should&#x0A;always be true, and &lt;code&gt;c.retainAll(c)&lt;/code&gt; should have no effect.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "DmD">
    <name>Doh</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This partical method invocation doesn&apos;t make sense, for reasons that should be apparent from inspection.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EAAN">
    <name>Array And Nonarray</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This method invokes the .equals(Object o) to compare an array and a reference that doesn&apos;t seem&#x0A;to be an array. If things being compared are of different types, they are guaranteed to be unequal&#x0A;and the comparison is almost certainly an error. Even if they are both arrays, the equals method&#x0A;on arrays only determines of the two arrays are the same object.&#x0A;To compare the&#x0A;contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EAF">
    <name>Always False</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means&#x0A;that equals is not reflexive, one of the requirements of the equals method.&lt;/p&gt;&#x0A;&lt;p&gt;The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class &lt;code&gt;Object&lt;/code&gt;. If you need to override an equals inherited from a different&#x0A;superclass, you can use use:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;public boolean equals(Object o) { return this == o; }&#x0A;&lt;/pre&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "EAS">
    <name>Abstract Self</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a covariant version of &lt;code&gt;equals()&lt;/code&gt;.&amp;nbsp;&#x0A;  To correctly override the &lt;code&gt;equals()&lt;/code&gt; method in&#x0A;  &lt;code&gt;java.lang.Object&lt;/code&gt;, the parameter of &lt;code&gt;equals()&lt;/code&gt;&#x0A;  must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EAT">
    <name>Always True</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines an equals method that always returns true. This is imaginative, but not very smart.&#x0A;Plus, it means that the equals method is not symmetric.&#x0A;&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "EBAC">
    <name>Bad Array Compare</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals&#x0A;method of Object, calling equals on an array is the same as comparing their addresses. To compare the&#x0A;contents of the arrays, use &lt;code&gt;java.util.Arrays.equals(Object[], Object[])&lt;/code&gt;.&#x0A;To compare the addresses of the arrays, it would be&#x0A;less confusing to explicitly check pointer equality using &lt;code&gt;==&lt;/code&gt;.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ECCN">
    <name>Comparing Class Names</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method checks to see if two objects are the same class by checking to see if the names&#x0A;of their classes are equal. You can have different classes with the same name if they are loaded by&#x0A;different class loaders. Just check to see if the class objects are the same.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ECFONCWT">
    <name>Check For Operand Not Compatible With This</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This equals method is checking to see if the argument is some incompatible type&#x0A;(i.e., a class that is neither a supertype nor subtype of the class that defines&#x0A;the equals method). For example, the Foo class might have an equals method&#x0A;that looks like:&#x0A;&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;public boolean equals(Object o) {&#x0A;  if (o instanceof Foo)&#x0A;    return name.equals(((Foo)o).name);&#x0A;  else if (o instanceof String)&#x0A;    return name.equals(o);&#x0A;  else return false;&#x0A;&lt;/pre&gt;&#x0A;&#x0A;&lt;p&gt;This is considered bad practice, as it makes it very hard to implement an equals method that&#x0A;is symmetric and transitive. Without those properties, very unexpected behavoirs are possible.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ECPSWE">
    <name>Comparing Parameter String With Eq</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code compares a &lt;code&gt;java.lang.String&lt;/code&gt; parameter for reference&#x0A;equality using the == or != operators. Requiring callers to&#x0A;pass only String constants or interned strings to a method is unnecessarily&#x0A;fragile, and rarely leads to measurable performance gains. Consider&#x0A;using the &lt;code&gt;equals(Object)&lt;/code&gt; method instead.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ECSWE">
    <name>Comparing Strings With Eq</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code compares &lt;code&gt;java.lang.String&lt;/code&gt; objects for reference&#x0A;equality using the == or != operators.&#x0A;Unless both strings are either constants in a source file, or have been&#x0A;interned using the &lt;code&gt;String.intern()&lt;/code&gt; method, the same string&#x0A;value may be represented by two different String objects. Consider&#x0A;using the &lt;code&gt;equals(Object)&lt;/code&gt; method instead.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ECUOE">
    <name>Compareto Use Object Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a &lt;code&gt;compareTo(...)&lt;/code&gt; method but inherits its&#x0A;  &lt;code&gt;equals()&lt;/code&gt; method from &lt;code&gt;java.lang.Object&lt;/code&gt;.&#x0A;    Generally, the value of compareTo should return zero if and only if&#x0A;    equals returns true. If this is violated, weird and unpredictable&#x0A;    failures will occur in classes such as PriorityQueue.&#x0A;    In Java 5 the PriorityQueue.remove method uses the compareTo method,&#x0A;    while in Java 6 it uses the equals method.&#x0A;&#x0A;&lt;p&gt;From the JavaDoc for the compareTo method in the Comparable interface:&#x0A;&lt;blockquote&gt;&#x0A;It is strongly recommended, but not strictly required that &lt;code&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/code&gt;.&#x0A;Generally speaking, any class that implements the Comparable interface and violates this condition&#x0A;should clearly indicate this fact. The recommended language&#x0A;is &quot;Note: this class has a natural ordering that is inconsistent with equals.&quot;&#x0A;&lt;/blockquote&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EDDEFE">
    <name>Dont Define Equals For Enum</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines an enumeration, and equality on enumerations are defined&#x0A;using object identity. Defining a covariant equals method for an enumeration&#x0A;value is exceptionally bad practice, since it would likely result&#x0A;in having two different enumeration values that compare as equals using&#x0A;the covariant enum method, and as not equal when compared normally.&#x0A;Don&apos;t do it.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EDOE">
    <name>Doesnt Override Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class extends a class that defines an equals method and adds fields, but doesn&apos;t&#x0A;define an equals method itself. Thus, equality on instances of this class will&#x0A;ignore the identity of the subclass and the added fields. Be sure this is what is intended,&#x0A;and that you don&apos;t need to override the equals method. Even if you don&apos;t need to override&#x0A;the equals method, consider overriding it anyway to document the fact&#x0A;that the equals method for the subclass just return the result of&#x0A;invoking super.equals(o).&#x0A;  &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EER">
    <name>Expose Rep</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Returning a reference to a mutable object value stored in one of the object&apos;s fields&#x0A;  exposes the internal representation of the object.&amp;nbsp;&#x0A;   If instances&#x0A;   are accessed by untrusted code, and unchecked changes to&#x0A;   the mutable object would compromise security or other&#x0A;   important properties, you will need to do something different.&#x0A;  Returning a new copy of the object is better approach in many situations.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EESR">
    <name>Expose Static Rep2</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code stores a reference to an externally mutable object into a static&#x0A;   field.&#x0A;   If unchecked changes to&#x0A;   the mutable object would compromise security or other&#x0A;   important properties, you will need to do something different.&#x0A;  Storing a copy of the object is better approach in many situations.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EGACC">
    <name>Getclass And Class Constant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class has an equals method that will be broken if it is inherited by subclasses.&#x0A;It compares a class literal with the class of the argument (e.g., in class &lt;code&gt;Foo&lt;/code&gt;&#x0A;it might check if &lt;code&gt;Foo.class == o.getClass()&lt;/code&gt;).&#x0A;It is better to check if &lt;code&gt;this.getClass() == o.getClass()&lt;/code&gt;.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EIAC">
    <name>Incompatible Array Compare</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This method invokes the .equals(Object o) to compare two arrays, but the arrays of&#x0A;of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]).&#x0A;They will never be equal. In addition, when equals(...) is used to compare arrays it&#x0A;only checks to see if they are the same array, and ignores the contents of the arrays.&#x0A;&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "ENA">
    <name>Null Arg</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method calls equals(Object), passing a null value as&#x0A;the argument. According to the contract of the equals() method,&#x0A;this call should always return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EOENS">
    <name>Overriding Equals Not Symmetric</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines an equals method that overrides an equals method in a superclass. Both equals methods&#x0A;methods use &lt;code&gt;instanceof&lt;/code&gt; in the determination of whether two objects are equal. This is fraught with peril,&#x0A;since it is important that the equals method is symmetrical (in other words, &lt;code&gt;a.equals(b) == b.equals(a)&lt;/code&gt;).&#x0A;If B is a subtype of A, and A&apos;s equals method checks that the argument is an instanceof A, and B&apos;s equals method&#x0A;checks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these&#x0A;methods is not symmetric.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EONO">
    <name>Other No Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines an &lt;code&gt;equals()&lt;/code&gt;&#x0A;  method, that doesn&apos;t override the normal &lt;code&gt;equals(Object)&lt;/code&gt; method&#x0A;  defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.&amp;nbsp; Instead, it&#x0A;  inherits an &lt;code&gt;equals(Object)&lt;/code&gt; method from a superclass.&#x0A;  The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&#x0A;  &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EOUO">
    <name>Other Use Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines an &lt;code&gt;equals()&lt;/code&gt;&#x0A;  method, that doesn&apos;t override the normal &lt;code&gt;equals(Object)&lt;/code&gt; method&#x0A;  defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.&amp;nbsp;&#x0A;  The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&#x0A;  &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ESNO">
    <name>Self No Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a covariant version of &lt;code&gt;equals()&lt;/code&gt;.&amp;nbsp;&#x0A;  To correctly override the &lt;code&gt;equals()&lt;/code&gt; method in&#x0A;  &lt;code&gt;java.lang.Object&lt;/code&gt;, the parameter of &lt;code&gt;equals()&lt;/code&gt;&#x0A;  must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ESUO">
    <name>Self Use Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a covariant version of the &lt;code&gt;equals()&lt;/code&gt;&#x0A;  method, but inherits the normal &lt;code&gt;equals(Object)&lt;/code&gt; method&#x0A;  defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.&amp;nbsp;&#x0A;  The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&#x0A;  &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "EU">
    <name>Unusual</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class doesn&apos;t do any of the patterns we recognize for checking that the type of the argument&#x0A;is compatible with the type of the &lt;code&gt;this&lt;/code&gt; object. There might not be anything wrong with&#x0A;this code, but it is worth reviewing.&#x0A;&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "EUCAI">
    <name>Unrelated Class And Interface</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This method calls equals(Object) on two references,  one of which is a class&#x0A;and the other an interface, where neither the class nor any of its&#x0A;non-abstract subclasses implement the interface.&#x0A;Therefore, the objects being compared&#x0A;are unlikely to be members of the same class at runtime&#x0A;(unless some application classes were not analyzed, or dynamic class&#x0A;loading can occur at runtime).&#x0A;According to the contract of equals(),&#x0A;objects of different&#x0A;classes should always compare as unequal; therefore, according to the&#x0A;contract defined by java.lang.Object.equals(Object),&#x0A;the result of this comparison will always be false at runtime.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EUI">
    <name>Unrelated Interfaces</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method calls equals(Object) on two references of unrelated&#x0A;interface types, where neither is a subtype of the other,&#x0A;and there are no known non-abstract classes which implement both interfaces.&#x0A;Therefore, the objects being compared&#x0A;are unlikely to be members of the same class at runtime&#x0A;(unless some application classes were not analyzed, or dynamic class&#x0A;loading can occur at runtime).&#x0A;According to the contract of equals(),&#x0A;objects of different&#x0A;classes should always compare as unequal; therefore, according to the&#x0A;contract defined by java.lang.Object.equals(Object),&#x0A;the result of this comparison will always be false at runtime.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EUT">
    <name>Unrelated Types</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method calls equals(Object) on two references of different&#x0A;class types with no common subclasses.&#x0A;Therefore, the objects being compared&#x0A;are unlikely to be members of the same class at runtime&#x0A;(unless some application classes were not analyzed, or dynamic class&#x0A;loading can occur at runtime).&#x0A;According to the contract of equals(),&#x0A;objects of different&#x0A;classes should always compare as unequal; therefore, according to the&#x0A;contract defined by java.lang.Object.equals(Object),&#x0A;the result of this comparison will always be false at runtime.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EUTUPE">
    <name>Unrelated Types Using Pointer Equality</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method uses using pointer equality to compare two references that seem to be of&#x0A;different types.  The result of this comparison will always be false at runtime.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "EiER">
    <name>Expose Rep2</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code stores a reference to an externally mutable object into the&#x0A;  internal representation of the object.&amp;nbsp;&#x0A;   If instances&#x0A;   are accessed by untrusted code, and unchecked changes to&#x0A;   the mutable object would compromise security or other&#x0A;   important properties, you will need to do something different.&#x0A;  Storing a copy of the object is better approach in many situations.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "FFNF">
    <name>Finalizer Nulls Fields</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,&#x0A;  and the object is going to be garbage collected anyway.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "FFONF">
    <name>Finalizer Only Nulls Fields</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This finalizer does nothing except null out fields. This is completely pointless, and requires that&#x0A;the object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize&#x0A;method.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "FFPE">
    <name>Floating Point Equality</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This operation compares two floating point values for equality.&#x0A;    Because floating point calculations may involve rounding,&#x0A;   calculated float and double values may not be accurate.&#x0A;    For values that must be precise, such as monetary values,&#x0A;   consider using a fixed-precision type such as BigDecimal.&#x0A;    For values that need not be precise, consider comparing for equality&#x0A;    within some range, for example:&#x0A;    &lt;code&gt;if ( Math.abs(x - y) &amp;lt; .0000001 )&lt;/code&gt;.&#x0A;   See the Java Language Specification, section 4.2.4.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "FMEW">
    <name>Missing Expected Warning</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;FindBugs didn&apos;t generate generated a warning that, according to a @ExpectedWarning annotated,&#x0A;            is expected or desired&lt;/p&gt;</description>
  </rule>
  <rule key = "FMUFP">
    <name>Math Using Float Precision</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;   The method performs math operations using floating point precision.&#x0A;   Floating point precision is very imprecise. For example,&#x0A;   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "FNS">
    <name>Nullify Super</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This empty &lt;code&gt;finalize()&lt;/code&gt; method explicitly negates the&#x0A;  effect of any finalizer defined by its superclass.&amp;nbsp; Any finalizer&#x0A;  actions defined for the superclass will not be performed.&amp;nbsp;&#x0A;  Unless this is intended, delete this method.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "FU">
    <name>Useless</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The only thing this &lt;code&gt;finalize()&lt;/code&gt; method does is call&#x0A;  the superclass&apos;s &lt;code&gt;finalize()&lt;/code&gt; method, making it&#x0A;  redundant.&amp;nbsp; Delete it.&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "FUW">
    <name>Unexpected Warning</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;FindBugs generated a warning that, according to a @NoWarning annotated,&#x0A;            is unexpected or undesired&lt;/p&gt;</description>
  </rule>
  <rule key = "GUT">
    <name>Unrelated Types</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This call to a generic collection method contains an argument&#x0A;     with an incompatible class from that of the collection&apos;s parameter&#x0A;    (i.e., the type of the argument is neither a supertype nor a subtype&#x0A;        of the corresponding generic type argument).&#x0A;     Therefore, it is unlikely that the collection contains any objects&#x0A;    that are equal to the method argument used here.&#x0A;    Most likely, the wrong value is being passed to the method.&lt;/p&gt;&#x0A;    &lt;p&gt;In general, instances of two unrelated classes are not equal.&#x0A;    For example, if the &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; classes&#x0A;    are not related by subtyping, then an instance of &lt;code&gt;Foo&lt;/code&gt;&#x0A;        should not be equal to an instance of &lt;code&gt;Bar&lt;/code&gt;.&#x0A;    Among other issues, doing so will likely result in an equals method&#x0A;    that is not symmetrical. For example, if you define the &lt;code&gt;Foo&lt;/code&gt; class&#x0A;    so that a &lt;code&gt;Foo&lt;/code&gt; can be equal to a &lt;code&gt;String&lt;/code&gt;,&#x0A;    your equals method isn&apos;t symmetrical since a &lt;code&gt;String&lt;/code&gt; can only be equal&#x0A;    to a &lt;code&gt;String&lt;/code&gt;.&#x0A;    &lt;/p&gt;&#x0A;    &lt;p&gt;In rare cases, people do define nonsymmetrical equals methods and still manage to make&#x0A;    their code work. Although none of the APIs document or guarantee it, it is typically&#x0A;    the case that if you check if a &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; contains&#x0A;    a &lt;code&gt;Foo&lt;/code&gt;, the equals method of argument (e.g., the equals method of the&#x0A;    &lt;code&gt;Foo&lt;/code&gt; class) used to perform the equality checks.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "GUTIGC">
    <name>Unchecked Type In Generic Call</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This call to a generic collection method passes an argument&#x0A;    while compile type Object where a specific type from&#x0A;    the generic type parameters is expected.&#x0A;    Thus, neither the standard Java type system nor static analysis&#x0A;    can provide useful information on whether the&#x0A;    object being passed as a parameter is of an appropriate type.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "HENH">
    <name>Equals No Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class overrides &lt;code&gt;equals(Object)&lt;/code&gt;, but does not&#x0A;  override &lt;code&gt;hashCode()&lt;/code&gt;.&amp;nbsp; Therefore, the class may violate the&#x0A;  invariant that equal objects must have equal hashcodes.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "HEUH">
    <name>Equals Use Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class overrides &lt;code&gt;equals(Object)&lt;/code&gt;, but does not&#x0A;  override &lt;code&gt;hashCode()&lt;/code&gt;, and inherits the implementation of&#x0A;  &lt;code&gt;hashCode()&lt;/code&gt; from &lt;code&gt;java.lang.Object&lt;/code&gt; (which returns&#x0A;  the identity hash code, an arbitrary value assigned to the object&#x0A;  by the VM).&amp;nbsp; Therefore, the class is very likely to violate the&#x0A;  invariant that equal objects must have equal hashcodes.&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;If you don&apos;t think instances of this class will ever be inserted into a HashMap/HashTable,&#x0A;the recommended &lt;code&gt;hashCode&lt;/code&gt; implementation to use is:&lt;/p&gt;&#x0A;&lt;pre&gt;public int hashCode() {&#x0A;  assert false : &quot;hashCode not designed&quot;;&#x0A;  return 42; // any arbitrary constant will do&#x0A;  }&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "HHNE">
    <name>Hashcode No Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a &lt;code&gt;hashCode()&lt;/code&gt; method but not an&#x0A;  &lt;code&gt;equals()&lt;/code&gt; method.&amp;nbsp; Therefore, the class may&#x0A;  violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "HHSSC">
    <name>Huge Shared String Constant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    A large String constant is duplicated across multiple class files.&#x0A;    This is likely because a final field is initialized to a String constant, and the Java language&#x0A;    mandates that all references to a final field from other classes be inlined into&#x0A;that classfile. See &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6447475&quot;&gt;JDK bug 6447475&lt;/a&gt;&#x0A;    for a description of an occurrence of this bug in the JDK and how resolving it reduced&#x0A;    the size of the JDK by 1 megabyte.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "HHUOE">
    <name>Hashcode Use Object Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a &lt;code&gt;hashCode()&lt;/code&gt; method but inherits its&#x0A;  &lt;code&gt;equals()&lt;/code&gt; method from &lt;code&gt;java.lang.Object&lt;/code&gt;&#x0A;  (which defines equality by comparing object references).&amp;nbsp; Although&#x0A;  this will probably satisfy the contract that equal objects must have&#x0A;  equal hashcodes, it is probably not what was intended by overriding&#x0A;  the &lt;code&gt;hashCode()&lt;/code&gt; method.&amp;nbsp; (Overriding &lt;code&gt;hashCode()&lt;/code&gt;&#x0A;  implies that the object&apos;s identity is based on criteria more complicated&#x0A;  than simple reference equality.)&lt;/p&gt;&#x0A;&lt;p&gt;If you don&apos;t think instances of this class will ever be inserted into a HashMap/HashTable,&#x0A;the recommended &lt;code&gt;hashCode&lt;/code&gt; implementation to use is:&lt;/p&gt;&#x0A;&lt;pre&gt;public int hashCode() {&#x0A;  assert false : &quot;hashCode not designed&quot;;&#x0A;  return 42; // any arbitrary constant will do&#x0A;  }&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "HIEUH">
    <name>Inherits Equals Use Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class inherits &lt;code&gt;equals(Object)&lt;/code&gt; from an abstract&#x0A;  superclass, and &lt;code&gt;hashCode()&lt;/code&gt; from&#x0A;&lt;code&gt;java.lang.Object&lt;/code&gt; (which returns&#x0A;  the identity hash code, an arbitrary value assigned to the object&#x0A;  by the VM).&amp;nbsp; Therefore, the class is very likely to violate the&#x0A;  invariant that equal objects must have equal hashcodes.&lt;/p&gt;&#x0A;&#x0A;  &lt;p&gt;If you don&apos;t want to define a hashCode method, and/or don&apos;t&#x0A;   believe the object will ever be put into a HashMap/Hashtable,&#x0A;   define the &lt;code&gt;hashCode()&lt;/code&gt; method&#x0A;   to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "HRPTC">
    <name>Request Parameter To Cookie</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting&#x0A;vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_response_splitting&quot;&gt;http://en.wikipedia.org/wiki/HTTP_response_splitting&lt;/a&gt;&#x0A;for more information.&lt;/p&gt;&#x0A;&lt;p&gt;FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.&#x0A;If FindBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more&#x0A;vulnerabilities that FindBugs doesn&apos;t report. If you are concerned about HTTP response splitting, you should seriously&#x0A;consider using a commercial static analysis or pen-testing tool.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "HRPTHH">
    <name>Request Parameter To Http Header</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting&#x0A;vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_response_splitting&quot;&gt;http://en.wikipedia.org/wiki/HTTP_response_splitting&lt;/a&gt;&#x0A;for more information.&lt;/p&gt;&#x0A;&lt;p&gt;FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.&#x0A;If FindBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more&#x0A;vulnerabilities that FindBugs doesn&apos;t report. If you are concerned about HTTP response splitting, you should seriously&#x0A;consider using a commercial static analysis or pen-testing tool.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "HSDHOUC">
    <name>Signature Declares Hashing Of Unhashable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A method, field or class declares a generic signature where a non-hashable class&#x0A;is used in context where a hashable class is required.&#x0A;A class that declares an equals method but inherits a hashCode() method&#x0A;from Object is unhashable, since it doesn&apos;t fulfill the requirement that&#x0A;equal objects have equal hashCodes.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "HUOUC">
    <name>Use Of Unhashable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A class defines an equals(Object)  method but not a hashCode() method,&#x0A;and thus doesn&apos;t fulfill the requirement that equal objects have equal hashCodes.&#x0A;An instance of this class is used in a hash data structure, making the need to&#x0A;fix this problem of highest importance.</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IACCO">
    <name>Average Computation Could Overflow</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code computes the average of two integers using either division or signed right shift,&#x0A;and then uses the result as the index of an array.&#x0A;If the values being averaged are very large, this can overflow (resulting in the computation&#x0A;of a negative average).  Assuming that the result is intended to be nonnegative, you&#x0A;can use an unsigned right shift instead. In other words, rather that using &lt;code&gt;(low+high)/2&lt;/code&gt;,&#x0A;use &lt;code&gt;(low+high) &amp;gt;&amp;gt;&amp;gt; 1&lt;/code&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;This bug exists in many earlier implementations of binary search and merge sort.&#x0A;Martin Buchholz &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6412541&quot;&gt;found and fixed it&lt;/a&gt;&#x0A;in the JDK libraries, and Joshua Bloch&#x0A;&lt;a href=&quot;http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html&quot;&gt;widely&#x0A;publicized the bug pattern&lt;/a&gt;.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IAIOIOOM">
    <name>Ambiguous Invocation Of Inherited Or Outer Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class.&#x0A;For example, you invoke &lt;code&gt;foo(17)&lt;/code&gt;, which is defined in both a superclass and in an outer method.&#x0A;By the Java semantics,&#x0A;it will be resolved to invoke the inherited method, but this may not be want&#x0A;you intend.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;If you really intend to invoke the inherited method,&#x0A;invoke it by invoking the method on super (e.g., invoke super.foo(17)), and&#x0A;thus it will be clear to other readers of your code and to FindBugs&#x0A;that you want to invoke the inherited method, not the method in the outer class.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;If you call &lt;code&gt;this.foo(17)&lt;/code&gt;, then the inherited method will be invoked. However, since FindBugs only looks at&#x0A;classfiles, it&#x0A;can&apos;t tell the difference between an invocation of &lt;code&gt;this.foo(17)&lt;/code&gt; and &lt;code&gt;foo(17)&lt;/code&gt;, it will still&#x0A;complain about a potential ambiguous invocation.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "IAMIFRM">
    <name>Assert Method Invoked From Run Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A JUnit assertion is performed in a run method. Failed JUnit assertions&#x0A;just result in exceptions being thrown.&#x0A;Thus, if this exception occurs in a thread other than the thread that invokes&#x0A;the test method, the exception will terminate the thread but not result&#x0A;in the test failing.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IATOOS">
    <name>Appending To Object Output Stream</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;     This code opens a file in append mode and then wraps the result in an object output stream.&#x0A;     This won&apos;t allow you to append to an existing object output stream stored in a file. If you want to be&#x0A;     able to append to an object output stream, you need to keep the object output stream open.&#x0A;      &lt;/p&gt;&#x0A;      &lt;p&gt;The only situation in which opening a file in append mode and the writing an object output stream&#x0A;      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset&#x0A;      where the append started.&#x0A;      &lt;/p&gt;&#x0A;&#x0A;      &lt;p&gt;&#x0A;      TODO: example.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IBCFO">
    <name>Bad Check For Odd</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code uses x % 2 == 1 to check to see if a value is odd, but this won&apos;t work&#x0A;for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check&#x0A;for oddness, consider using x &amp;amp; 1 == 1, or x % 2 != 0.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IBCWIV">
    <name>Bad Comparison With Int Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code compares an int value with a long constant that is outside&#x0A;the range of values that can be represented as an int value.&#x0A;This comparison is vacuous and possibily to be incorrect.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "IBCWNV">
    <name>Bad Comparison With Nonnegative Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code compares a value that is guaranteed to be non-negative with a negative constant.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IBCWSB">
    <name>Bad Comparison With Signed Byte</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Signed bytes can only have a value in the range -128 to 127. Comparing&#x0A;a signed byte with a value outside that range is vacuous and likely to be incorrect.&#x0A;To convert a signed byte &lt;code&gt;b&lt;/code&gt; to an unsigned value in the range 0..255,&#x0A;use &lt;code&gt;0xff &amp;amp; b&lt;/code&gt;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IBRB1">
    <name>Bad Rem By 1</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Any expression (exp % 1) is guaranteed to always return zero.&#x0A;Did you mean (exp &amp;amp; 1) or (exp % 2) instead?&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IBSA">
    <name>Bad Shift Amount</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code performs shift of a 32 bit int by a constant amount outside&#x0A;the range -31..31.&#x0A;The effect of this is to use the lower 5 bits of the integer&#x0A;value to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits,&#x0A;and shifting by 32 bits is the same as shifting by zero bits). This probably isn&apos;t what was expected,&#x0A;and it is at least confusing.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IBSM">
    <name>Bad Suite Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Class is a JUnit TestCase and defines a suite() method.&#x0A;However, the suite method needs to be declared as either&lt;/p&gt;&#x0A;&lt;pre&gt;public static junit.framework.Test suite()&lt;/pre&gt;&#x0A;or&#x0A;&lt;pre&gt;public static junit.framework.TestSuite suite()&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ICATI">
    <name>Container Added To Itself</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A collection is added to itself. As a result, computing the hashCode of this&#x0A;set will throw a StackOverflowException.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IDCI">
    <name>Dont Catch Imse</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;IllegalMonitorStateException is generally only&#x0A;   thrown in case of a design flaw in your code (calling wait or&#x0A;   notify on an object you do not hold a lock on).&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "IFNG">
    <name>Field Not Guarded</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy,&#x0A;but can be accessed in a way that seems to violate those annotations.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "II2LAI">
    <name>Int 2 Long As Instant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code converts a 32-bit int value to a 64-bit long value, and then&#x0A;passes that value for a method parameter that requires an absolute time value.&#x0A;An absolute time value is the number&#x0A;of milliseconds since the standard base time known as &quot;the epoch&quot;, namely January 1, 1970, 00:00:00 GMT.&#x0A;For example, the following method, intended to convert seconds since the epoc into a Date, is badly&#x0A;broken:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;Date getDate(int seconds) { return new Date(seconds * 1000); }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value.&#x0A;When a 32-bit value is converted to 64-bits and used to express an absolute time&#x0A;value, only dates in December 1969 and January 1970 can be represented.&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;Correct implementations for the above method are:&lt;/p&gt;&#x0A;&#x0A;&lt;pre&gt;&#x0A;// Fails for dates after 2037&#x0A;Date getDate(int seconds) { return new Date(seconds * 1000L); }&#x0A;&#x0A;// better, works for all dates&#x0A;Date getDate(long seconds) { return new Date(seconds * 1000); }&#x0A;&lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "IIC">
    <name>Init Circularity</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A circularity was detected in the static initializers of the two&#x0A;  classes referenced by the bug instance.&amp;nbsp; Many kinds of unexpected&#x0A;  behavior may arise from such circularity.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IICTD">
    <name>Idiv Cast To Double</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code casts the result of an integral division (e.g., int or long division)&#x0A;operation to double or&#x0A;float.&#x0A;Doing division on integers truncates the result&#x0A;to the integer value closest to zero.  The fact that the result&#x0A;was cast to double suggests that this precision should have been retained.&#x0A;What was probably meant was to cast one or both of the operands to&#x0A;double &lt;em&gt;before&lt;/em&gt; performing the division.  Here is an example:&#x0A;&lt;/p&gt;&#x0A;&lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;int x = 2;&#x0A;int y = 5;&#x0A;// Wrong: yields result 0.0&#x0A;double value1 =  x / y;&#x0A;&#x0A;// Right: yields result 0.4&#x0A;double value2 =  x / (double) y;&#x0A;&lt;/pre&gt;&#x0A;&lt;/blockquote&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IICTDPTC">
    <name>Int Cast To Double Passed To Ceil</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code converts an integral value (e.g., int or long)&#x0A;to a double precision&#x0A;floating point number and then&#x0A;passing the result to the Math.ceil() function, which rounds a double to&#x0A;the next higher integer value. This operation should always be a no-op,&#x0A;since the converting an integer to a double should give a number with no fractional part.&#x0A;It is likely that the operation that generated the value to be passed&#x0A;to Math.ceil was intended to be performed using double precision&#x0A;floating point arithmetic.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IICTFPTR">
    <name>Int Cast To Float Passed To Round</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code converts an int value to a float precision&#x0A;floating point number and then&#x0A;passing the result to the Math.round() function, which returns the int/long closest&#x0A;to the argument. This operation should always be a no-op,&#x0A;since the converting an integer to a float should give a number with no fractional part.&#x0A;It is likely that the operation that generated the value to be passed&#x0A;to Math.round was intended to be performed using&#x0A;floating point arithmetic.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IIIO">
    <name>Inefficient Index Of</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code passes a constant string of length 1 to String.indexOf().&#x0A;It is more efficient to use the integer implementations of String.indexOf().&#x0A;f. e. call &lt;code&gt;myString.indexOf(&apos;.&apos;)&lt;/code&gt; instead of &lt;code&gt;myString.indexOf(&quot;.&quot;)&lt;/code&gt;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "IIL">
    <name>Infinite Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This loop doesn&apos;t seem to have a way to terminate (other than by perhaps&#x0A;throwing an exception).&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IILIO">
    <name>Inefficient Last Index Of</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code passes a constant string of length 1 to String.lastIndexOf().&#x0A;It is more efficient to use the integer implementations of String.lastIndexOf().&#x0A;f. e. call &lt;code&gt;myString.lastIndexOf(&apos;.&apos;)&lt;/code&gt; instead of &lt;code&gt;myString.lastIndexOf(&quot;.&quot;)&lt;/code&gt;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "IIMCTL">
    <name>Integer Multiply Cast To Long</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code performs integer multiply and then converts the result to a long,&#x0A;as in:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;    long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;&#x0A;If the multiplication is done using long arithmetic, you can avoid&#x0A;the possibility that the result will overflow. For example, you&#x0A;could fix the above code to:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;    long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }&#x0A;&lt;/pre&gt;&#x0A;or&#x0A;&lt;pre&gt;&#x0A;    static final long MILLISECONDS_PER_DAY = 24L*3600*1000;&#x0A;    long convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }&#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IIRL">
    <name>Infinite Recursive Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method unconditionally invokes itself. This would seem to indicate&#x0A;an infinite recursive loop that will result in a stack overflow.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IIS">
    <name>Inconsistent Sync</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The fields of this class appear to be accessed inconsistently with respect&#x0A;  to synchronization.&amp;nbsp; This bug report indicates that the bug pattern detector&#x0A;  judged that&#x0A;  &lt;/p&gt;&#x0A;  &lt;ul&gt;&#x0A;  &lt;li&gt; The class contains a mix of locked and unlocked accesses,&lt;/li&gt;&#x0A;  &lt;li&gt; The class is &lt;b&gt;not&lt;/b&gt; annotated as javax.annotation.concurrent.NotThreadSafe,&lt;/li&gt;&#x0A;  &lt;li&gt; At least one locked access was performed by one of the class&apos;s own methods, and&lt;/li&gt;&#x0A;  &lt;li&gt; The number of unsynchronized field accesses (reads and writes) was no more than&#x0A;       one third of all accesses, with writes being weighed twice as high as reads&lt;/li&gt;&#x0A;  &lt;/ul&gt;&#x0A;&#x0A;  &lt;p&gt; A typical bug matching this bug pattern is forgetting to synchronize&#x0A;  one of the methods in a class that is intended to be thread-safe.&lt;/p&gt;&#x0A;&#x0A;  &lt;p&gt; You can select the nodes labeled &quot;Unsynchronized access&quot; to show the&#x0A;  code locations where the detector believed that a field was accessed&#x0A;  without synchronization.&lt;/p&gt;&#x0A;&#x0A;  &lt;p&gt; Note that there are various sources of inaccuracy in this detector;&#x0A;  for example, the detector cannot statically detect all situations in which&#x0A;  a lock is held.&amp;nbsp; Also, even when the detector is accurate in&#x0A;  distinguishing locked vs. unlocked accesses, the code in question may still&#x0A;  be correct.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IISC">
    <name>Instantiate Static Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class allocates an object that is based on a class that only supplies static methods. This object&#x0A;does not need to be created, just access the static methods directly using the class name as a qualifier.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "IMROI">
    <name>Multiplying Result Of Irem</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code multiplies the result of an integer remaining by an integer constant.&#x0A;Be sure you don&apos;t have your operator precedence confused. For example&#x0A;i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "INSE">
    <name>No Such Element</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class implements the &lt;code&gt;java.util.Iterator&lt;/code&gt; interface.&amp;nbsp;&#x0A;  However, its &lt;code&gt;next()&lt;/code&gt; method is not capable of throwing&#x0A;  &lt;code&gt;java.util.NoSuchElementException&lt;/code&gt;.&amp;nbsp; The &lt;code&gt;next()&lt;/code&gt;&#x0A;  method should be changed so it throws &lt;code&gt;NoSuchElementException&lt;/code&gt;&#x0A;  if is called when there are no more elements to return.&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "INT">
    <name>No Tests</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Class is a JUnit TestCase but has not implemented any test methods&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IPIDBO">
    <name>Parameter Is Dead But Overwritten</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The initial value of this parameter is ignored, and the parameter&#x0A;is overwritten here. This often indicates a mistaken belief that&#x0A;the write to the parameter will be conveyed back to&#x0A;the caller.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IQURS">
    <name>Questionable Unsigned Right Shift</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code performs an unsigned right shift, whose result is then&#x0A;cast to a short or byte, which discards the upper bits of the result.&#x0A;Since the upper bits are discarded, there may be no difference between&#x0A;a signed and unsigned right shift (depending upon the size of the shift).&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ISNS">
    <name>Setup No Super</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Class is a JUnit TestCase and implements the setUp method. The setUp method should call&#x0A;super.setUp(), but doesn&apos;t.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "ISUSDI">
    <name>Superclass Uses Subclass During Initialization</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; During the initialization of a class, the class makes an active use of a subclass.&#x0A;That subclass will not yet be initialized at the time of this use.&#x0A;For example, in the following code, &lt;code&gt;foo&lt;/code&gt; will be null.&lt;/p&gt;&#x0A;&#x0A;&lt;pre&gt;&#x0A;public class CircularClassInitialization {&#x0A;    static class InnerClassSingleton extends CircularClassInitialization {&#x0A;        static InnerClassSingleton singleton = new InnerClassSingleton();&#x0A;    }&#x0A;&#x0A;    static CircularClassInitialization foo = InnerClassSingleton.singleton;&#x0A;}&#x0A;&lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "ITNS">
    <name>Teardown No Super</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call&#x0A;super.tearDown(), but doesn&apos;t.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IVBO">
    <name>Vacuous Bit Operation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This is an integer bit operation (and, or, or exclusive or) that doesn&apos;t do any useful work&#x0A;(e.g., &lt;code&gt;v &amp; 0xffffffff&lt;/code&gt;).&#x0A;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "IVC">
    <name>Vacuous Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; There is an integer comparison that always returns&#x0A;the same value (e.g., x &amp;lt;= Integer.MAX_VALUE).&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "JFIFIIC">
    <name>Field Isnt Final In Immutable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable,&#x0A;  and the rules for those annotations require that all fields are final.&#x0A;   .&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "JJCWRTA">
    <name>Jsr166 Calling Wait Rather Than Await</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method calls&#x0A;&lt;code&gt;wait()&lt;/code&gt;,&#x0A;&lt;code&gt;notify()&lt;/code&gt; or&#x0A;&lt;code&gt;notifyAll()()&lt;/code&gt;&#x0A;on an object that also provides an&#x0A;&lt;code&gt;await()&lt;/code&gt;,&#x0A;&lt;code&gt;signal()&lt;/code&gt;,&#x0A;&lt;code&gt;signalAll()&lt;/code&gt; method (such as util.concurrent Condition objects).&#x0A;This probably isn&apos;t what you want, and even if you do want it, you should consider changing&#x0A;your design, as other developers will find it exceptionally confusing.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "JJLM">
    <name>Jsr166 Lock Monitorenter</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method performs synchronization an object that implements&#x0A;java.util.concurrent.locks.Lock. Such an object is locked/unlocked&#x0A;using&#x0A;&lt;code&gt;acquire()&lt;/code&gt;/&lt;code&gt;release()&lt;/code&gt; rather&#x0A;than using the &lt;code&gt;synchronized (...)&lt;/code&gt; construct.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "JJUM">
    <name>Jsr166 Utilconcurrent Monitorenter</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method performs synchronization an object that is an instance of&#x0A;a class from the java.util.concurrent package (or its subclasses). Instances&#x0A;of these classes have their own concurrency control mechanisms that are orthogonal to&#x0A;the synchronization provided by the Java keyword &lt;code&gt;synchronized&lt;/code&gt;. For example,&#x0A;synchronizing on an &lt;code&gt;AtomicBoolean&lt;/code&gt; will not prevent other threads&#x0A;from modifying the  &lt;code&gt;AtomicBoolean&lt;/code&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Such code may be correct, but should be carefully reviewed and documented,&#x0A;and may confuse people who have to maintain the code at a later date.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "JSONSOIS">
    <name>Store Of Non Serializable Object Into Session</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code seems to be storing a non-serializable object into an HttpSession.&#x0A;If this session is passivated or migrated, an error will result.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "LLIS">
    <name>Lazy Init Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains an unsynchronized lazy initialization of a non-volatile static field.&#x0A;Because the compiler or processor may reorder instructions,&#x0A;threads are not guaranteed to see a completely initialized object,&#x0A;&lt;em&gt;if the method can be called by multiple threads&lt;/em&gt;.&#x0A;You can make the field volatile to correct the problem.&#x0A;For more information, see the&#x0A;&lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/&quot;&gt;Java Memory Model web site&lt;/a&gt;.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "LLIUS">
    <name>Lazy Init Update Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains an unsynchronized lazy initialization of a static field.&#x0A;After the field is set, the object stored into that location is further updated or accessed.&#x0A;The setting of the field is visible to other threads as soon as it is set. If the&#x0A;futher accesses in the method that set the field serve to initialize the object, then&#x0A;you have a &lt;em&gt;very serious&lt;/em&gt; multithreading bug, unless something else prevents&#x0A;any other thread from accessing the stored object until it is fully initialized.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;Even if you feel confident that the method is never called by multiple&#x0A;threads, it might be better to not set the static field until the value&#x0A;you are setting it to is fully populated/initialized.</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MCBF">
    <name>Cannot Be Final</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A; A mutable static field could be changed by malicious code or&#x0A;        by accident from another package.&#x0A;   Unfortunately, the way the field is used doesn&apos;t allow&#x0A;   any easy fix to this problem.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MCMF">
    <name>Class Masks Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a field with the same name as a visible&#x0A;instance field in a superclass.  This is confusing, and&#x0A;may indicate an error if methods update or access one of&#x0A;the fields when they wanted the other.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MFP">
    <name>Final Pkgprotect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;   A mutable static field could be changed by malicious code or&#x0A;        by accident from another package.&#x0A;        The field could be made package protected and/or made final&#x0A;   to avoid&#x0A;        this vulnerability.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MMA">
    <name>Mutable Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A final static field references an array&#x0A;   and can be accessed by malicious code or&#x0A;        by accident from another package.&#x0A;   This code can freely modify the contents of the array.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MMH">
    <name>Mutable Hashtable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A final static field references a Hashtable&#x0A;   and can be accessed by malicious code or&#x0A;        by accident from another package.&#x0A;   This code can freely modify the contents of the Hashtable.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MMMF">
    <name>Method Masks Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method defines a local variable with the same name as a field&#x0A;in this class or a superclass.  This may cause the method to&#x0A;read an uninitialized value from the field, leave the field uninitialized,&#x0A;or both.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MMN">
    <name>Mismatched Notify</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method calls Object.notify() or Object.notifyAll() without obviously holding a lock&#x0A;on the object.&amp;nbsp;  Calling notify() or notifyAll() without a lock held will result in&#x0A;an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MMSF">
    <name>Mutable Servlet Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A web server generally only creates one instance of servlet or jsp class (i.e., treats&#x0A;the class as a Singleton),&#x0A;and will&#x0A;have multiple threads invoke methods on that instance to service multiple&#x0A;simultaneous requests.&#x0A;Thus, having a mutable instance field generally creates race conditions.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MMW">
    <name>Mismatched Wait</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method calls Object.wait() without obviously holding a lock&#x0A;on the object.&amp;nbsp;  Calling wait() without a lock held will result in&#x0A;an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MOP">
    <name>Ooi Pkgprotect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A; A final static field that is&#x0A;defined in an interface references a mutable&#x0A;   object such as an array or hashtable.&#x0A;   This mutable object could&#x0A;   be changed by malicious code or&#x0A;        by accident from another package.&#x0A;   To solve this, the field needs to be moved to a class&#x0A;   and made package protected&#x0A;   to avoid&#x0A;        this vulnerability.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MP">
    <name>Pkgprotect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A mutable static field could be changed by malicious code or&#x0A;   by accident.&#x0A;   The field could be made package protected to avoid&#x0A;   this vulnerability.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MSBF">
    <name>Should Be Final</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This static field public but not final, and&#x0A;could be changed by malicious code or&#x0A;        by accident from another package.&#x0A;        The field could be made final to avoid&#x0A;        this vulnerability.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MSBRTBF">
    <name>Should Be Refactored To Be Final</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This static field public but not final, and&#x0A;could be changed by malicious code or&#x0A;by accident from another package.&#x0A;The field could be made final to avoid&#x0A;this vulnerability. However, the static initializer contains more than one write&#x0A;to the field, so doing so will require some refactoring.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MSOFTGCTF">
    <name>Sync On Field To Guard Changing That Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method synchronizes on a field in what appears to be an attempt&#x0A;to guard against simultaneous updates to that field. But guarding a field&#x0A;gets a lock on the referenced object, not on the field. This may not&#x0A;provide the mutual exclusion you need, and other threads might&#x0A;be obtaining locks on the referenced objects (for other purposes). An example&#x0A;of this pattern would be:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;private Long myNtfSeqNbrCounter = new Long(0);&#x0A;private Long getNotificationSequenceNumber() {&#x0A;     Long result = null;&#x0A;     synchronized(myNtfSeqNbrCounter) {&#x0A;         result = new Long(myNtfSeqNbrCounter.longValue() + 1);&#x0A;         myNtfSeqNbrCounter = new Long(result.longValue());&#x0A;     }&#x0A;     return result;&#x0A; }&#x0A;&lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MSOUF">
    <name>Sync On Updated Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method synchronizes on an object&#x0A;   referenced from a mutable field.&#x0A;   This is unlikely to have useful semantics, since different&#x0A;threads may be synchronizing on different objects.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "MSSIF">
    <name>Suspect Servlet Instance Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This class extends from a Servlet class, and uses an instance member variable. Since only&#x0A;    one instance of a Servlet class is created by the J2EE framework, and used in a&#x0A;    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider&#x0A;    only using method local variables.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "MtSSIF">
    <name>Suspect Struts Instance Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This class extends from a Struts Action class, and uses an instance member variable. Since only&#x0A;    one instance of a struts Action class is created by the Struts framework, and used in a&#x0A;    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider&#x0A;    only using method local variables. Only instance fields that are written outside of a monitor&#x0A;    are reported.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NAMBN">
    <name>Argument Might Be Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    A parameter to this method has been identified as a value that should&#x0A;    always be checked to see whether or not it is null, but it is being dereferenced&#x0A;    without a preceding null check.&#x0A;      &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NAN">
    <name>Always Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A null pointer is dereferenced here.&amp;nbsp; This will lead to a&#x0A;&lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NANE">
    <name>Always Null Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A pointer which is null on an exception path is dereferenced here.&amp;nbsp;&#x0A;This will lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&amp;nbsp;&#x0A;Note that because FindBugs currently does not prune infeasible exception paths,&#x0A;this may be a false warning.&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt; Also note that FindBugs considers the default case of a switch statement to&#x0A;be an exception path, since the default case is often infeasible.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NBE">
    <name>Bad Equal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a method &lt;code&gt;equal(Object)&lt;/code&gt;.&amp;nbsp; This method does&#x0A;not override the &lt;code&gt;equals(Object)&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;,&#x0A;which is probably what was intended.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NBRN">
    <name>Boolean Return Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.&#x0A;    This method can be invoked as though it returned a value of type boolean, and&#x0A;    the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,&#x0A;    this will result in a NullPointerException.&#x0A;       &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NC">
    <name>Confusing</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The referenced methods have names that differ only by capitalization.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NCN">
    <name>Closing Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; close() is being invoked on a value that is always null. If this statement is executed,&#x0A;a null pointer exception will occur. But the big risk here you never close&#x0A;something that should be closed.</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "NCNE">
    <name>Class Not Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class is not derived from another exception, but ends with &apos;Exception&apos;. This will&#x0A;be confusing to users of this class.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NDNSC">
    <name>Dangerous Non Short Circuit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code seems to be using non-short-circuit logic (e.g., &amp;amp;&#x0A;or |)&#x0A;rather than short-circuit logic (&amp;amp;&amp;amp; or ||). In addition,&#x0A;it seem possible that, depending on the value of the left hand side, you might not&#x0A;want to evaluate the right hand side (because it would have side effects, could cause an exception&#x0A;or could be expensive.&lt;/p&gt;&#x0A;&lt;p&gt;&#x0A;Non-short-circuit logic causes both sides of the expression&#x0A;to be evaluated even when the result can be inferred from&#x0A;knowing the left-hand side. This can be less efficient and&#x0A;can result in errors if the left-hand side guards cases&#x0A;when evaluating the right-hand side can generate an error.&#x0A;&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;See &lt;a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2&quot;&gt;the Java&#x0A;Language Specification&lt;/a&gt; for details&#x0A;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NDORV">
    <name>Dereference Of Readline Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text&#x0A;to read, readLine() will return null and dereferencing that will generate a null pointer exception.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NFKUAI">
    <name>Future Keyword Used As Identifier</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed&#x0A;in order to compile it in later versions of Java.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NFKUAMI">
    <name>Future Keyword Used As Member Identifier</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This identifier is used as a keyword in later versions of Java. This code, and&#x0A;any code that references this API,&#x0A;will need to be changed in order to compile it in later versions of Java.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NFNC">
    <name>Field Naming Convention</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NGD">
    <name>Guaranteed Deref</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;              There is a statement or branch that if executed guarantees that&#x0A;              a value is null at this point, and that&#x0A;              value that is guaranteed to be dereferenced&#x0A;              (except on forward paths involving runtime exceptions).&#x0A;              &lt;/p&gt;&#x0A;        &lt;p&gt;Note that a check such as&#x0A;            &lt;code&gt;if (x == null) throw new NullPointerException();&lt;/code&gt;&#x0A;            is treated as a dereference of &lt;code&gt;x&lt;/code&gt;.</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "NGDOEP">
    <name>Guaranteed Deref On Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;              There is a statement or branch on an exception path&#x0A;                that if executed guarantees that&#x0A;              a value is null at this point, and that&#x0A;              value that is guaranteed to be dereferenced&#x0A;              (except on forward paths involving runtime exceptions).&#x0A;              &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NIDOR">
    <name>Immediate Dereference Of Readline</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The result of invoking readLine() is immediately dereferenced. If there are no more lines of text&#x0A;to read, readLine() will return null and dereferencing that will generate a null pointer exception.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NLOKNV">
    <name>Load Of Known Null Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The variable referenced at this point is known to be null due to an earlier&#x0A;   check against null. Although this is valid, it might be a mistake (perhaps you&#x0A;intended to refer to a different variable, or perhaps the earlier check to see if the&#x0A;variable is null should have been a check to see if it was nonnull).&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NLT">
    <name>Lcase Tostring</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a method called &lt;code&gt;tostring()&lt;/code&gt;.&amp;nbsp; This method&#x0A;  does not override the &lt;code&gt;toString()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;,&#x0A;  which is probably what was intended.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NMPTA">
    <name>Method Parameter Tightens Annotation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter&#x0A;    that is marked as @Nullable, you shouldn&apos;t override that method in a subclass with a method where that parameter is @Nonnull.&#x0A;    Doing so violates the contract that the method should handle a null parameter.&#x0A;        &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NMRRA">
    <name>Method Return Relaxing Annotation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;        A method should always implement the contract of a method it overrides. Thus, if a method takes is annotated&#x0A;    as returning a @Nonnull value,&#x0A;    you shouldn&apos;t override that method in a subclass with a method annotated as returning a @Nullable or @CheckForNull value.&#x0A;    Doing so violates the contract that the method shouldn&apos;t return null.&#x0A;        &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NNFNIIC">
    <name>Nonnull Field Not Initialized In Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The field is marked as nonnull, but isn&apos;t written to by the constructor.&#x0A;    The field might be initialized elsewhere during constructor, or might always&#x0A;    be initialized before use.&#x0A;       &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNI">
    <name>Null Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This instanceof test will always return false, since the value being checked is guaranteed to be null.&#x0A;Although this is safe, make sure it isn&apos;t&#x0A;an indication of some misunderstanding or some other logic error.&#x0A;&lt;/p&gt;</description>
    <priority>BLOCKER</priority>
  </rule>
  <rule key = "NNN">
    <name>Naked Notify</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A call to &lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()&lt;/code&gt;&#x0A;  was made without any (apparent) accompanying&#x0A;  modification to mutable object state.&amp;nbsp; In general, calling a notify&#x0A;  method on a monitor is done because some condition another thread is&#x0A;  waiting for has become true.&amp;nbsp; However, for the condition to be meaningful,&#x0A;  it must involve a heap object that is visible to both threads.&lt;/p&gt;&#x0A;&#x0A;  &lt;p&gt; This bug does not necessarily indicate an error, since the change to&#x0A;  mutable object state may have taken place in a method which then called&#x0A;  the method containing the notification.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNNN">
    <name>Notify Not Notifyall</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method calls &lt;code&gt;notify()&lt;/code&gt; rather than &lt;code&gt;notifyAll()&lt;/code&gt;.&amp;nbsp;&#x0A;  Java monitors are often used for multiple conditions.&amp;nbsp; Calling &lt;code&gt;notify()&lt;/code&gt;&#x0A;  only wakes up one thread, meaning that the thread woken up might not be the&#x0A;  one waiting for the condition that the caller just satisfied.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNOSP">
    <name>Null On Some Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt;  guarantees that&#x0A;a null value will be dereferenced, which&#x0A;would generate a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&#x0A;Of course, the problem might be that the branch or statement is infeasible and that&#x0A;the null pointer exception can&apos;t ever be executed; deciding that is beyond the ability of FindBugs.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNOSPE">
    <name>Null On Some Path Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A reference value which is null on some exception control path is&#x0A;dereferenced here.&amp;nbsp; This may lead to a &lt;code&gt;NullPointerException&lt;/code&gt;&#x0A;when the code is executed.&amp;nbsp;&#x0A;Note that because FindBugs currently does not prune infeasible exception paths,&#x0A;this may be a false warning.&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt; Also note that FindBugs considers the default case of a switch statement to&#x0A;be an exception path, since the default case is often infeasible.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNOSPFRV">
    <name>Null On Some Path From Return Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The return value from a method is dereferenced without a null check,&#x0A;and the return value of that method is one that should generally be checked&#x0A;for null.  This may lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNOSPMBI">
    <name>Null On Some Path Might Be Infeasible</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt;  guarantees that&#x0A;a null value will be dereferenced, which&#x0A;would generate a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&#x0A;Of course, the problem might be that the branch or statement is infeasible and that&#x0A;the null pointer exception can&apos;t ever be executed; deciding that is beyond the ability of FindBugs.&#x0A;Due to the fact that this value had been previously tested for nullness,&#x0A;this is a definite possibility.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNPD">
    <name>Null Param Deref</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method call passes a null value for a nonnull method parameter.&#x0A;    Either the parameter is annotated as a parameter that should&#x0A;    always be nonnull, or analysis has shown that it will always be&#x0A;    dereferenced.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNPDATD">
    <name>Null Param Deref All Targets Dangerous</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      A possibly-null value is passed at a call site where all known&#x0A;      target methods require the parameter to be nonnull.&#x0A;    Either the parameter is annotated as a parameter that should&#x0A;    always be nonnull, or analysis has shown that it will always be&#x0A;    dereferenced.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNPDN">
    <name>Null Param Deref Nonvirtual</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      A possibly-null value is passed to a nonnull method parameter.&#x0A;    Either the parameter is annotated as a parameter that should&#x0A;    always be nonnull, or analysis has shown that it will always be&#x0A;    dereferenced.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNPV">
    <name>Nonnull Param Violation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method passes a null value as the parameter of a method which&#x0A;    must be nonnull. Either this parameter has been explicitly marked&#x0A;    as @Nonnull, or analysis has determined that this parameter is&#x0A;    always dereferenced.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNRV">
    <name>Nonnull Return Violation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method may return a null value, but the method (or a superclass method&#x0A;      which it overrides) is declared to return @NonNull.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NNSC">
    <name>Non Short Circuit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code seems to be using non-short-circuit logic (e.g., &amp;amp;&#x0A;or |)&#x0A;rather than short-circuit logic (&amp;amp;&amp;amp; or ||).&#x0A;Non-short-circuit logic causes both sides of the expression&#x0A;to be evaluated even when the result can be inferred from&#x0A;knowing the left-hand side. This can be less efficient and&#x0A;can result in errors if the left-hand side guards cases&#x0A;when evaluating the right-hand side can generate an error.&#x0A;&#x0A;&lt;p&gt;See &lt;a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2&quot;&gt;the Java&#x0A;Language Specification&lt;/a&gt; for details&#x0A;&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NORN">
    <name>Optional Return Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    The usage of Optional return type always mean that explicit null returns were not desired by design.&#x0A;    Returning a null value in such case is a contract violation and will most likely break clients code.&#x0A;       &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NPMBNBMAN">
    <name>Parameter Must Be Nonnull But Marked As Nullable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This parameter is always used in a way that requires it to be nonnull,&#x0A;but the parameter is explicitly annotated as being Nullable. Either the use&#x0A;of the parameter or the annotation is wrong.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NSANCF">
    <name>Sync And Null Check Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Since the field is synchronized on, it seems not likely to be null.&#x0A;If it is null and then synchronized on a NullPointerException will be&#x0A;thrown and the check would be pointless. Better to synchronize on&#x0A;another field.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NSINF">
    <name>Store Into Nonnull Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A value that could be null is stored into a field that has been annotated as NonNull. &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NSSNAI">
    <name>Same Simple Name As Interface</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class/interface has a simple name that is identical to that of an implemented/extended interface, except&#x0A;that the interface is in a different package (e.g., &lt;code&gt;alpha.Foo&lt;/code&gt; extends &lt;code&gt;beta.Foo&lt;/code&gt;).&#x0A;This can be exceptionally confusing, create lots of situations in which you have to look at import statements&#x0A;to resolve references and creates many&#x0A;opportunities to accidently define methods that do not override methods in their superclasses.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NSSNAS">
    <name>Same Simple Name As Superclass</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class has a simple name that is identical to that of its superclass, except&#x0A;that its superclass is in a different package (e.g., &lt;code&gt;alpha.Foo&lt;/code&gt; extends &lt;code&gt;beta.Foo&lt;/code&gt;).&#x0A;This can be exceptionally confusing, create lots of situations in which you have to look at import statements&#x0A;to resolve references and creates many&#x0A;opportunities to accidently define methods that do not override methods in their superclasses.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NTCRN">
    <name>Tostring Could Return Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This toString method seems to return null in some circumstances. A liberal reading of the&#x0A;    spec could be interpreted as allowing this, but it is probably a bad idea and could cause&#x0A;    other code to break. Return the empty string or some other appropriate string rather than null.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "NUF">
    <name>Unwritten Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The program is dereferencing a field that does not seem to ever have a non-null value written to it.&#x0A;Unless the field is initialized via some mechanism not seen by the analysis,&#x0A;dereferencing this value will generate a null pointer exception.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NUPOPF">
    <name>Unwritten Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The program is dereferencing a public or protected&#x0A;field that does not seem to ever have a non-null value written to it.&#x0A;Unless the field is initialized via some mechanism not seen by the analysis,&#x0A;dereferencing this value will generate a null pointer exception.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NVC">
    <name>Very Confusing</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The referenced methods have names that differ only by capitalization.&#x0A;This is very confusing because if the capitalization were&#x0A;identical then one of the methods would override the other.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NVCI">
    <name>Very Confusing Intentional</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The referenced methods have names that differ only by capitalization.&#x0A;This is very confusing because if the capitalization were&#x0A;identical then one of the methods would override the other. From the existence of other methods, it&#x0A;seems that the existence of both of these methods is intentional, but is sure is confusing.&#x0A;You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NWP">
    <name>Wrong Package</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method in the subclass doesn&apos;t override a similar method in a superclass because the type of a parameter doesn&apos;t exactly match&#x0A;the type of the corresponding parameter in the superclass. For example, if you have:&lt;/p&gt;&#x0A;&#x0A;&lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;import alpha.Foo;&#x0A;public class A {&#x0A;  public int f(Foo x) { return 17; }&#x0A;}&#x0A;----&#x0A;import beta.Foo;&#x0A;public class B extends A {&#x0A;  public int f(Foo x) { return 42; }&#x0A;}&#x0A;&lt;/pre&gt;&#x0A;&lt;/blockquote&gt;&#x0A;&#x0A;&lt;p&gt;The &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;B&lt;/code&gt; doesn&apos;t&#x0A;override the&#x0A;&lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;A&lt;/code&gt;, because the argument&#x0A;types are &lt;code&gt;Foo&lt;/code&gt;&apos;s from different packages.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "NWPI">
    <name>Wrong Package Intentional</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method in the subclass doesn&apos;t override a similar method in a superclass because the type of a parameter doesn&apos;t exactly match&#x0A;the type of the corresponding parameter in the superclass. For example, if you have:&lt;/p&gt;&#x0A;&#x0A;&lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;import alpha.Foo;&#x0A;public class A {&#x0A;  public int f(Foo x) { return 17; }&#x0A;}&#x0A;----&#x0A;import beta.Foo;&#x0A;public class B extends A {&#x0A;  public int f(Foo x) { return 42; }&#x0A;  public int f(alpha.Foo x) { return 27; }&#x0A;}&#x0A;&lt;/pre&gt;&#x0A;&lt;/blockquote&gt;&#x0A;&#x0A;&lt;p&gt;The &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;B&lt;/code&gt; doesn&apos;t&#x0A;override the&#x0A;&lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;A&lt;/code&gt;, because the argument&#x0A;types are &lt;code&gt;Foo&lt;/code&gt;&apos;s from different packages.&#x0A;&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;In this case, the subclass does define a method with a signature identical to the method in the superclass,&#x0A;so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider&#x0A;removing or deprecating the method with the similar but not identical signature.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "OODR">
    <name>Open Database Resource</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method creates a database resource (such as a database connection&#x0A;or row set), does not assign it to any&#x0A;fields, pass it to other methods, or return it, and does not appear to close&#x0A;the object on all paths out of the method.&amp;nbsp; Failure to&#x0A;close database resources on all paths out of a method may&#x0A;result in poor performance, and could cause the application to&#x0A;have problems communicating with the database.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "OODREP">
    <name>Open Database Resource Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method creates a database resource (such as a database connection&#x0A;or row set), does not assign it to any&#x0A;fields, pass it to other methods, or return it, and does not appear to close&#x0A;the object on all exception paths out of the method.&amp;nbsp; Failure to&#x0A;close database resources on all paths out of a method may&#x0A;result in poor performance, and could cause the application to&#x0A;have problems communicating with the database.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "OOS">
    <name>Open Stream</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method creates an IO stream object, does not assign it to any&#x0A;fields, pass it to other methods that might close it,&#x0A;or return it, and does not appear to close&#x0A;the stream on all paths out of the method.&amp;nbsp; This may result in&#x0A;a file descriptor leak.&amp;nbsp; It is generally a good&#x0A;idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are&#x0A;closed.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "OOSEP">
    <name>Open Stream Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method creates an IO stream object, does not assign it to any&#x0A;fields, pass it to other methods, or return it, and does not appear to close&#x0A;it on all possible exception paths out of the method.&amp;nbsp;&#x0A;This may result in a file descriptor leak.&amp;nbsp; It is generally a good&#x0A;idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are&#x0A;closed.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "PAPT">
    <name>Absolute Path Traversal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,&#x0A;but it does not properly neutralize absolute path sequences such as &quot;/abs/path&quot; that can resolve to a location that is outside of that directory.&#x0A;&#x0A;See &lt;a href=&quot;http://cwe.mitre.org/data/definitions/36.html&quot;&gt;http://cwe.mitre.org/data/definitions/36.html&lt;/a&gt;&#x0A;for more information.&lt;/p&gt;&#x0A;&lt;p&gt;FindBugs looks only for the most blatant, obvious cases of absolute path traversal.&#x0A;If FindBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more&#x0A;vulnerabilities that FindBugs doesn&apos;t report. If you are concerned about absolute path traversal, you should seriously&#x0A;consider using a commercial static analysis or pen-testing tool.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "PDREOII">
    <name>Dont Reuse Entry Objects In Iterators</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The entrySet() method is allowed to return a view of the&#x0A;     underlying Map in which an Iterator and Map.Entry. This clever&#x0A;     idea was used in several Map implementations, but introduces the possibility&#x0A;     of nasty coding mistakes. If a map &lt;code&gt;m&lt;/code&gt; returns&#x0A;     such an iterator for an entrySet, then&#x0A;     &lt;code&gt;c.addAll(m.entrySet())&lt;/code&gt; will go badly wrong. All of&#x0A;     the Map implementations in OpenJDK 1.7 have been rewritten to avoid this,&#x0A;     you should to.&#x0A;    &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "PPS">
    <name>Public Semaphores</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this&#x0A;    reference). Client classes that use this class, may, in addition, use an instance of this class&#x0A;    as a synchronizing object. Because two classes are using the same object for synchronization,&#x0A;    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on&#x0A;    a public reference. Consider using a internal private member variable to control synchronization.&#x0A;    &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "PPZLA">
    <name>Prefer Zero Length Arrays</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; It is often a better design to&#x0A;return a length zero array rather than a null reference to indicate that there&#x0A;are no results (i.e., an empty list of results).&#x0A;This way, no explicit check for null is needed by clients of the method.&lt;/p&gt;&#x0A;&#x0A;&lt;p&gt;On the other hand, using null to indicate&#x0A;&quot;there is no answer to this question&quot; is probably appropriate.&#x0A;For example, &lt;code&gt;File.listFiles()&lt;/code&gt; returns an empty list&#x0A;if given a directory containing no files, and returns null if the file&#x0A;is not a directory.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "PRPT">
    <name>Relative Path Traversal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as &quot;..&quot; that can resolve to a location that is outside of that directory.&#x0A;&#x0A;See &lt;a href=&quot;http://cwe.mitre.org/data/definitions/23.html&quot;&gt;http://cwe.mitre.org/data/definitions/23.html&lt;/a&gt;&#x0A;for more information.&lt;/p&gt;&#x0A;&lt;p&gt;FindBugs looks only for the most blatant, obvious cases of relative path traversal.&#x0A;If FindBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more&#x0A;vulnerabilities that FindBugs doesn&apos;t report. If you are concerned about relative path traversal, you should seriously&#x0A;consider using a commercial static analysis or pen-testing tool.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "QQBA">
    <name>Questionable Boolean Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method assigns a literal boolean value (true or false) to a boolean variable inside&#x0A;      an if or while expression. Most probably this was supposed to be a boolean comparison using&#x0A;      ==, not an assignment using =.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "QQFL">
    <name>Questionable For Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Are you sure this for loop is incrementing the correct variable?&#x0A;   It appears that another variable is being initialized and checked&#x0A;   by the for loop.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "R0TI">
    <name>01 To Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A random value from 0 to 1 is being coerced to the integer value 0. You probably&#x0A;want to multiple the random value by something else before coercing it to an integer, or use the &lt;code&gt;Random.nextInt(n)&lt;/code&gt; method.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RAVOH">
    <name>Absolute Value Of Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code generates a hashcode and then computes&#x0A;the absolute value of that hashcode.  If the hashcode&#x0A;is &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, then the result will be negative as well (since&#x0A;&lt;code&gt;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE&lt;/code&gt;).&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;One out of 2^32 strings have a hashCode of Integer.MIN_VALUE,&#x0A;including &quot;polygenelubricants&quot; &quot;GydZG_&quot; and &quot;&quot;DESIGNING WORKHOUSES&quot;.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RAVORI">
    <name>Absolute Value Of Random Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code generates a random signed integer and then computes&#x0A;the absolute value of that random integer.  If the number returned by the random number&#x0A;generator is &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, then the result will be negative as well (since&#x0A;&lt;code&gt;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE&lt;/code&gt;). (Same problem arised for long values as well).&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RBSFRE">
    <name>Bad Syntax For Regular Expression</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code here uses a regular expression that is invalid according to the syntax&#x0A;for regular expressions. This statement will throw a PatternSyntaxException when&#x0A;executed.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RCCFSRV">
    <name>Check Compareto For Specific Return Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code invoked a compareTo or compare method, and checks to see if the return value is a specific value,&#x0A;such as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific&#x0A;non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them&#x0A;will return other values.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RCE">
    <name>Catch Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;  This method uses a try-catch block that catches Exception objects, but Exception is not&#x0A;  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to&#x0A;  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception&#x0A;  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,&#x0A;  masking potential bugs.&#x0A;  &lt;/p&gt;&#x0A;  &lt;p&gt;A better approach is to either explicitly catch the specific exceptions that are thrown,&#x0A;  or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:&lt;/p&gt;&#x0A;  &lt;pre&gt;&#x0A;  try {&#x0A;    ...&#x0A;  } catch (RuntimeException e) {&#x0A;    throw e;&#x0A;  } catch (Exception e) {&#x0A;    ... deal with all non-runtime exceptions ...&#x0A;  }&lt;/pre&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RCFPI">
    <name>Check For Positive Indexof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The method invokes String.indexOf and checks to see if the result is positive or non-positive.&#x0A;   It is much more typical to check to see if the result is negative or non-negative. It is&#x0A;   positive only if the substring checked for occurs at some place other than at the beginning of&#x0A;   the String.&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "RCUFSARE">
    <name>Cant Use File Separator As Regular Expression</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The code here uses &lt;code&gt;File.separator&lt;/code&gt;&#x0A;where a regular expression is required. This will fail on Windows&#x0A;platforms, where the &lt;code&gt;File.separator&lt;/code&gt; is a backslash, which is interpreted in a&#x0A;regular expression as an escape character. Amoung other options, you can just use&#x0A;&lt;code&gt;File.separatorChar==&apos;\\&apos; ? &quot;\\\\&quot; : File.separator&lt;/code&gt; instead of&#x0A;&lt;code&gt;File.separator&lt;/code&gt;&#x0A;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RDJNCR">
    <name>Dont Just Null Check Readline</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The value returned by readLine is discarded after checking to see if the return&#x0A;value is non-null. In almost all situations, if the result is non-null, you will want&#x0A;to use that non-null value. Calling readLine again will give you a different line.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RENT">
    <name>Exception Not Thrown</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code creates an exception (or error) object, but doesn&apos;t do anything with it. For example,&#x0A;something like &lt;/p&gt;&#x0A;&lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;if (x &amp;lt; 0)&#x0A;  new IllegalArgumentException(&quot;x must be nonnegative&quot;);&#x0A;&lt;/pre&gt;&#x0A;&lt;/blockquote&gt;&#x0A;&lt;p&gt;It was probably the intent of the programmer to throw the created exception:&lt;/p&gt;&#x0A;&lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;if (x &amp;lt; 0)&#x0A;  throw new IllegalArgumentException(&quot;x must be nonnegative&quot;);&#x0A;&lt;/pre&gt;&#x0A;&lt;/blockquote&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RNC">
    <name>Not Checked</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method ignores the return value of one of the variants of&#x0A;  &lt;code&gt;java.io.InputStream.read()&lt;/code&gt; which can return multiple bytes.&amp;nbsp;&#x0A;  If the return value is not checked, the caller will not be able to correctly&#x0A;  handle the case where fewer bytes were read than the caller requested.&amp;nbsp;&#x0A;  This is a particularly insidious kind of bug, because in many programs,&#x0A;  reads from input streams usually do read the full amount of data requested,&#x0A;  causing the program to fail only sporadically.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RNROC">
    <name>Negating Result Of Compareto</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code negatives the return value of a compareTo or compare method.&#x0A;This is a questionable or bad programming practice, since if the return&#x0A;value is Integer.MIN_VALUE, negating the return value won&apos;t&#x0A;negate the sign of the result. You can achieve the same intended result&#x0A;by reversing the order of the operands rather than by negating the results.&#x0A;&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "RPUP">
    <name>Possible Unintended Pattern</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;A String function is being invoked and &quot;.&quot; or &quot;|&quot; is being passed&#x0A;to a parameter that takes a regular expression as an argument. Is this what you intended?&#x0A;For example&#x0A;&lt;li&gt;s.replaceAll(&quot;.&quot;, &quot;/&quot;) will return a String in which &lt;em&gt;every&lt;/em&gt; character has been replaced by a &apos;/&apos; character&#x0A;&lt;li&gt;s.split(&quot;.&quot;) &lt;em&gt;always&lt;/em&gt; returns a zero length array of String&#x0A;&lt;li&gt;&quot;ab|cd&quot;.replaceAll(&quot;|&quot;, &quot;/&quot;) will return &quot;/a/b/|/c/d/&quot;&#x0A;&lt;li&gt;&quot;ab|cd&quot;.split(&quot;|&quot;) will return array with six (!) elements: [, a, b, |, c, d]&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRC">
    <name>Ref Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares two reference values using the == or != operator,&#x0A;where the correct way to compare instances of this type is generally&#x0A;with the equals() method.&#x0A;It is possible to create distinct instances that are equal but do not compare as == since&#x0A;they are different objects.&#x0A;Examples of classes which should generally&#x0A;not be compared by reference are java.lang.Integer, java.lang.Float, etc.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRCBP">
    <name>Ref Comparison Bad Practice</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares a reference value to a constant using the == or != operator,&#x0A;where the correct way to compare instances of this type is generally&#x0A;with the equals() method.&#x0A;It is possible to create distinct instances that are equal but do not compare as == since&#x0A;they are different objects.&#x0A;Examples of classes which should generally&#x0A;not be compared by reference are java.lang.Integer, java.lang.Float, etc.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RRCBPB">
    <name>Ref Comparison Bad Practice Boolean</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares two Boolean values using the == or != operator.&#x0A;Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE),&#x0A;but it is possible to create other Boolean objects using the &lt;code&gt;new Boolean(b)&lt;/code&gt;&#x0A;constructor. It is best to avoid such objects, but if they do exist,&#x0A;then checking Boolean objects for equality using == or != will give results&#x0A;than are different than you would get using &lt;code&gt;.equals(...)&lt;/code&gt;&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RRCONANV">
    <name>Redundant Comparison Of Null And Nonnull Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a reference known to be non-null with another reference&#x0A;known to be null.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRCT">
    <name>Repeated Conditional Test</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code contains a conditional test is performed twice, one right after the other&#x0A;(e.g., &lt;code&gt;x == 0 || x == 0&lt;/code&gt;). Perhaps the second occurrence is intended to be something else&#x0A;(e.g., &lt;code&gt;x == 0 || y == 0&lt;/code&gt;).&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RRCTNV">
    <name>Redundant Comparison Two Null Values</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a redundant comparison of two references known to&#x0A;both be definitely null.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRI">
    <name>Redundant Interfaces</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;    This class declares that it implements an interface that is also implemented by a superclass.&#x0A;    This is redundant because once a superclass implements an interface, all subclasses by default also&#x0A;    implement this interface. It may point out that the inheritance hierarchy has changed since&#x0A;    this class was created, and consideration should be given to the ownership of&#x0A;    the interface&apos;s implementation.&#x0A;    &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RRNONV">
    <name>Redundant Nullcheck Of Nonnull Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a redundant check of a known non-null value against&#x0A;the constant null.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRNWHBAN">
    <name>Redundant Nullcheck Would Have Been A Npe</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A value is checked here to see whether it is null, but this value can&apos;t&#x0A;be null because it was previously dereferenced and if it were null a null pointer&#x0A;exception would have occurred at the earlier dereference.&#x0A;Essentially, this code and the previous dereference&#x0A;disagree as to whether this value is allowed to be null. Either the check is redundant&#x0A;or the previous dereference is erroneous.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RROH">
    <name>Rem Of Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code computes a hashCode, and then computes&#x0A;the remainder of that value modulo another value. Since the hashCode&#x0A;can be negative, the result of the remainder operation&#x0A;can also be negative. &lt;/p&gt;&#x0A;&lt;p&gt; Assuming you want to ensure that the result of your computation is nonnegative,&#x0A;you may need to change your code.&#x0A;If you know the divisor is a power of 2,&#x0A;you can use a bitwise and operator instead (i.e., instead of&#x0A;using &lt;code&gt;x.hashCode()%n&lt;/code&gt;, use &lt;code&gt;x.hashCode()&amp;amp;(n-1)&lt;/code&gt;.&#x0A;This is probably faster than computing the remainder as well.&#x0A;If you don&apos;t know that the divisor is a power of 2, take the absolute&#x0A;value of the result of the remainder operation (i.e., use&#x0A;&lt;code&gt;Math.abs(x.hashCode()%n)&lt;/code&gt;&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRORI">
    <name>Rem Of Random Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This code generates a random signed integer and then computes&#x0A;the remainder of that value modulo another value. Since the random&#x0A;number can be negative, the result of the remainder operation&#x0A;can also be negative. Be sure this is intended, and strongly&#x0A;consider using the Random.nextInt(int) method instead.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRS">
    <name>Readobject Sync</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This serializable class defines a &lt;code&gt;readObject()&lt;/code&gt; which is&#x0A;  synchronized.&amp;nbsp; By definition, an object created by deserialization&#x0A;  is only reachable by one thread, and thus there is no need for&#x0A;  &lt;code&gt;readObject()&lt;/code&gt; to be synchronized.&amp;nbsp; If the &lt;code&gt;readObject()&lt;/code&gt;&#x0A;  method itself is causing the object to become visible to another thread,&#x0A;  that is an example of very dubious coding style.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "RRVI">
    <name>Return Value Ignored</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The return value of this method should be checked. One common&#x0A;cause of this warning is to invoke a method on an immutable object,&#x0A;thinking that it updates the object. For example, in the following code&#x0A;fragment,&lt;/p&gt;&#x0A;&lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;String dateString = getHeaderField(name);&#x0A;dateString.trim();&#x0A;&lt;/pre&gt;&#x0A;&lt;/blockquote&gt;&#x0A;&lt;p&gt;the programmer seems to be thinking that the trim() method will update&#x0A;the String referenced by dateString. But since Strings are immutable, the trim()&#x0A;function returns a new String value, which is being ignored here. The code&#x0A;should be corrected to: &lt;/p&gt;&#x0A;&lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;String dateString = getHeaderField(name);&#x0A;dateString = dateString.trim();&#x0A;&lt;/pre&gt;&#x0A;&lt;/blockquote&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "RRVIBP">
    <name>Return Value Ignored Bad Practice</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method returns a value that is not checked. The return value should be checked&#x0A;since it can indicate an unusual or unexpected function execution. For&#x0A;example, the &lt;code&gt;File.delete()&lt;/code&gt; method returns false&#x0A;if the file could not be successfully deleted (rather than&#x0A;throwing an Exception).&#x0A;If you don&apos;t check the result, you won&apos;t notice if the method invocation&#x0A;signals unexpected behavior by returning an atypical return value.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RRVII">
    <name>Return Value Ignored Inferred</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code calls a method and ignores the return value. The return value&#x0A;is the same type as the type the method is invoked on, and from our analysis it looks&#x0A;like the return value might be important (e.g., like ignoring the&#x0A;return value of &lt;code&gt;String.toLowerCase()&lt;/code&gt;).&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;We are guessing that ignoring the return value might be a bad idea just from&#x0A;a simple analysis of the body of the method. You can use a @CheckReturnValue annotation&#x0A;to instruct FindBugs as to whether ignoring the return value of this method&#x0A;is important or acceptable.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;Please investigate this closely to decide whether it is OK to ignore the return value.&#x0A;&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "RRVOPI">
    <name>Return Value Of Putifabsent Ignored</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;The &lt;code&gt;putIfAbsent&lt;/code&gt; method is typically used to ensure that a&#x0A;        single value is associated with a given key (the first value for which put&#x0A;        if absent succeeds).&#x0A;        If you ignore the return value and retain a reference to the value passed in,&#x0A;        you run the risk of retaining a value that is not the one that is associated with the key in the map.&#x0A;        If it matters which one you use and you use the one that isn&apos;t stored in the map,&#x0A;        your program will behave incorrectly.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "RcRNONV">
    <name>Redundant Nullcheck Of Null Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a redundant check of a known null value against&#x0A;the constant null.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SBF">
    <name>Bad Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This Serializable class defines a non-primitive instance field which is neither transient,&#x0A;Serializable, or &lt;code&gt;java.lang.Object&lt;/code&gt;, and does not appear to implement&#x0A;the &lt;code&gt;Externalizable&lt;/code&gt; interface or the&#x0A;&lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt; methods.&amp;nbsp;&#x0A;Objects of this class will not be deserialized correctly if a non-Serializable&#x0A;object is stored in this field.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SBFIC">
    <name>Bad Field Inner Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This Serializable class is an inner class of a non-serializable class.&#x0A;Thus, attempts to serialize it will also attempt to associate instance of the outer&#x0A;class with which it is associated, leading to a runtime error.&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;If possible, making the inner class a static inner class should solve the&#x0A;problem. Making the outer class serializable might also work, but that would&#x0A;mean serializing an instance of the inner class would always also serialize the instance&#x0A;of the outer class, which it often not what you really want.</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "SBFS">
    <name>Bad Field Store</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A non-serializable value is stored into a non-transient field&#x0A;of a serializable class.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SBPSA">
    <name>Bad Prepared Statement Access</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A call to a setXXX method of a prepared statement was made where the&#x0A;parameter index is 0. As parameter indexes start at index 1, this is always a mistake.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SBRA">
    <name>Bad Resultset Access</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A call to getXXX or updateXXX methods of a result set was made where the&#x0A;field index is 0. As ResultSet fields start at index 1, this is always a mistake.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SCSBS">
    <name>Comparator Should Be Serializable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class implements the &lt;code&gt;Comparator&lt;/code&gt; interface. You&#x0A;should consider whether or not it should also implement the &lt;code&gt;Serializable&lt;/code&gt;&#x0A;interface. If a comparator is used to construct an ordered collection&#x0A;such as a &lt;code&gt;TreeMap&lt;/code&gt;, then the &lt;code&gt;TreeMap&lt;/code&gt;&#x0A;will be serializable only if the comparator is also serializable.&#x0A;As most comparators have little or no state, making them serializable&#x0A;is generally easy and good defensive programming.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SDSDTSF">
    <name>Dead Store Due To Switch Fallthrough</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that&#x0A;    you forgot to put a break or return at the end of the previous case.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SDSDTSFTT">
    <name>Dead Store Due To Switch Fallthrough To Throw</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; A value stored in the previous switch case is ignored here due to a switch fall through to a place where&#x0A;    an exception is thrown. It is likely that&#x0A;    you forgot to put a break or return at the end of the previous case.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SFDA">
    <name>Field Double Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a double assignment of a field; e.g.&#x0A;&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;  int x,y;&#x0A;  public void foo() {&#x0A;    x = x = 17;&#x0A;  }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;Assigning to a field twice is useless, and may indicate a logic error or typo.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SFSA">
    <name>Field Self Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a self assignment of a field; e.g.&#x0A;&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;  int x;&#x0A;  public void foo() {&#x0A;    x = x;&#x0A;  }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;Such assignments are useless, and may indicate a logic error or typo.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SFSC">
    <name>Field Self Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares a field with itself, and may indicate a typo or&#x0A;a logic error.  Make sure that you are comparing the right things.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SIBFA">
    <name>Instance Before Finals Assigned</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The class&apos;s static initializer creates an instance of the class&#x0A;before all of the static final fields are assigned.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SIC">
    <name>Inner Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This Serializable class is an inner class.  Any attempt to serialize&#x0A;it will also serialize the associated outer instance. The outer instance is serializable,&#x0A;so this won&apos;t fail, but it might serialize a lot more data than intended.&#x0A;If possible, making the inner class a static inner class (also known as a nested class) should solve the&#x0A;problem.</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SIOC">
    <name>Interrupted On Currentthread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a&#x0A;static method, is more simple and clear to use Thread.interrupted().&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SIOSCI">
    <name>Invoke On Static Calendar Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use.&#x0A;The detector has found a call to an instance of Calendar that has been obtained via a static&#x0A;field. This looks suspicous.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;Sun Bug #6231579&lt;/a&gt;&#x0A;and &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;Sun Bug #6178997&lt;/a&gt;.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SIOSDFI">
    <name>Invoke On Static Date Format Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.&#x0A;The detector has found a call to an instance of DateFormat that has been obtained via a static&#x0A;field. This looks suspicous.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;Sun Bug #6231579&lt;/a&gt;&#x0A;and &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;Sun Bug #6178997&lt;/a&gt;.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SIOU">
    <name>Interrupted On Unknownthread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is&#x0A;not the current thread. As the interrupted() method is static, the interrupted method will be called on a different&#x0A;object than the one the author intended.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SISBS">
    <name>Inner Should Be Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class is an inner class, but does not use its embedded reference&#x0A;  to the object which created it.&amp;nbsp; This reference makes the instances&#x0A;  of the class larger, and may keep the reference to the creator object&#x0A;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#x0A;   made static.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SISBSA">
    <name>Inner Should Be Static Anon</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class is an inner class, but does not use its embedded reference&#x0A;  to the object which created it.&amp;nbsp; This reference makes the instances&#x0A;  of the class larger, and may keep the reference to the creator object&#x0A;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#x0A;  made into a &lt;em&gt;static&lt;/em&gt; inner class. Since anonymous inner&#x0A;classes cannot be marked as static, doing this will require refactoring&#x0A;the inner class so that it is a named inner class.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SISBSNT">
    <name>Inner Should Be Static Needs This</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class is an inner class, but does not use its embedded reference&#x0A;  to the object which created it except during construction of the&#x0A;inner object.&amp;nbsp; This reference makes the instances&#x0A;  of the class larger, and may keep the reference to the creator object&#x0A;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#x0A;  made into a &lt;em&gt;static&lt;/em&gt; inner class. Since the reference to the&#x0A;   outer object is required during construction of the inner instance,&#x0A;   the inner class will need to be refactored so as to&#x0A;   pass a reference to the outer instance to the constructor&#x0A;   for the inner class.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SLDA">
    <name>Local Double Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a double assignment of a local variable; e.g.&#x0A;&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;  public void foo() {&#x0A;    int x,y;&#x0A;    x = x = 17;&#x0A;  }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SLSA">
    <name>Local Self Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a self assignment of a local variable; e.g.&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;  public void foo() {&#x0A;    int x = 3;&#x0A;    x = x;&#x0A;  }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;&#x0A;Such assignments are useless, and may indicate a logic error or typo.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SLSAIOF">
    <name>Local Self Assignment Instead Of Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a self assignment of a local variable, and there&#x0A;is a field with an identical name.&#x0A;assignment appears to have been ; e.g.&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;  int foo;&#x0A;  public void setFoo(int foo) {&#x0A;    foo = foo;&#x0A;  }&#x0A;&lt;/pre&gt;&#x0A;&lt;p&gt;The assignment is useless. Did you mean to assign to the field instead?&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SLSC">
    <name>Local Self Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method compares a local variable with itself, and may indicate a typo or&#x0A;a logic error.  Make sure that you are comparing the right things.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SMMBP">
    <name>Method Must Be Private</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface, and defines a method&#x0A;  for custom serialization/deserialization. But since that method isn&apos;t declared private,&#x0A;  it will be silently ignored by the serialization/deserialization API.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SNC">
    <name>Not Checked</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method ignores the return value of&#x0A;  &lt;code&gt;java.io.InputStream.skip()&lt;/code&gt; which can skip multiple bytes.&amp;nbsp;&#x0A;  If the return value is not checked, the caller will not be able to correctly&#x0A;  handle the case where fewer bytes were skipped than the caller requested.&amp;nbsp;&#x0A;  This is a particularly insidious kind of bug, because in many programs,&#x0A;  skips from input streams usually do skip the full amount of data requested,&#x0A;  causing the program to fail only sporadically. With Buffered streams, however,&#x0A;  skip() will only skip data in the buffer, and will routinely fail to skip the&#x0A;  requested number of bytes.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SNS">
    <name>Nonfinal Serialversionid</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not final.&amp;nbsp;&#x0A;  The field should be made final&#x0A;   if it is intended to specify&#x0A;   the version UID for purposes of serialization.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SNSC">
    <name>No Suitable Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface&#x0A;   and its superclass does not. When such an object is deserialized,&#x0A;   the fields of the superclass need to be initialized by&#x0A;   invoking the void constructor of the superclass.&#x0A;   Since the superclass does not have one,&#x0A;   serialization and deserialization will fail at runtime.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SNSCFE">
    <name>No Suitable Constructor For Externalization</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class implements the &lt;code&gt;Externalizable&lt;/code&gt; interface, but does&#x0A;  not define a void constructor. When Externalizable objects are deserialized,&#x0A;   they first need to be constructed by invoking the void&#x0A;   constructor. Since this class does not have one,&#x0A;   serialization and deserialization will fail at runtime.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SNSPTE">
    <name>Nonconstant String Passed To Execute</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method invokes the execute method on an SQL statement with a String that seems&#x0A;to be dynamically generated. Consider using&#x0A;a prepared statement instead. It is more efficient and less vulnerable to&#x0A;SQL injection attacks.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SPRRNI">
    <name>Private Read Resolve Not Inherited</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a private readResolve method. Since it is private, it won&apos;t be inherited by subclasses.&#x0A;This might be intentional and OK, but should be reviewed to ensure it is what is intended.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SPSGFNS">
    <name>Prepared Statement Generated From Nonconstant String</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code creates an SQL prepared statement from a nonconstant String.&#x0A;If unchecked, tainted data from a user is used in building this String, SQL injection could&#x0A;be used to make the prepared statement do something unexpected and undesirable.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SRRIS">
    <name>Read Resolve Is Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; In order for the readResolve method to be recognized by the serialization&#x0A;mechanism, it must not be declared as a static method.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SRRMRO">
    <name>Read Resolve Must Return Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; In order for the readResolve method to be recognized by the serialization&#x0A;mechanism, it must be declared to have a return type of Object.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SSBS">
    <name>Should Be Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class contains an instance final field that&#x0A;   is initialized to a compile-time static value.&#x0A;   Consider making the field static.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SSCI">
    <name>Static Calendar Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use.&#x0A;Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the&#x0A;application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see&#x0A;random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().&lt;/p&gt;&#x0A;&lt;p&gt;You may also experience serialization problems.&lt;/p&gt;&#x0A;&lt;p&gt;Using an instance field is recommended.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;Sun Bug #6231579&lt;/a&gt;&#x0A;and &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;Sun Bug #6178997&lt;/a&gt;.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SSI">
    <name>Superfluous Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Type check performed using the instanceof operator where it can be statically determined whether the object&#x0A;is of the type requested. &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SSIC">
    <name>Start In Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The constructor starts a thread. This is likely to be wrong if&#x0A;   the class is ever extended/subclassed, since the thread will be started&#x0A;   before the subclass constructor is started.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SSMIIST">
    <name>Swing Methods Invoked In Swing Thread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;(&lt;a href=&quot;http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html&quot;&gt;From JDC Tech Tip&lt;/a&gt;): The Swing methods&#x0A;show(), setVisible(), and pack() will create the associated peer for the frame.&#x0A;With the creation of the peer, the system creates the event dispatch thread.&#x0A;This makes things problematic because the event dispatch thread could be notifying&#x0A;listeners while pack and validate are still processing. This situation could result in&#x0A;two threads going through the Swing component-based GUI -- it&apos;s a serious flaw that&#x0A;could result in deadlocks or other related threading issues. A pack call causes&#x0A;components to be realized. As they are being realized (that is, not necessarily&#x0A;visible), they could trigger listener notification on the event dispatch thread.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SSOF">
    <name>Spin On Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method spins in a loop which reads a field.&amp;nbsp; The compiler&#x0A;  may legally hoist the read out of the loop, turning the code into an&#x0A;  infinite loop.&amp;nbsp; The class should be changed so it uses proper&#x0A;  synchronization (including wait and notify calls).&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SSSDFI">
    <name>Static Simple Date Format Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.&#x0A;Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the&#x0A;application.&lt;/p&gt;&#x0A;&lt;p&gt;You may also experience serialization problems.&lt;/p&gt;&#x0A;&lt;p&gt;Using an instance field is recommended.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;Sun Bug #6231579&lt;/a&gt;&#x0A;and &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;Sun Bug #6178997&lt;/a&gt;.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SSWLH">
    <name>Sleep With Lock Held</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method calls Thread.sleep() with a lock held.  This may result&#x0A;      in very poor performance and scalability, or a deadlock, since other threads may&#x0A;      be waiting to acquire the lock.  It is a much better idea to call&#x0A;      wait() on the lock, which releases the lock and allows other threads&#x0A;      to run.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "STDE">
    <name>Threadlocal Deadly Embrace</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class is an inner class, but should probably be a static inner class.&#x0A;  As it is, there is a serious danger of a deadly embrace between the inner class&#x0A;  and the thread local in the outer class. Because the inner class isn&apos;t static,&#x0A;  it retains a reference to the outer class.&#x0A;  If the thread local contains a reference to an instance of the inner&#x0A;  class, the inner and outer instance will both be reachable&#x0A;  and not eligible for garbage collection.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "STFNR">
    <name>Transient Field Not Restored</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any&#x0A;deserialized instance of the class.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "STFONC">
    <name>Transient Field Of Nonserializable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; The field is marked as transient, but the class isn&apos;t Serializable, so marking it as transient&#x0A;has absolutely no effect.&#x0A;This may be leftover marking from a previous version of the code in which the class was transient, or&#x0A;it may indicate a misunderstanding of how serialization works.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SWTSFIM">
    <name>Write To Static From Instance Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This instance method writes to a static field. This is tricky to get&#x0A;correct if multiple instances are being manipulated,&#x0A;and generally bad practice.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SaFSC">
    <name>Field Self Computation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method performs a nonsensical computation of a field with another&#x0A;reference to the same field (e.g., x&amp;x or x-x). Because of the nature&#x0A;of the computation, this operation doesn&apos;t seem to make sense,&#x0A;and may indicate a typo or&#x0A;a logic error.  Double check the computation.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SaLSC">
    <name>Local Self Computation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method performs a nonsensical computation of a local variable with another&#x0A;reference to the same variable (e.g., x&amp;x or x-x). Because of the nature&#x0A;of the computation, this operation doesn&apos;t seem to make sense,&#x0A;and may indicate a typo or&#x0A;a logic error.  Double check the computation.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "SeNS">
    <name>Nonlong Serialversionid</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not long.&amp;nbsp;&#x0A;  The field should be made long&#x0A;   if it is intended to specify&#x0A;   the version UID for purposes of serialization.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "SeNoS">
    <name>Nonstatic Serialversionid</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not static.&amp;nbsp;&#x0A;  The field should be made static&#x0A;   if it is intended to specify&#x0A;   the version UID for purposes of serialization.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "TAVUWNR">
    <name>Always Value Used Where Never Required</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;        A value specified as carrying a type qualifier annotation is&#x0A;        consumed in a location or locations requiring that the value not&#x0A;        carry that annotation.&#x0A;        &lt;/p&gt;&#x0A;&#x0A;        &lt;p&gt;&#x0A;        More precisely, a value annotated with a type qualifier specifying when=ALWAYS&#x0A;        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.&#x0A;        &lt;/p&gt;&#x0A;&#x0A;        &lt;p&gt;&#x0A;        For example, say that @NonNegative is a nickname for&#x0A;        the type qualifier annotation @Negative(when=When.NEVER).&#x0A;        The following code will generate this warning because&#x0A;        the return statement requires a @NonNegative value,&#x0A;        but receives one that is marked as @Negative.&#x0A;        &lt;/p&gt;&#x0A;        &lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;public @NonNegative Integer example(@Negative Integer value) {&#x0A;    return value;&#x0A;}&#x0A;&lt;/pre&gt;&#x0A;        &lt;/blockquote&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "TCVWITQ">
    <name>Comparing Values With Incompatible Type Qualifiers</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;        A value specified as carrying a type qualifier annotation is&#x0A;        compared with a value that doesn&apos;t ever carry that qualifier.&#x0A;        &lt;/p&gt;&#x0A;&#x0A;        &lt;p&gt;&#x0A;        More precisely, a value annotated with a type qualifier specifying when=ALWAYS&#x0A;        is compared with a value that where the same type qualifier specifies when=NEVER.&#x0A;        &lt;/p&gt;&#x0A;&#x0A;        &lt;p&gt;&#x0A;        For example, say that @NonNegative is a nickname for&#x0A;        the type qualifier annotation @Negative(when=When.NEVER).&#x0A;        The following code will generate this warning because&#x0A;        the return statement requires a @NonNegative value,&#x0A;        but receives one that is marked as @Negative.&#x0A;        &lt;/p&gt;&#x0A;        &lt;blockquote&gt;&#x0A;&lt;pre&gt;&#x0A;public boolean example(@Negative Integer value1, @NonNegative Integer value2) {&#x0A;    return value1.equals(value2);&#x0A;}&#x0A;&lt;/pre&gt;&#x0A;        &lt;/blockquote&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "TEUSVRAS">
    <name>Explicit Unknown Source Value Reaches Always Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but&#x0A;    there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.&#x0A;    Either the usage or the annotation is incorrect.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "TEUSVRNS">
    <name>Explicit Unknown Source Value Reaches Never Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but&#x0A;    there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.&#x0A;    Either the usage or the annotation is incorrect.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "TMSVRAS">
    <name>Maybe Source Value Reaches Always Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      A value that is annotated as possibility not being an instance of&#x0A;    the values denoted by the type qualifier, and the value is guaranteed to be used&#x0A;    in a way that requires values denoted by that type qualifier.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "TMSVRNS">
    <name>Maybe Source Value Reaches Never Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      A value that is annotated as possibility being an instance of&#x0A;    the values denoted by the type qualifier, and the value is guaranteed to be used&#x0A;    in a way that prohibits values denoted by that type qualifier.&#x0A;      &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "TNVUWAR">
    <name>Never Value Used Where Always Required</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;        A value specified as not carrying a type qualifier annotation is guaranteed&#x0A;        to be consumed in a location or locations requiring that the value does&#x0A;        carry that annotation.&#x0A;        &lt;/p&gt;&#x0A;&#x0A;        &lt;p&gt;&#x0A;        More precisely, a value annotated with a type qualifier specifying when=NEVER&#x0A;        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.&#x0A;        &lt;/p&gt;&#x0A;&#x0A;        &lt;p&gt;&#x0A;        TODO: example&#x0A;        &lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "TTLW">
    <name>Two Lock Wait</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; Waiting on a monitor while two locks are held may cause&#x0A;  deadlock.&#x0A;   &amp;nbsp;&#x0A;   Performing a wait only releases the lock on the object&#x0A;   being waited on, not any other locks.&#x0A;   &amp;nbsp;&#x0A;This not necessarily a bug, but is worth examining&#x0A;  closely.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "TUVUWASR">
    <name>Unknown Value Used Where Always Strictly Required</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;        A value is being used in a way that requires the value be annotation with a type qualifier.&#x0A;    The type qualifier is strict, so the tool rejects any values that do not have&#x0A;    the appropriate annotation.&#x0A;        &lt;/p&gt;&#x0A;&#x0A;        &lt;p&gt;&#x0A;        To coerce a value to have a strict annotation, define an identity function where the return value is annotated&#x0A;    with the strict annotation.&#x0A;    This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.&#x0A;        &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UFNIIC">
    <name>Field Not Initialized In Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This field is never initialized within any constructor, and is therefore could be null after&#x0A;the object is constructed. Elsewhere, it is loaded and dereferenced without a null check.&#x0A;This could be a either an error or a questionable design, since&#x0A;it means a null pointer exception will be generated if that field is dereferenced&#x0A;before being initialized.&#x0A;&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UIUG">
    <name>Inheritance Unsafe Getresource</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Calling &lt;code&gt;this.getClass().getResource(...)&lt;/code&gt; could give&#x0A;results other than expected if this class is extended by a class in&#x0A;another package.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UNF">
    <name>Null Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; All writes to this field are of the constant value null, and thus&#x0A;all reads of the field will return null.&#x0A;Check for errors, or remove it if it is useless.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "USSUG">
    <name>Sync Set Unsync Get</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class contains similarly-named get and set&#x0A;  methods where the set method is synchronized and the get method is not.&amp;nbsp;&#x0A;  This may result in incorrect behavior at runtime, as callers of the get&#x0A;  method will not necessarily see a consistent state for the object.&amp;nbsp;&#x0A;  The get method should be made synchronized.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UUCF">
    <name>Useless Control Flow</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a useless control flow statement, where&#x0A;control flow continues onto the same place regardless of whether or not&#x0A;the branch is taken. For example,&#x0A;this is caused by having an empty statement&#x0A;block for an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;    if (argv.length == 0) {&#x0A;    // TODO: handle this case&#x0A;    }&#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UUCFNL">
    <name>Useless Control Flow Next Line</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a useless control flow statement in which control&#x0A;flow follows to the same or following line regardless of whether or not&#x0A;the branch is taken.&#x0A;Often, this is caused by inadvertently using an empty statement as the&#x0A;body of an &lt;code&gt;if&lt;/code&gt; statement, e.g.:&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;    if (argv.length == 1);&#x0A;        System.out.println(&quot;Hello, &quot; + argv[0]);&#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UUF">
    <name>Unread Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This field is never read.&amp;nbsp; Consider removing it from the class.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UUL">
    <name>Unreleased Lock</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method acquires a JSR-166 (&lt;code&gt;java.util.concurrent&lt;/code&gt;) lock,&#x0A;but does not release it on all paths out of the method.  In general, the correct idiom&#x0A;for using a JSR-166 lock is:&#x0A;&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;    Lock l = ...;&#x0A;    l.lock();&#x0A;    try {&#x0A;        // do something&#x0A;    } finally {&#x0A;        l.unlock();&#x0A;    }&#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UULEP">
    <name>Unreleased Lock Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method acquires a JSR-166 (&lt;code&gt;java.util.concurrent&lt;/code&gt;) lock,&#x0A;but does not release it on all exception paths out of the method.  In general, the correct idiom&#x0A;for using a JSR-166 lock is:&#x0A;&lt;/p&gt;&#x0A;&lt;pre&gt;&#x0A;    Lock l = ...;&#x0A;    l.lock();&#x0A;    try {&#x0A;        // do something&#x0A;    } finally {&#x0A;        l.unlock();&#x0A;    }&#x0A;&lt;/pre&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UUM">
    <name>Unnecessary Math</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method uses a static method from java.lang.Math on a constant value. This method&apos;s&#x0A;result in this case, can be determined statically, and is faster and sometimes more accurate to&#x0A;just use the constant. Methods detected are:&#x0A;&lt;/p&gt;&#x0A;&lt;table&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;th&gt;Method&lt;/th&gt; &lt;th&gt;Parameter&lt;/th&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;abs&lt;/td&gt; &lt;td&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;acos&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;asin&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;atan&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;atan2&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;cbrt&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;ceil&lt;/td&gt; &lt;td&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;cos&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;cosh&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;exp&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;expm1&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;floor&lt;/td&gt; &lt;td&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;log&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;log10&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;rint&lt;/td&gt; &lt;td&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;round&lt;/td&gt; &lt;td&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;sin&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;sinh&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;sqrt&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;tan&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;tanh&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;toDegrees&lt;/td&gt; &lt;td&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr&gt;&#x0A;   &lt;td&gt;toRadians&lt;/td&gt; &lt;td&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;/table&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UUMOAC">
    <name>Uncallable Method Of Anonymous Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This anonymous class defined a method that is not directly invoked and does not override&#x0A;a method in a superclass. Since methods in other classes cannot directly invoke methods&#x0A;declared in an anonymous class, it seems that this method is uncallable. The method&#x0A;might simply be dead code, but it is also possible that the method is intended to&#x0A;override a method declared in a superclass, and due to an typo or other error the method does not,&#x0A;in fact, override the method it is intended to.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UUPM">
    <name>Uncalled Private Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This private method is never called. Although it is&#x0A;possible that the method will be invoked through reflection,&#x0A;it is more likely that the method is never used, and should be&#x0A;removed.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "UUPOPF">
    <name>Unread Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This field is never read.&amp;nbsp;&#x0A;The field is public or protected, so perhaps&#x0A;    it is intended to be used with classes not seen as part of the analysis. If not,&#x0A;consider removing it from the class.&lt;/p&gt;</description>
  </rule>
  <rule key = "UUR">
    <name>Uninit Read</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This constructor reads a field which has not yet been assigned a value.&amp;nbsp;&#x0A;  This is often caused when the programmer mistakenly uses the field instead&#x0A;  of one of the constructor&apos;s parameters.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UURCFSC">
    <name>Uninit Read Called From Super Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method is invoked in the constructor of of the superclass. At this point,&#x0A;    the fields of the class have not yet initialized.&lt;/p&gt;&#x0A;&lt;p&gt;To make this more concrete, consider the following classes:&lt;/p&gt;&#x0A;&lt;pre&gt;abstract class A {&#x0A;  int hashCode;&#x0A;  abstract Object getValue();&#x0A;  A() {&#x0A;    hashCode = getValue().hashCode();&#x0A;    }&#x0A;  }&#x0A;class B extends A {&#x0A;  Object value;&#x0A;  B(Object v) {&#x0A;    this.value = v;&#x0A;    }&#x0A;  Object getValue() {&#x0A;    return value;&#x0A;  }&#x0A;  }&lt;/pre&gt;&#x0A;&lt;p&gt;When a &lt;code&gt;B&lt;/code&gt; is constructed,&#x0A;the constructor for the &lt;code&gt;A&lt;/code&gt; class is invoked&#x0A;&lt;em&gt;before&lt;/em&gt; the constructor for &lt;code&gt;B&lt;/code&gt; sets &lt;code&gt;value&lt;/code&gt;.&#x0A;Thus, when the constructor for &lt;code&gt;A&lt;/code&gt; invokes &lt;code&gt;getValue&lt;/code&gt;,&#x0A;an uninitialized value is read for &lt;code&gt;value&lt;/code&gt;&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UUW">
    <name>Uncond Wait</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a call to &lt;code&gt;java.lang.Object.wait()&lt;/code&gt; which&#x0A;  is not guarded by conditional control flow.&amp;nbsp; The code should&#x0A;    verify that condition it intends to wait for is not already satisfied&#x0A;    before calling wait; any previous notifications will be ignored.&#x0A;  &lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UuUF">
    <name>Unused Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This field is never used.&amp;nbsp; Consider removing it from the class.&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "UuUPOPF">
    <name>Unused Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This field is never used.&amp;nbsp;&#x0A;The field is public or protected, so perhaps&#x0A;    it is intended to be used with classes not seen as part of the analysis. If not,&#x0A;consider removing it from the class.&lt;/p&gt;</description>
  </rule>
  <rule key = "UwUF">
    <name>Unwritten Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This field is never written.&amp;nbsp; All reads of it will return the default&#x0A;value. Check for errors (should it have been initialized?), or remove it if it is useless.&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "UwUPOPF">
    <name>Unwritten Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; No writes were seen to this public/protected field.&amp;nbsp; All reads of it will return the default&#x0A;value. Check for errors (should it have been initialized?), or remove it if it is useless.&lt;/p&gt;</description>
    <priority>MINOR</priority>
  </rule>
  <rule key = "VFSBA">
    <name>Format String Bad Argument</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The format string placeholder is incompatible with the corresponding&#x0A;argument. For example,&#x0A;&lt;code&gt;&#x0A;  System.out.println(&quot;%d\n&quot;, &quot;hello&quot;);&#x0A;&lt;/code&gt;&#x0A;&lt;p&gt;The %d placeholder requires a numeric argument, but a string value is&#x0A;passed instead.&#x0A;A runtime exception will occur when&#x0A;this statement is executed.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "VFSBC">
    <name>Format String Bad Conversion</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;One of the arguments is uncompatible with the corresponding format string specifier.&#x0A;As a result, this will generate a runtime exception when executed.&#x0A;For example, &lt;code&gt;String.format(&quot;%d&quot;, &quot;1&quot;)&lt;/code&gt; will generate an exception, since&#x0A;the String &quot;1&quot; is incompatible with the format specifier %d.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "VFSBCFA">
    <name>Format String Bad Conversion From Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;One of the arguments being formatted with a format string is an array. This will be formatted&#x0A;using a fairly useless format, such as [I@304282, which doesn&apos;t actually show the contents&#x0A;of the array.&#x0A;Consider wrapping the array using &lt;code&gt;Arrays.asList(...)&lt;/code&gt; before handling it off to a formatted.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "VFSBCTB">
    <name>Format String Bad Conversion To Boolean</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;An argument not of type Boolean is being formatted with a %b format specifier. This won&apos;t throw an&#x0A;exception; instead, it will print true for any nonnull value, and false for null.&#x0A;This feature of format strings is strange, and may not be what you intended.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "VFSEAP">
    <name>Format String Extra Arguments Passed</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;A format-string method with a variable number of arguments is called,&#x0A;but more arguments are passed than are actually used by the format string.&#x0A;This won&apos;t cause a runtime exception, but the code may be silently omitting&#x0A;information that was intended to be included in the formatted string.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "VFSEMFS">
    <name>Format String Expected Message Format Supplied</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;A method is called that expects a Java printf format string and a list of arguments.&#x0A;However, the format string doesn&apos;t contain any format specifiers (e.g., %s) but&#x0A;does contain message format elements (e.g., {0}).  It is likely&#x0A;that the code is supplying a MessageFormat string when a printf-style format string&#x0A;is required. At runtime, all of the arguments will be ignored&#x0A;and the format string will be returned exactly as provided without any formatting.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "VFSI">
    <name>Format String Illegal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The format string is syntactically invalid,&#x0A;and a runtime exception will occur when&#x0A;this statement is executed.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "VFSMA">
    <name>Format String Missing Argument</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;Not enough arguments are passed to satisfy a placeholder in the format string.&#x0A;A runtime exception will occur when&#x0A;this statement is executed.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "VFSNPA">
    <name>Format String No Previous Argument</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;The format string specifies a relative index to request that the argument for the previous format specifier&#x0A;be reused. However, there is no previous argument.&#x0A;For example,&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;&lt;code&gt;formatter.format(&quot;%&amp;lt;s %s&quot;, &quot;a&quot;, &quot;b&quot;)&lt;/code&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p&gt;would throw a MissingFormatArgumentException when executed.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "VFSUN">
    <name>Format String Uses Newline</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This format string include a newline character (\n). In format strings, it is generally&#x0A; preferable better to use %n, which will produce the platform-specific line separator.&#x0A;&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "VPAPTOV">
    <name>Primitive Array Passed To Object Vararg</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;This code passes a primitive array to a function that takes a variable number of object arguments.&#x0A;This creates an array of length one to hold the primitive array and passes it to the function.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "VVI">
    <name>Volatile Increment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code increments a volatile field. Increments of volatile fields aren&apos;t&#x0A;atomic. If more than one thread is incrementing the field at the same time,&#x0A;increments could be lost.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "VVRTA">
    <name>Volatile Reference To Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This declares a volatile reference to an array, which might not be what&#x0A;you want. With a volatile reference to an array, reads and writes of&#x0A;the reference to the array are treated as volatile, but the array elements&#x0A;are non-volatile. To get volatile array elements, you will need to use&#x0A;one of the atomic array classes in java.util.concurrent (provided&#x0A;in Java 5.0).&lt;/p&gt;</description>
    <priority>MAJOR</priority>
  </rule>
  <rule key = "WANIL">
    <name>Await Not In Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a call to &lt;code&gt;java.util.concurrent.await()&lt;/code&gt;&#x0A;   (or variants)&#x0A;  which is not in a loop.&amp;nbsp; If the object is used for multiple conditions,&#x0A;  the condition the caller intended to wait for might not be the one&#x0A;  that actually occurred.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "WNIL">
    <name>Not In Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method contains a call to &lt;code&gt;java.lang.Object.wait()&lt;/code&gt;&#x0A;  which is not in a loop.&amp;nbsp; If the monitor is used for multiple conditions,&#x0A;  the condition the caller intended to wait for might not be the one&#x0A;  that actually occurred.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "WUGRTCL">
    <name>Using Getclass Rather Than Class Literal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;     This instance method synchronizes on &lt;code&gt;this.getClass()&lt;/code&gt;. If this class is subclassed,&#x0A;     subclasses will synchronize on the class object for the subclass, which isn&apos;t likely what was intended.&#x0A;     For example, consider this code from java.awt.Label:&lt;/p&gt;&#x0A;     &lt;pre&gt;&#x0A;     private static final String base = &quot;label&quot;;&#x0A;     private static int nameCounter = 0;&#x0A;     String constructComponentName() {&#x0A;        synchronized (getClass()) {&#x0A;            return base + nameCounter++;&#x0A;        }&#x0A;     }&#x0A;     &lt;/pre&gt;&#x0A;     &lt;p&gt;Subclasses of &lt;code&gt;Label&lt;/code&gt; won&apos;t synchronize on the same subclass, giving rise to a datarace.&#x0A;     Instead, this code should be synchronizing on &lt;code&gt;Label.class&lt;/code&gt;&lt;/p&gt;&#x0A;      &lt;pre&gt;&#x0A;     private static final String base = &quot;label&quot;;&#x0A;     private static int nameCounter = 0;&#x0A;     String constructComponentName() {&#x0A;        synchronized (Label.class) {&#x0A;            return base + nameCounter++;&#x0A;        }&#x0A;     }&#x0A;     &lt;/pre&gt;&#x0A;      &lt;p&gt;Bug pattern contributed by Jason Mehrens&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "WWMI">
    <name>Wrong Map Iterator</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This method accesses the value of a Map entry, using a key that was retrieved from&#x0A;a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the&#x0A;Map.get(key) lookup.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "WWS">
    <name>Writeobject Sync</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt; This class has a &lt;code&gt;writeObject()&lt;/code&gt; method which is synchronized;&#x0A;  however, no other method of the class is synchronized.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "XRPTJW">
    <name>Request Parameter To Jsp Writer</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting&#x0A;vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&#x0A;for more information.&lt;/p&gt;&#x0A;&lt;p&gt;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#x0A;If FindBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting&#x0A;vulnerabilities that FindBugs doesn&apos;t report. If you are concerned about cross site scripting, you should seriously&#x0A;consider using a commercial static analysis or pen-testing tool.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "XRPTSE">
    <name>Request Parameter To Send Error</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows&#x0A;for a reflected cross site scripting&#x0A;vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&#x0A;for more information.&lt;/p&gt;&#x0A;&lt;p&gt;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#x0A;If FindBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting&#x0A;vulnerabilities that FindBugs doesn&apos;t report. If you are concerned about cross site scripting, you should seriously&#x0A;consider using a commercial static analysis or pen-testing tool.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "XRPTSW">
    <name>Request Parameter To Servlet Writer</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting&#x0A;vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&#x0A;for more information.&lt;/p&gt;&#x0A;&lt;p&gt;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#x0A;If FindBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting&#x0A;vulnerabilities that FindBugs doesn&apos;t report. If you are concerned about cross site scripting, you should seriously&#x0A;consider using a commercial static analysis or pen-testing tool.&#x0A;&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
  <rule key = "XXFB">
    <name>Xml Factory Bypass</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&#x0A;      This method allocates a specific implementation of an xml interface. It is preferable to use&#x0A;      the supplied factory classes to create these objects so that the implementation can be&#x0A;      changed at runtime. See&#x0A;      &lt;/p&gt;&#x0A;      &lt;ul&gt;&#x0A;         &lt;li&gt;javax.xml.parsers.DocumentBuilderFactory&lt;/li&gt;&#x0A;         &lt;li&gt;javax.xml.parsers.SAXParserFactory&lt;/li&gt;&#x0A;         &lt;li&gt;javax.xml.transform.TransformerFactory&lt;/li&gt;&#x0A;         &lt;li&gt;org.w3c.dom.Document.create&lt;i&gt;XXXX&lt;/i&gt;&lt;/li&gt;&#x0A;      &lt;/ul&gt;&#x0A;      &lt;p&gt;for details.&lt;/p&gt;</description>
    <priority>CRITICAL</priority>
  </rule>
</rulset>
