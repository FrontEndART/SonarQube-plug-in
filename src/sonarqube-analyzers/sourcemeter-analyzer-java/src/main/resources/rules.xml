<?xml version="1.0" ?>
<rules>
  <rule>
    <key>MET_AD</key>
    <name>API Documentation (AD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; ratio of the number of documented public methods in the class +1 if the class itself is documented to the number of all public methods in the class + 1 (the class itself); however, the nested, anonymous, and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the number of documented public classes and methods in the package to the number of all of its public classes and methods; however, the classes and methods of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CBO</key>
    <name>Coupling Between Object classes (CBO) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of directly used other classes (e.g. by inheritance, function call, type reference, attribute reference). Classes using many other classes highly depend on their environment, so it is difficult to test or reuse them; furthermore, they are very sensitive to the changes in the system.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CBOI</key>
    <name>Coupling Between Object classes Inverse (CBOI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of other classes, which directly use the class. Classes which are used by many other classes have a high impact on the behavior of the system, and should be modified very carefully and tested intensively.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CD</key>
    <name>Comment Density (CD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; ratio of the comment lines of the method (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class&lt;/strong&gt;: ratio of the comment lines of the class (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the comment lines of the package (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLOC</key>
    <name>Comment Lines of Code (CLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of comment and documentation code lines of the method; however, its anonymous and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of comment and documentation code lines of the class, including its local methods and attributes; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of comment and documentation code lines of the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of comment and documentation code lines of the package; however, its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_DIT</key>
    <name>Depth of Inheritance Tree (DIT) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; length of the path that leads from the class to its farthest ancestor in the inheritance tree.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_DLOC</key>
    <name>Documentation Lines of Code (DLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of documentation code lines of the method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of documentation code lines of the class, including its local methods and attributes; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HCPL</key>
    <name>Halstead Calculated Program Length (HCPL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n1&lt;/em&gt;: number of distinct operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n2&lt;/em&gt;: number of distinct operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The calculated program length is &lt;em&gt;n1 * log&lt;sub&gt;2&lt;/sub&gt;(n1) + n2 * log&lt;sub&gt;2&lt;/sub&gt;(n2)&lt;/em&gt;.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HDIF</key>
    <name>Halstead Difficulty (HDIF) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n1&lt;/em&gt;: number of distinct operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n2&lt;/em&gt;: number of distinct operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N2&lt;/em&gt;: total number of operands&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Halstead difficulty is &lt;em&gt;n1/2 * N2/n2&lt;/em&gt;.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HEFF</key>
    <name>Halstead Effort (HEFF) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n1&lt;/em&gt;: number of distinct operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n2&lt;/em&gt;: number of distinct operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N1&lt;/em&gt;: total number of operators&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N2&lt;/em&gt;: total number of operands&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n : n1 + n2&lt;/em&gt; (program vocabulary)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N : N1 + N2&lt;/em&gt; (program length)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;V : N * log&lt;sub&gt;2&lt;/sub&gt;(n)&lt;/em&gt; (volume)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;D : n1/2 * N2/n2&lt;/em&gt; (difficulty)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Halstead effort is &lt;em&gt;D * V&lt;/em&gt;.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HNDB</key>
    <name>Halstead Number of Delivered Bugs (HNDB) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n1&lt;/em&gt;: number of distinct operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n2&lt;/em&gt;: number of distinct operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N1&lt;/em&gt;: total number of operators&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N2&lt;/em&gt;: total number of operands&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n : n1 + n2&lt;/em&gt; (program vocabulary)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N : N1 + N2&lt;/em&gt; (program length)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;V : N * log&lt;sub&gt;2&lt;/sub&gt;(n)&lt;/em&gt; (volume)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;D : n1/2 * N2/n2&lt;/em&gt; (difficulty)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;E : D * V&lt;/em&gt; (effort)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Number of delivered bugs is &lt;em&gt;E&lt;sup&gt;2/3&lt;/sup&gt;/3000&lt;/em&gt;.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HPL</key>
    <name>Halstead Program Length (HPL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;N1&lt;/em&gt;: total number of operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N2&lt;/em&gt;: total number of operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Halstead program length is &lt;em&gt;N1 + N2&lt;/em&gt;.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HPV</key>
    <name>Halstead Program Vocabulary (HPV) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n1&lt;/em&gt;: number of distinct operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n2&lt;/em&gt;: number of distinct operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Halstead program vocabulary is &lt;em&gt;n1 + n2&lt;/em&gt;.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HTRP</key>
    <name>Halstead Time Required to Program (HTRP) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n1&lt;/em&gt;: number of distinct operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n2&lt;/em&gt;: number of distinct operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N1&lt;/em&gt;: total number of operators&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N2&lt;/em&gt;: total number of operands&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n : n1 + n2&lt;/em&gt; (program vocabulary)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N : N1 + N2&lt;/em&gt; (program length)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;V : N * log&lt;sub&gt;2&lt;/sub&gt;(n)&lt;/em&gt; (volume)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;D : n1/2 * N2/n2&lt;/em&gt; (difficulty)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;E : D * V&lt;/em&gt; (effort)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Halstead time required to program is &lt;em&gt;E/18&lt;/em&gt; seconds.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_HVOL</key>
    <name>Halstead Volume (HVOL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n1&lt;/em&gt;: number of distinct operators (semantic meanings of the reserved keywords, semicolons, blocks, and identifiers except in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n2&lt;/em&gt;: number of distinct operands (literals - e.g. character, string, and integer literals, - and the identifiers in their declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N1&lt;/em&gt;: total number of operators&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N2&lt;/em&gt;: total number of operands&lt;/li&gt;
&lt;li&gt;&lt;em&gt;n : n1 + n2&lt;/em&gt; (program vocabulary)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;N : N1 + N2&lt;/em&gt; (program length)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Halstead volume is &lt;em&gt;N * log&lt;sub&gt;2&lt;/sub&gt;(n)&lt;/em&gt;.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LCOM5</key>
    <name>Lack of Cohesion in Methods 5 (LCOM5) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of functionalities of the class. One of the basic principles of object-oriented programming is encapsulation, meaning that attributes belonging together and the operations that use them should be organized into one class, and one class shall implement only one functionality, i.e. its attributes and methods should be coherent. This metric measures the lack of cohesion and computes into how many coherent classes the class could be split. It is calculated by taking a non-directed graph, where the nodes are the implemented local methods of the class and there is an edge between the two nodes if and only if a common (local or inherited) attribute or abstract method is used or a method invokes another. The value of the metric is the number of connected components in the graph not counting those, which contain only constructors, destructors, getters, or setters.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LLOC</key>
    <name>Logical Lines of Code (LLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of non-empty and non-comment code lines of the method; however, its anonymous and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of non-empty and non-comment code lines of the class, including the non-empty and non-comment lines of its local methods; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of non-empty and non-comment code lines of the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of non-empty and non-comment code lines of the package; however, its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LOC</key>
    <name>Lines of Code (LOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of code lines of the method, including empty and comment lines; however, its anonymous and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of code lines of the class, including empty and comment lines, as well as its local methods; however, its nested, anonymous, and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of code lines of the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of code lines of the package, including empty and comment lines; however, its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_MI</key>
    <name>Maintainability Index (Original version) (MI) Metric Threshold Violation</name>
    <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;HVOL&lt;/em&gt;: Halstead Volume&lt;/li&gt;
&lt;li&gt;&lt;em&gt;McCC&lt;/em&gt;: McCabe’s cyclomatic complexity&lt;/li&gt;
&lt;li&gt;&lt;em&gt;LLOC&lt;/em&gt;: logical lines of code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The original Maintainability Index is computed by the following formula:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MI = 171 - 5.2 * ln(HVOL) - 0.23 * (McCC) - 16.2 * ln(LLOC)&lt;/em&gt;&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_MIMS</key>
    <name>Maintainability Index (Microsoft version) (MIMS) Metric Threshold Violation</name>
    <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;HVOL&lt;/em&gt;: Halstead Volume&lt;/li&gt;
&lt;li&gt;&lt;em&gt;McCC&lt;/em&gt;: McCabe’s cyclomatic complexity&lt;/li&gt;
&lt;li&gt;&lt;em&gt;LLOC&lt;/em&gt;: logical lines of code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Maintainability Index used by Microsoft’s Visual Studio is computed by the following formula:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MIMS = max(0,(171 - 5.2 * ln(HVOL) - 0.23 * (McCC) - 16.2 * ln(LLOC)) * 100 / 171)&lt;/em&gt;&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_MISEI</key>
    <name>Maintainability Index (SEI version) (MISEI) Metric Threshold Violation</name>
    <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;HVOL&lt;/em&gt;: Halstead Volume&lt;/li&gt;
&lt;li&gt;&lt;em&gt;McCC&lt;/em&gt;: McCabe’s cyclomatic complexity&lt;/li&gt;
&lt;li&gt;&lt;em&gt;LLOC&lt;/em&gt;: logical lines of code&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CD&lt;/em&gt;: comment density&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Maintainability Index derived by the Software Engineering Institute (SEI) is computed by the following formula:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MISEI = 171 - 5.2 * log&lt;sub&gt;2&lt;/sub&gt;(HVOL) - 0.23 * McCC - 16.2 * log&lt;sub&gt;2&lt;/sub&gt;(LLOC) + 50 * sin(sqrt(2.4 * CD))&lt;/em&gt;&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_MISM</key>
    <name>Maintainability Index (SourceMeter version) (MISM) Metric Threshold Violation</name>
    <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;HVOL&lt;/em&gt;: Halstead Volume&lt;/li&gt;
&lt;li&gt;&lt;em&gt;McCC&lt;/em&gt;: McCabe’s cyclomatic complexity&lt;/li&gt;
&lt;li&gt;&lt;em&gt;LLOC&lt;/em&gt;: logical lines of code&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CD&lt;/em&gt;: comment density&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Maintainability Index proposed by SourceMeter combines the different scaling approach from Microsoft’s version with the inclusion of comment percentage from the Software Engineering Institute (SEI) version into the following formula:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MISM = max(0, (171 - 5.2 * log&lt;sub&gt;2&lt;/sub&gt;(HVOL) - 0.23 * McCC - 16.2 * log&lt;sub&gt;2&lt;/sub&gt;(LLOC) + 50 * sin(sqrt(2.4 * CD))) * 100 / 171)&lt;/em&gt;&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_McCC</key>
    <name>McCabe's Cyclomatic Complexity (McCC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; complexity of the method expressed as the number of independent control flow paths in it. It represents a lower bound for the number of possible execution paths in the source code and at the same time it is an upper bound for the minimum number of test cases needed for achieving full branch test coverage. The value of the metric is calculated as the number of the following instructions plus 1: if, for, foreach, while, do-while, case label (which belongs to a switch instruction), catch, conditional statement (?:). Moreover, logical “and” (&amp;&amp;) and logical “or” (||) expressions also add 1 to the value because their short-circuit evaluation can cause branching depending on the first operand. The following instructions are not included: else, switch, default label (which belongs to a switch instruction), try, finally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; complexity of the file expressed as the number of independent control flow paths in it. It is calculated as the sum of the McCabe’s Cyclomatic Complexity values of the methods can be found in the file.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NA</key>
    <name>Number of Attributes (NA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of attributes in the class, including the inherited ones; however, the attributes of its nested, anonymous, and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of attributes in the package; however, attributes of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NCL</key>
    <name>Number of Classes (NCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of classes in the package; however, the classes of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NEN</key>
    <name>Number of Enums (NEN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of enums in the package; however, the enums of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NG</key>
    <name>Number of Getters (NG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of getter methods in the class, including the inherited ones; however, the getter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package&lt;/strong&gt;: number of getter methods in the package; however, getter methods of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NII</key>
    <name>Number of Incoming Invocations (NII) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of other methods and attribute initializations which directly call the method. If the method is invoked several times from the same method or attribute initialization, it is counted only once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of other methods and attribute initializations which directly call the local methods of the class. If a method is invoked several times from the same method or attribute initialization, it is counted only once.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NIN</key>
    <name>Number of Interfaces (NIN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of interfaces in the package; however, the interfaces of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NL</key>
    <name>Nesting Level (NL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; complexity of the method expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes. The following instructions are taken into account: if, else-if, else, for, while, do-while, switch, try, catch, finally and block statements that are directly inside another block statement. The following instructions do not increase the value by themselves; however, if additional embeddednesses can be found in their blocks, they are considered: case and default label (which belong to a switch instruction).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes. It is calculated as the maximum nesting level (NL) of its local methods and init blocks.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLA</key>
    <name>Number of Local Attributes (NLA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) attributes in the class; however, the attributes of nested, anonymous, and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLE</key>
    <name>Nesting Level Else-If (NLE) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; complexity of the method expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes, where in the if-else-if construct only the first if instruction is considered. The following instructions are taken into account: if, else, for, while, do-while, switch, try, catch, finally and block statements that are directly inside another block statement. The following instructions do not increase the value by themselves; however, if additional embeddednesses can be found in their blocks, they are considered: else-if (i.e. in the if-else-if construct the use of else-if does not increase the value of the metric), case and default label (which belong to a switch instruction).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes, where in the if-else-if construct only the first if instruction is considered. It is calculated as the maximum nesting level (NLE) of its local methods and init blocks.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLG</key>
    <name>Number of Local Getters (NLG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) getter methods in the class; however, the getter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLM</key>
    <name>Number of Local Methods (NLM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class; however, the methods of nested, anonymous, and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLPA</key>
    <name>Number of Local Public Attributes (NLPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public attributes in the class; however, the attributes of nested, anonymous, and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLPM</key>
    <name>Number of Local Public Methods (NLPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public methods in the class; however, the methods of nested, anonymous, and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLS</key>
    <name>Number of Local Setters (NLS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) setter methods in the class; however, the setter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NM</key>
    <name>Number of Methods (NM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of methods in the class, including the inherited ones; however, the methods of its nested, anonymous and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of methods in the package; however, methods of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOA</key>
    <name>Number of Ancestors (NOA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums and annotations from which the class is directly or indirectly inherited.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOC</key>
    <name>Number of Children (NOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums and annotations which are directly derived from the class.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOD</key>
    <name>Number of Descendants (NOD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums, annotations, which are directly or indirectly derived from the class.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOI</key>
    <name>Number of Outgoing Invocations (NOI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of directly called methods. If a method is invoked several times, it is counted only once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of directly called methods of other classes, including method invocations from attribute initializations. If a method is invoked several times, it is counted only once.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOP</key>
    <name>Number of Parents (NOP) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, interfaces, enums and annotations from which the class is directly inherited.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOS</key>
    <name>Number of Statements (NOS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; number of statements in the method; however, the statements of its anonymous and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of statements in the class; however, the statements of its nested, anonymous, and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NPA</key>
    <name>Number of Public Attributes (NPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public attributes in the class, including the inherited ones; however, the public attributes of its nested, anonymous, and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public attributes in the package; however, the public attributes of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NPKG</key>
    <name>Number of packages (NPKG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of directly contained subpackages of the package.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NPM</key>
    <name>Number of Public Methods (NPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public methods in the class, including the inherited ones; however, the public methods of nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public methods in the package; however, the public methods of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NS</key>
    <name>Number of Setters (NS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of setter methods in the class, including the inherited ones; however, the setter methods of its nested, anonymous, and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of setter methods in the package; however, setter methods of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NUMPAR</key>
    <name>Number of Parameters (NUMPAR) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of the parameters of the method. The varargs parameter counts as one.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_PDA</key>
    <name>Public Documented API (PDA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of documented public methods in the class (+1 if the class itself is documented); however, the methods of its nested, anonymous, and local classes are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of documented public classes and methods in the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of documented public classes and methods in the package; however, the classes and methods of its subpackages are not counted.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_PUA</key>
    <name>Public Undocumented API (PUA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of undocumented public methods in the class (+1 if the class itself is undocumented); however, the methods of its nested, anonymous, and local classes are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of undocumented public classes and methods in the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of undocumented public classes and methods in the package; however, the classes and methods of its subpackages are not counted.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_RFC</key>
    <name>Response set For Class (RFC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class (NLM) plus the number of directly invoked other methods by its methods or attribute initializations (NOI).&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TAD</key>
    <name>Total API Documentation (TAD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the number of documented public classes and methods in the package to the number of all of its public classes and methods, including its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; ratio of the number of documented public classes and methods in the component to the number of all of its public classes and methods, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TCD</key>
    <name>Total Comment Density (TCD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method:&lt;/strong&gt; ratio of the total comment lines of the method (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; ratio of the total comment lines of the class (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the total comment lines of the package (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; ratio of the total comment lines of the component (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TCLOC</key>
    <name>Total Comment Lines of Code (TCLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of comment and documentation code lines of the method, including its anonymous and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of comment and documentation code lines of the class, including its local methods and attributes, as well as its nested, anonymous, and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of comment and documentation code lines of the package, including its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of comment and documentation code lines of the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TLLOC</key>
    <name>Total Logical Lines of Code (TLLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of non-empty and non-comment code lines of the method, including the non-empty and non-comment lines of its anonymous and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of non-empty and non-comment code lines of the class, including the non-empty and non-comment code lines of its local methods, anonymous, local, and nested classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of non-empty and non-comment code lines of the package, including its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of non-empty and non-comment code lines of the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TLOC</key>
    <name>Total Lines of Code (TLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: number of code lines of the method, including empty and comment lines, as well as its anonymous and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of code lines of the class, including empty and comment lines, as well as its local methods, anonymous, local, and nested classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of code lines of the package, including empty and comment lines, as well as its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of code lines of the component, including empty and comment lines, as well as its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNA</key>
    <name>Total Number of Attributes (TNA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of attributes in the class, including the inherited ones, as well as the inherited and local attributes of its nested, anonymous and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of attributes in the package, including the attributes of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of attributes in the component, including the attributes of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNCL</key>
    <name>Total Number of Classes (TNCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of classes in the package, including the classes of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of classes in the component, including the classes of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNDI</key>
    <name>Total Number of Directories (TNDI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of directories that belong to the package, including the directories of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of directories that belong to the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNEN</key>
    <name>Total Number of Enums (TNEN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of enums in the package, including the enums of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of enums in the component, including the enums of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNFI</key>
    <name>Total Number of Files (TNFI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of files that belong to the package, including the files of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of files that belong to the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNG</key>
    <name>Total Number of Getters (TNG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of getter methods in the class, including the inherited ones, as well as the inherited and local getter methods of its nested, anonymous and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of getter methods in the package, including the getter methods of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of getter methods in the component, including the getter methods of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNIN</key>
    <name>Total Number of Interfaces (TNIN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of interfaces in the package, including the interfaces of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of interfaces in the component, including the interfaces of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLA</key>
    <name>Total Number of Local Attributes (TNLA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) attributes in the class, including the attributes of its nested, anonymous, and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLG</key>
    <name>Total Number of Local Getters (TNLG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) getter methods in the class, including the local getter methods of its nested, anonymous, and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLM</key>
    <name>Total Number of Local Methods (TNLM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class, including the local methods of its nested, anonymous, and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLPA</key>
    <name>Total Number of Local Public Attributes (TNLPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public attributes in the class, including the local public attributes of its nested, anonymous, and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLPM</key>
    <name>Total Number of Local Public Methods (TNLPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) public methods in the class, including the local methods of its nested, anonymous, and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLS</key>
    <name>Total Number of Local Setters (TNLS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) setter methods in the class, including the local setter methods of its nested, anonymous, and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNM</key>
    <name>Total Number of Methods (TNM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of methods in the class, including the inherited ones, as well as the inherited and local methods of its nested, anonymous, and local classes. Methods that override abstract methods are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of methods in the package, including the methods of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of methods in the component, including the methods of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNOS</key>
    <name>Total Number of Statements (TNOS) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method:&lt;/b&gt; number of statements in the method, including the statements of its anonymous and local classes.&lt;br&gt;&lt;b&gt;Class:&lt;/b&gt; number of statements in the class, including the statements of its nested, anonymous, and local classes.&lt;br&gt;&lt;b&gt;Package:&lt;/b&gt; number of statements in the package, including the statements of its subpackages.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of statements in the component, including the statements of its subcomponents.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNPA</key>
    <name>Total Number of Public Attributes (TNPA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public attributes in the class, including the inherited ones, as well as the inherited and local public attributes of its nested, anonymous, and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public attributes in the package, including the public attributes of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public attributes in the component, including the public attributes of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNPCL</key>
    <name>Total Number of Public Classes (TNPCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public classes in the package, including the public classes of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public classes in the component, including the public classes of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNPEN</key>
    <name>Total Number of Public Enums (TNPEN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public enums in the package, including the public enums of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public enums in the component, including the public enums of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNPIN</key>
    <name>Total Number of Public Interfaces (TNPIN) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public interfaces in the package, including the public interfaces of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public interfaces in the component, including the public interfaces of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNPKG</key>
    <name>Total Number of Packages (TNPKG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of subpackages in the package, including all directly or indirectly contained subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of packages and subpackages that belong to the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNPM</key>
    <name>Total Number of Public Methods (TNPM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of public methods in the class, including the inherited ones, as well as the inherited and local public methods of its nested, anonymous, and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of public methods in the package, including the public methods of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of public methods in the component, including the public methods of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNS</key>
    <name>Total Number of Setters (TNS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of setter methods in the class, including the inherited ones, as well as the inherited and local setter methods of its nested, anonymous and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of setter methods in the package, including the setter methods of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of setter methods in the component, including the setter methods of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TPDA</key>
    <name>Total Public Documented API (TPDA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of documented public classes and methods in the package, including the documented public classes and methods of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of documented public classes and methods in the component, including the documented public classes and methods of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TPUA</key>
    <name>Total Public Undocumented API (TPUA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of undocumented public classes and methods in the package, including the undocumented public classes and methods of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of undocumented public classes and methods in the component, including the undocumented public classes and methods of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_WMC</key>
    <name>Weighted Methods per Class (WMC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the number of independent control flow paths in it. It is calculated as the sum of the McCabe’s Cyclomatic Complexity (McCC) values of its local methods and init blocks.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CA</key>
    <name>Clone Age (CA) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class/clone instance:&lt;/b&gt; number of previously analyzed revisions in which the clone class/clone instance was present + 1.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CC</key>
    <name>Clone Coverage (CC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of the source code element, expressed in terms of the number of syntactic entities (statements, expressions, etc.).&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of the number of syntactic entities (statements, expressions, etc.).</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CCL</key>
    <name>Clone Classes (CCL) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of clone classes having at least one clone instance in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of clone classes having at least one clone instance in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CCO</key>
    <name>Clone Complexity (CCO) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; the McCabe complexity of the code fragment corresponding to the clone instance.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; sum of CCO of clone instances in the clone class.&lt;br&gt;&lt;b&gt;Method/class/package:&lt;/b&gt; sum of CCO of clone instances in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; sum of CCO of clone instances in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CE</key>
    <name>Clone Embeddedness (CE) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; sum of incoming and outgoing references (function calls, variable references, type references; different references to the same entity are counted only once) in the code fragment corresponding to the clone instance, weighted with the number of directory changes between the referenced code fragments.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; sum of CE of the clone instances of the clone class + 1.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CEE</key>
    <name>Clone Elimination Effort (CEE) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; index of the effort required to eliminate the clone class. It is computed as the product of CI, CE, and NCR.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; index of the effort required to eliminate all clones from the component. It is computed as the sum of CEE of the clone classes in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CEG</key>
    <name>Clone Elimination Gain (CEG) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; index of the gain resulting from eliminating the clone class. It is computed as the ratio of CR to CEE.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; index of the gain resulting from eliminating all clones from the component. It is computed as the logistic function of the ratio of CR to CEE.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CI</key>
    <name>Clone Instances (CI) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of clone instances in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of clone instances in the component.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; number of clone instances in the clone class.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLC</key>
    <name>Clone Line Coverage (CLC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of the source code element, expressed in terms of lines of code.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of lines of code.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLLC</key>
    <name>Clone Logical Line Coverage (CLLC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of source code element, expressed in terms of logical lines of code (non-empty, non-comment lines).&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of logical lines of code (non-empty, non-comment lines).</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLLOC</key>
    <name>Clone Lines of Code (CLLOC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; length of the clone instance expressed in terms of lines of code.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt;  average of CLLOC of clone instances belonging to the clone class.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CR</key>
    <name>Clone Risk (CR) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; risk index of the existence of the clone class. It is computed as the product of CLLOC, CI, CCO, NCR, and CV.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; relative risk index of the existence of code duplications in the component. It is computed as the sum of CR of the clone classes in the component, divided by the total logical lines of code (non-empty, non-comment lines) of the component. It expresses the risk index projected to a non-empty, non-comment line of code in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CV</key>
    <name>Clone Variability (CV) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; instability of the clone instance since it appeared. It is computed as the ratio of the number of previously analyzed revisions when the instance had been changed to its age (CA).&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; instability of the clone class since it appeared. It is computed as the ratio of the number of previously analyzed revisions when its contained instances were moved, deleted, or added, to its age (CA), plus the average CV of its clone instances.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LDC</key>
    <name>Lines of Duplicated Code (LDC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of code lines covered by code duplications in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of code lines covered by code duplications in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LLDC</key>
    <name>Logical Lines of Duplicated Code (LLDC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/class/package:&lt;/b&gt; number of logical code lines (non-empty, non-comment lines) covered by code duplications in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; The number of logical code lines (non-empty, non-comment lines) covered by code duplications in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AAA</key>
    <name>Avoid Accessibility Alteration</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow for the runtime alteration of variable, class, or method visibility, even if they are private. This violates the principle of encapsulation.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Method;
import java.security.PrivilegedAction;

public class Violation {
  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
    // Possible call to forbidden getDeclaredConstructors
    Class[] arrayOfClass = new Class[1];
    this.getClass().getDeclaredConstructors();
    this.getClass().getDeclaredConstructor(arrayOfClass);
    Class clazz = this.getClass();
    clazz.getDeclaredConstructor(arrayOfClass);
    clazz.getDeclaredConstructors();
      // Possible call to forbidden setAccessible
    clazz.getMethod(&amp;quot;&amp;quot;, arrayOfClass).setAccessible(false);
    AccessibleObject.setAccessible(null, false);
    Method.setAccessible(null, false);
    Method[] methodsArray = clazz.getMethods();
    int nbMethod;
    for ( nbMethod = 0; nbMethod &lt; methodsArray.length; nbMethod++ ) {
      methodsArray[nbMethod].setAccessible(false);
    }

      // Possible call to forbidden PrivilegedAction
    PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AAL</key>
    <name>Avoid Array Loops</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Instead of manually copying data between two arrays, use the efficient Arrays.copyOf or System.arraycopy method instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {
    public void bar() {
        int[] a = new int[10];
        int[] b = new int[10];
        for (int i=0;i&lt;10;i++) {
            b[i]=a[i];
        }

        int[] c = new int[10];
        // this will trigger the rule
        for (int i=0;i&lt;10;i++) {
            b[i]=a[c[i]];
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ABSALIL</key>
    <name>Avoid Branching Statement As Last In Loop</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Using a branching statement as the last part of a loop may be a bug, and/or is confusing. Ensure that the usage is not a bug, or consider using another approach.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// unusual use of branching statement in a loop
for (int i = 0; i &lt; 10; i++) {
    if (i*i &lt;= 25) {
        continue;
    }
    break;
}

// this makes more sense...
for (int i = 0; i &lt; 10; i++) {
    if (i*i &gt; 25) {
        break;
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACGE</key>
    <name>Avoid Catching Generic Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package com.igate.primitive;

public class PrimitiveType {

    public void downCastPrimitiveType() {
        try {
            System.out.println(&amp;quot; i [&amp;quot; + i + &amp;quot;]&amp;quot;);
        } catch(Exception e) {
            e.printStackTrace();
        } catch(RuntimeException e) {
            e.printStackTrace();
        } catch(NullPointerException e) {
            e.printStackTrace();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACWAM</key>
    <name>Abstract Class Without Abstract Method</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided prevent direct instantiation.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class Foo {
  void int method1() { ... }
  void int method2() { ... }
  // consider using abstract methods or removing
  // the abstract modifier and adding protected constructors
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ADL</key>
    <name>Avoid Duplicate Literals</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Code containing duplicate String literals can usually be improved by declaring the String as a constant field.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private void bar() {
     buz(&amp;quot;Howdy&amp;quot;);
     buz(&amp;quot;Howdy&amp;quot;);
     buz(&amp;quot;Howdy&amp;quot;);
     buz(&amp;quot;Howdy&amp;quot;);
}
private void buz(String x) {}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ADS</key>
    <name>Avoid Dollar Signs</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using dollar signs in variable/method/class/interface names.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Fo$o {  // not a recommended name
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AFNMMN</key>
    <name>Avoid Field Name Matching Method Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    Object bar;
    // bar is data or an action or both?
    void bar() {
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AFNMTN</key>
    <name>Avoid Field Name Matching Type Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and/or field names should be chosen more carefully.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Bar {
    int foo;    // There is probably a better name that can be used
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AFS</key>
    <name>Avoid File Stream</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage collection pauses. See &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8080225&quot;&gt;JDK-8080225&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;The FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream, again causing garbage collection issues while finalizer methods are called.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Files.newInputStream(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileInputStream(fileName)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Files.newOutputStream(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileOutputStream(fileName)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Files.newBufferedReader(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileReader(fileName)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Files.newBufferedWriter(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileWriter(fileName)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note, that the &lt;code&gt;java.nio&lt;/code&gt; API does not throw a &lt;code&gt;FileNotFoundException&lt;/code&gt; anymore, instead it throws a &lt;code&gt;NoSuchFileException&lt;/code&gt;. If your code dealt explicitly with a &lt;code&gt;FileNotFoundException&lt;/code&gt;, then this needs to be adjusted. Both exceptions are subclasses of &lt;code&gt;IOException&lt;/code&gt;, so catching that one covers both.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// these instantiations cause garbage collection pauses, even if properly closed

    FileInputStream fis = new FileInputStream(fileName);
    FileOutputStream fos = new FileOutputStream(fileName);
    FileReader fr = new FileReader(fileName);
    FileWriter fw = new FileWriter(fileName);

    // the following instantiations help prevent Garbage Collection pauses, no finalization

    try(InputStream is = Files.newInputStream(Paths.get(fileName))) {
    }
    try(OutputStream os = Files.newOutputStream(Paths.get(fileName))) {
    }
    try(BufferedReader br = Files.newBufferedReader(Paths.get(fileName), StandardCharsets.UTF_8)) {
    }
    try(BufferedWriter wr = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {
    }&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ALEI</key>
    <name>Avoid Losing Exception Information</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Statements in a catch block that invoke accessors on the exception without using the information only add to code size. Either remove the invocation, or use the return result.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {
    try {
        // do something
    } catch (SomeException se) {
        se.getMessage();
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AMG</key>
    <name>Accessor Method Generation</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;When accessing a private field / method from another class, the Java compiler will generate a accessor methods with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can be avoided by changing the visibility of the field / method from private to package-private.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class OuterClass {
    private int counter;
    /* package */ int id;

    public class InnerClass {
        InnerClass() {
            OuterClass.this.counter++; // wrong accessor method will be generated
        }

        public int getOuterClassId() {
            return OuterClass.this.id; // id is package-private, no accessor method needed
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AMUO</key>
    <name>Avoid Multiple Unary Operators</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The use of multiple unary operators may be problematic, and/or confusing. Ensure that the intended usage is not a bug, or consider simplifying the expression.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// These are typo bugs, or at best needlessly complex and confusing:
int i = - -1;
int j = + - +1;
int z = ~~2;
boolean b = !!true;
boolean c = !!!true;

// These are better:
int i = 1;
int j = -1;
int z = 2;
boolean b = true;
boolean c = false;

// And these just make your brain hurt:
int i = ~-2;
int j = -~7;&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>APMIFCNE</key>
    <name>Avoid Protected Method In Final Class Not Extending</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whose visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public final class Foo {
  private int bar() {}
  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible?
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>APMP</key>
    <name>Avoid Prefixing Method Parameters</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Prefixing parameters by ‘in’ or ‘out’ pollutes the name of the parameters and reduces code readability. To indicate whether or not a parameter will be modify in a method, its better to document method behavior with Javadoc.&lt;/p&gt;
&lt;p&gt;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule &lt;a href=&quot;#PMD_FPNC&quot;&gt;Formal Parameter Naming Conventions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Not really clear
public class Foo {
  public void bar(
      int inLeftOperand,
      Result outRightOperand) {
      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Far more useful
public class Foo {
  /**
   *
   * @param leftOperand, (purpose), not modified by method.
   * @param rightOperand (purpose), will be modified by the method: contains the result.
   */
  public void bar(
        int leftOperand,
        Result rightOperand) {
        rightOperand.setValue(leftOperand * rightOperand.getValue());
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ARLV</key>
    <name>Avoid Reassigning Loop Variables</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed.&lt;/p&gt;
&lt;p&gt;In foreach-loops, configured by the &lt;code&gt;foreachReassign&lt;/code&gt; property: - &lt;code&gt;deny&lt;/code&gt;: Report any reassignment of the loop variable in the loop body. &lt;em&gt;This is the default.&lt;/em&gt; - &lt;code&gt;allow&lt;/code&gt;: Don’t check the loop variable. - &lt;code&gt;firstOnly&lt;/code&gt;: Report any reassignments of the loop variable, except as the first statement in the loop body. &lt;em&gt;This is useful if some kind of normalization or clean-up of the value before using is permitted, but any other change of the variable is not.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In for-loops, configured by the &lt;code&gt;forReassign&lt;/code&gt; property: - &lt;code&gt;deny&lt;/code&gt;: Report any reassignment of the control variable in the loop body. &lt;em&gt;This is the default.&lt;/em&gt; - &lt;code&gt;allow&lt;/code&gt;: Don’t check the control variable. - &lt;code&gt;skip&lt;/code&gt;: Report any reassignments of the control variable, except conditional increments/decrements (&lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;). &lt;em&gt;This prevents accidental reassignments or unconditional increments of the control variable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
  private void foo() {
    for (String s : listOfStrings()) {
      s = s.trim(); // OK, when foreachReassign is &amp;quot;firstOnly&amp;quot; or &amp;quot;allow&amp;quot;
      doSomethingWith(s);

      s = s.toUpper(); // OK, when foreachReassign is &amp;quot;allow&amp;quot;
      doSomethingElseWith(s);
    }

    for (int i=0; i &lt; 10; i++) {
      if (check(i)) {
        i++; // OK, when forReassign is &amp;quot;skip&amp;quot; or &amp;quot;allow&amp;quot;
      }

      i = 5;  // OK, when forReassign is &amp;quot;allow&amp;quot;

      doSomethingWith(i);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ARP</key>
    <name>Avoid Reassigning Parameters</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
  private void foo(String bar) {
    bar = &amp;quot;something else&amp;quot;;
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ASAML</key>
    <name>Avoid Synchronized At Method Level</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Method-level synchronization can cause problems when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
  // Try to avoid this:
  synchronized void foo() {
  }
  // Prefer this:
  void bar() {
    synchronized(this) {
    }
  }

  // Try to avoid this for static methods:
  static synchronized void fooStatic() {
  }

  // Prefer this:
  static void barStatic() {
    synchronized(Foo.class) {
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ASBF</key>
    <name>Avoid String Buffer Field</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks if held within objects with long lifetimes.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    private StringBuffer buffer;    // potential memory leak as an instance variable;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ATG</key>
    <name>Avoid Thread Group</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread-safe.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {
    void buz() {
        ThreadGroup tg = new ThreadGroup(&amp;quot;My threadgroup&amp;quot;);
        tg = new ThreadGroup(tg, &amp;quot;my thread group&amp;quot;);
        tg = Thread.currentThread().getThreadGroup();
        tg = System.getSecurityManager().getThreadGroup();
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ATNFS</key>
    <name>Assignment To Non Final Static</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Identifies a possible unsafe usage of a static field.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class StaticField {
   static int x;
   public FinalFields(int y) {
    x = y; // unsafe
   }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ATNIOSE</key>
    <name>Avoid Throwing New Instance Of Same Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {
    try {
        // do something
    } catch (SomeException se) {
        // harmless comment
        throw new SomeException(se);
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AUHCIP</key>
    <name>Avoid Using Hard Coded IP</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Application with hard-coded IP addresses can become impossible to deploy in some cases. Externalizing IP adresses is preferable.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    private String ip = &amp;quot;127.0.0.1&amp;quot;;     // not recommended
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AUNC</key>
    <name>Avoid Using Native Code</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeJNIClass {

     public SomeJNIClass() {
         System.loadLibrary(&amp;quot;nativelib&amp;quot;);
     }

     static {
         System.loadLibrary(&amp;quot;nativelib&amp;quot;);
     }

     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
         System.loadLibrary(&amp;quot;nativelib&amp;quot;);
     }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AUOV</key>
    <name>Avoid Using Octal Values</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int i = 012;    // set i with 10 not 12
int j = 010;    // set j with 8 not 10
k = i * j;      // set k with 80 not 120&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AbCWAM</key>
    <name>Abstract Class Without Any Method</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If an abstract class does not provides any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class Example {
    String field;
    int otherField;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BNC</key>
    <name>Broken Null Check</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of &amp;&amp; or vice versa.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public String bar(String string) {
  // should be &amp;&amp;
    if (string!=null || !string.equals(&amp;quot;&amp;quot;))
        return string;
  // should be ||
    if (string==null &amp;&amp; string.equals(&amp;quot;&amp;quot;))
        return string;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CASR</key>
    <name>Consecutive Appends Should Reuse</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance by producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found &lt;a href=&quot;https://github.com/pmd/pmd/issues/202#issuecomment-274349067&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String foo = &amp;quot; &amp;quot;;

StringBuffer buf = new StringBuffer();
buf.append(&amp;quot;Hello&amp;quot;); // poor
buf.append(foo);
buf.append(&amp;quot;World&amp;quot;);

StringBuffer buf = new StringBuffer();
buf.append(&amp;quot;Hello&amp;quot;).append(foo).append(&amp;quot;World&amp;quot;); // good&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CCOM</key>
    <name>Constructor Calls Overridable Method</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to debug. It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super(). If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SeniorClass {
  public SeniorClass(){
      toString(); //may throw NullPointerException if overridden
  }
  public String toString(){
    return &amp;quot;IAmSeniorClass&amp;quot;;
  }
}
public class JuniorClass extends SeniorClass {
  private String name;
  public JuniorClass(){
    super(); //Automatic call leads to NullPointerException
    name = &amp;quot;JuniorClass&amp;quot;;
  }
  public String toString(){
    return name.toUpperCase();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CII</key>
    <name>Constants In Interface</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid constants in interfaces. Interfaces should define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface ConstantInterface {
    public static final int CONST1 = 1; // violation, no fields allowed in interface!
    static final int CONST2 = 1;        // violation, no fields allowed in interface!
    final int CONST3 = 1;               // violation, no fields allowed in interface!
    int CONST4 = 1;                     // violation, no fields allowed in interface!
}

// with ignoreIfHasMethods = false
public interface AnotherConstantInterface {
    public static final int CONST1 = 1; // violation, no fields allowed in interface!

    int anyMethod();
}

// with ignoreIfHasMethods = true
public interface YetAnotherConstantInterface {
    public static final int CONST1 = 1; // no violation

    int anyMethod();
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CIS</key>
    <name>Collapsible If Statements</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Sometimes two consecutive ‘if’ statements can be consolidated by separating their conditions with a boolean short-circuit operator.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar() {
    if (x) {            // original implementation
        if (y) {
            // do stuff
        }
    }
}

void bar() {
    if (x &amp;&amp; y) {        // optimized implementation
        // do stuff
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CLA</key>
    <name>Consecutive Literal Appends</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Consecutively calling StringBuffer/StringBuilder.append(…) with literals should be avoided. Since the literals are constants, they can already be combined into a single String literal and this String can be appended in a single method call.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;StringBuilder buf = new StringBuilder();
buf.append(&amp;quot;Hello&amp;quot;).append(&amp;quot; &amp;quot;).append(&amp;quot;World&amp;quot;);    // poor
buf.append(&amp;quot;Hello World&amp;quot;);                          // good

buf.append('h').append('e').append('l').append('l').append('o'); // poor
buf.append(&amp;quot;hello&amp;quot;);                                             // good

buf.append(1).append('m');  // poor
buf.append(&amp;quot;1m&amp;quot;);           // good&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CMMBP</key>
    <name>Clone Method Must Be Public</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The java Manual says “By convention, classes that implement this interface should override Object.clone (which is protected) with a public method.”&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements Cloneable {
    @Override
    protected Object clone() throws CloneNotSupportedException { // Violation, must be public
    }
}

public class Foo implements Cloneable {
    @Override
    protected Foo clone() { // Violation, must be public
    }
}

public class Foo implements Cloneable {
    @Override
    public Object clone() // Ok
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CMRTMMCN</key>
    <name>Clone Method Return Type Must Match Class Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller of the clone method doesn’t need to cast the returned clone to the correct type.&lt;/p&gt;
&lt;p&gt;Note: This is only possible with Java 1.5 or higher.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements Cloneable {
    @Override
    protected Object clone() { // Violation, Object must be Foo
    }
}

public class Foo implements Cloneable {
    @Override
    public Foo clone() { //Ok
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CRS</key>
    <name>Check Result Set</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is ‘false’, it should be handled properly.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Statement stat = conn.createStatement();
ResultSet rst = stat.executeQuery(&amp;quot;SELECT name FROM person&amp;quot;);
rst.next();     // what if it returns false? bad form
String firstName = rst.getString(1);

Statement stat = conn.createStatement();
ResultSet rst = stat.executeQuery(&amp;quot;SELECT name FROM person&amp;quot;);
if (rst.next()) {    // result is properly examined and used
    String firstName = rst.getString(1);
    } else  {
        // handle missing data
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CSB</key>
    <name>Control Statement Braces</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Enforce a policy for braces on control statements. It is recommended to use braces on ‘if … else’ statements and loop statements, even if they are optional. This usually makes the code clearer, and helps prepare the future when you need to add another statement. That said, this rule lets you control which statements are required to have braces via properties.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,
        and IfElseStmtMustUseBraces.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;while (true)    // not recommended
  x++;

while (true) {  // preferred approach
  x++;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CSR</key>
    <name>Check Skip Result</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

   private FileInputStream _s = new FileInputStream(&amp;quot;file&amp;quot;);

   public void skip(int n) throws IOException {
      _s.skip(n); // You are not sure that exactly n bytes are skipped
   }

   public void skipExactly(int n) throws IOException {
      while (n != 0) {
         long skipped = _s.skip(n);
         if (skipped == 0)
            throw new EOFException();
         n -= skipped;
      }
   }&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CTCNSE</key>
    <name>Clone Throws Clone Not Supported Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The method clone() should throw a CloneNotSupportedException.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass implements Cloneable{
    public Object clone() { // will cause an error
         MyClass clone = (MyClass)super.clone();
         return clone;
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CWOPCSBF</key>
    <name>Class With Only Private Constructors Should Be Final</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A class with only private constructors should be final, unless the private constructor is invoked by a inner class.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {  //Should be final
    private Foo() { }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DC</key>
    <name>Data Class</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Data Classes are simple data holders, which reveal most of their state, and without complex functionality. The lack of functionality may indicate that their behaviour is defined elsewhere, which is a sign of poor data-behaviour proximity. By directly exposing their internals, Data Classes break encapsulation, and therefore reduce the system’s maintainability and understandability. Moreover, classes tend to strongly rely on their data representation, which makes for a brittle design.&lt;/p&gt;
&lt;p&gt;Refactoring a Data Class should focus on restoring a good data-behaviour proximity. In most cases, that means moving the operations defined on the data back into the class. In some other cases it may make sense to remove entirely the class and move the data into the former client classes.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class DataClass {

  public int bar = 0;
  public int na = 0;
  private int bee = 0;

  public void setBee(int n) {
    bee = n;
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DI</key>
    <name>Duplicate Imports</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Duplicate or overlapping import statements should be avoided.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.String;
import java.lang.*;
public class Foo {}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DIJL</key>
    <name>Dont Import Java Lang</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid importing anything from the package ‘java.lang’. These classes are automatically imported (JLS 7.5.3).&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.String;    // this is unnecessary

public class Foo {}

// --- in another source code file...

import java.lang.*;         // this is bad

public class Foo {}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DIS</key>
    <name>Dont Import Sun</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid importing anything from the ’sun.*’ packages. These packages are not portable and are likely to change.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import sun.misc.foo;
public class Foo {}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNEJLE</key>
    <name>Do Not Extend Java Lang Error</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Errors are system exceptions. Do not extend them.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Error { }&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNEJLT</key>
    <name>Do Not Extend Java Lang Throwable</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Extend Exception or RuntimeException instead of Throwable.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Throwable { }&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNTEIF</key>
    <name>Do Not Throw Exception In Finally</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Throwing exceptions within a ‘finally’ block is confusing since they may mask other exceptions or code defects. Note: This is a PMD implementation of the Lint4j rule “A throw in a finally block”&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    public void bar() {
        try {
            // Here do some stuff
        } catch( Exception e) {
            // Handling the issue
        } finally {
            // is this really a good idea ?
            throw new Exception();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DP</key>
    <name>Default Package</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Use explicit scoping instead of accidental usage of default package private level. The rule allows methods and fields annotated with Guava’s &lt;span class=&quot;citation&quot; data-cites=&quot;VisibleForTesting&quot;&gt;@VisibleForTesting&lt;/span&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DUFTFLI</key>
    <name>Dont Use Float Type For Loop Indices</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Don’t use floating point for loop indices. If you must use floating point, use double unless you’re certain that float provides enough precision and you have a compelling performance need (space or time).&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Count {
  public static void main(String[] args) {
    final int START = 2000000000;
    int count = 0;
    for (float f = START; f &lt; START + 50; f++)
      count++;
      //Prints 0 because (float) START == (float) (START + 50).
      System.out.println(count);
      //The termination test misbehaves due to floating point granularity.
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EAFC</key>
    <name>Exception As Flow Control</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging. Either add the necessary validation or use an alternate control structure.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {
    try {
        try {
        } catch (Exception e) {
            throw new WrapperException(e);
            // this is essentially a GOTO to the WrapperException catch block
        }
    } catch (WrapperException e) {
        // do some more stuff
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EMIACSBA</key>
    <name>Empty Method In Abstract Class Should Be Abstract</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class ShouldBeAbstract {
    public Object couldBeAbstract() {
        // Should be abstract method ?
        return null;
    }

    public void couldBeAbstract() {
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EN</key>
    <name>Equals Null</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Tests for null should not use the equals() method. The ‘==’ operator should be used instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String x = &amp;quot;foo&amp;quot;;

if (x.equals(null)) {   // bad form
    doSomething();
}

if (x == null) {        // preferred
    doSomething();
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EO</key>
    <name>Extends Object</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;No need to explicitly extend Object.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Object {     // not required
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ESNIL</key>
    <name>Empty Statement Not In Loop</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;An empty statement (or a semicolon by itself) that is not used as the sole body of a ‘for’ or ‘while’ loop is probably a bug. It could also be a double semicolon, which has no purpose and should be removed.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println(&amp;quot;look at the extra semicolon&amp;quot;);;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EmSB</key>
    <name>Empty Statement Block</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Empty block statements serve no purpose and should be removed.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

   private int _bar;

   public void setBar(int bar) {
      { _bar = bar; } // Why not?
      {} // But remove this.
   }

}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FDSBASOC</key>
    <name>Field Declarations Should Be At Start Of Class</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class HelloWorldBean {

  // Field declared before methods / inner classes - OK
  private String _thing;

  public String getMessage() {
    return &amp;quot;Hello World!&amp;quot;;
  }

  // Field declared after methods / inner classes - avoid this
  private String _fieldInWrongLocation;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FFCBS</key>
    <name>Final Field Could Be Static</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
  public final int BAR = 42; // this could be static and save some space
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FLCBF</key>
    <name>For Loop Can Be Foreach</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to access an element of the list or array, only has one update statement, and loops through &lt;em&gt;every&lt;/em&gt; element of the list or array left to right.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {
  void loop(List&lt;String&gt; l) {
    for (int i = 0; i &lt; l.size(); i++) { // pre Java 1.5
      System.out.println(l.get(i));
    }

    for (String s : l) {        // post Java 1.5
      System.out.println(s);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FLSBWL</key>
    <name>For Loop Should Be While Loop</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Some for loops can be simplified to while loops, this makes them more concise.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    void bar() {
        for (;true;) true; // No Init or Update part, may as well be: while (true)
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FLVC</key>
    <name>For Loop Variable Count</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Having a lot of control variables in a ‘for’ loop makes it harder to see what range of values the loop iterates over. By default this rule allows a regular ‘for’ loop with only one variable.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// this will be reported with the default setting of at most one control variable in a for loop
for (int i = 0, j = 0; i &lt; 10; i++, j += 2) {
   foo();&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FO</key>
    <name>Finalize Overloaded</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM.&lt;/p&gt;
&lt;p&gt;Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    // this is confusing and probably a bug
    protected void finalize(int a) {
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FOCSF</key>
    <name>Finalize Only Calls Super Finalize</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;protected void finalize() {
    super.finalize();
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GLS</key>
    <name>Guard Log Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Whenever using a log level, one should check if the loglevel is actually enabled, or otherwise skip the associate String creation and manipulation.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Add this for performance
    if (log.isDebugEnabled() { ...
        log.debug(&amp;quot;log something&amp;quot; + &amp;quot; and &amp;quot; + &amp;quot;concat strings&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GN</key>
    <name>Generics Naming</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Names for references to generic values should be limited to a single uppercase letter.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; extends BaseDao {
    // This is ok...
}

public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; {
    // Also this
}

public interface GenericDao&lt;e extends BaseModel, K extends Serializable&gt; {
    // 'e' should be an 'E'
}

public interface GenericDao&lt;EF extends BaseModel, K extends Serializable&gt; {
   // 'EF' is not ok.
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HCCK</key>
    <name>Hard Coded Crypto Key</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Do not use hard coded values for cryptographic operations. Please store keys outside of source code.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    void good() {
        SecretKeySpec secretKeySpec = new SecretKeySpec(Properties.getKey(), &amp;quot;AES&amp;quot;);
    }

    void bad() {
        SecretKeySpec secretKeySpec = new SecretKeySpec(&amp;quot;my secret here&amp;quot;.getBytes(), &amp;quot;AES&amp;quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ICB</key>
    <name>Identical Catch Branches</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Identical &lt;code&gt;catch&lt;/code&gt; branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;try {
    // do something
} catch (IllegalArgumentException e) {
    throw e;
} catch (IllegalStateException e) { // Can be collapsed into the previous block
    throw e;
}

try {
    // do something
} catch (IllegalArgumentException | IllegalStateException e) { // This is better
    throw e;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ICI</key>
    <name>Insecure Crypto Iv</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    void good() {
        SecureRandom random = new SecureRandom();
        byte iv[] = new byte[16];
        random.nextBytes(bytes);
    }

    void bad() {
        byte[] iv = new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };
    }
    
    void alsoBad() {
        byte[] iv = &amp;quot;secret iv in here&amp;quot;.getBytes();
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IF</key>
    <name>Immutable Field</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Identifies private fields whose values never change once object initialization ends either in the declaration of the field or by a constructor. This helps in converting existing classes to becoming immutable ones.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
  private int x; // could be final
  public Foo() {
      x = 7;
  }
  public void foo() {
     int a = x + 2;
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IFSP</key>
    <name>Import From Same Package</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;There is no need to import a type that lives in the same package.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package foo;

import foo.Buz;     // no need for this
import foo.*;       // or this

public class Bar{}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IO</key>
    <name>Idempotent Operations</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid idempotent operations - they have no effect.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
 public void bar() {
  int x = 2;
  x = x;
 }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IS4MF</key>
    <name>Invalid Slf4j Message Format</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Check for messages in slf4j loggers with non matching number of arguments and placeholders.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;LOGGER.error(&amp;quot;forget the arg {}&amp;quot;);
LOGGER.error(&amp;quot;too many args {}&amp;quot;, &amp;quot;arg1&amp;quot;, &amp;quot;arg2&amp;quot;);
LOGGER.error(&amp;quot;param {}&amp;quot;, &amp;quot;arg1&amp;quot;, new IllegalStateException(&amp;quot;arg&amp;quot;)); //The exception is shown separately, so is correct.&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISB</key>
    <name>Inefficient String Buffering</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will need to be be created and destroyed by the JVM.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Avoid this, two buffers are actually being created here
StringBuffer sb = new StringBuffer(&amp;quot;tmp = &amp;quot;+System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;));

// do this instead
StringBuffer sb = new StringBuffer(&amp;quot;tmp = &amp;quot;);
sb.append(System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;));&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JI</key>
    <name>Jumbled Incrementer</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class JumbledIncrementerRule1 {
    public void foo() {
        for (int i = 0; i &lt; 10; i++) {          // only references 'i'
            for (int k = 0; k &lt; 20; i++) {      // references both 'i' and 'k'
                System.out.println(&amp;quot;Hello&amp;quot;);
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JUASIM</key>
    <name>JUnit Assertions Should Include Message</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;JUnit assertions should include an informative message - i.e., use the three-argument version of assertEquals(), not the two-argument version.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends TestCase {
    public void testSomething() {
        assertEquals(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);
        // Use the form:
        // assertEquals(&amp;quot;Foo does not equals bar&amp;quot;, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);
        // instead
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JUS</key>
    <name>JUnit Spelling</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Some JUnit framework methods are easy to misspell.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import junit.framework.*;

public class Foo extends TestCase {
    public void setup() {}    // oops, should be setUp
    public void TearDown() {} // oops, should be tearDown
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JUTCTMA</key>
    <name>JUnit Test Contains Too Many Asserts</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Unit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which it is harder to verify correctness. Consider breaking the test scenario into multiple, shorter test scenarios. Customize the maximum number of assertions used by this Rule to suit your needs.&lt;/p&gt;
&lt;p&gt;This rule checks for JUnit4, JUnit5 and TestNG Tests, as well as methods starting with “test”.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyTestCase extends TestCase {
    // Ok
    public void testMyCaseWithOneAssert() {
        boolean myVar = false;
        assertFalse(&amp;quot;should be false&amp;quot;, myVar);
    }

    // Bad, too many asserts (assuming max=1)
    public void testMyCaseWithMoreAsserts() {
        boolean myVar = false;
        assertFalse(&amp;quot;myVar should be false&amp;quot;, myVar);
        assertEquals(&amp;quot;should equals false&amp;quot;, false, myVar);
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JUTSIA</key>
    <name>JUnit Tests Should Include Assert</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;JUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends TestCase {
   public void testSomething() {
      Bar b = findBar();
   // This is better than having a NullPointerException
   // assertNotNull(&amp;quot;bar not found&amp;quot;, b);
   b.work();
   }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LHNC</key>
    <name>Local Home Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The Local Home interface of a Session EJB should be suffixed by ‘LocalHome’.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name

public interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LI</key>
    <name>Logic Inversion</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Use opposite operator instead of negating the whole expression with a logic complement operator.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean bar(int a, int b) {

    if (!(a == b)) { // use !=
         return false;
     }

    if (!(a &lt; b)) { // use &gt;=
         return false;
    }

    return true;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LINSF</key>
    <name>Logger Is Not Static Final</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;In most cases, the Logger reference can be declared as static and final.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());                 // not recommended

    static final Logger log = Logger.getLogger(Foo.class.getName());    // preferred approach
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LISNC</key>
    <name>Local Interface Session Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The Local Interface of a Session EJB should be suffixed by ‘Local’.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name

public interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MDBASBNC</key>
    <name>MDBAnd Session Bean Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by ‘Bean’.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeBean implements SessionBean{}                  // proper name

public class MissingTheProperSuffix implements SessionBean {}   // non-standard name&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MNC</key>
    <name>Misplaced Null Check</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The null check here is misplaced. If the variable is null a NullPointerException will be thrown. Either the check is useless (the variable will never be “null”) or it is incorrect.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    void bar() {
        if (a.equals(baz) &amp;&amp; a != null) {}
        }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    void bar() {
        if (a.equals(baz) || a == null) {}
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MO</key>
    <name>Missing Override</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Annotating overridden methods with &lt;span class=&quot;citation&quot; data-cites=&quot;Override&quot;&gt;@Override&lt;/span&gt; ensures at compile time that the method really overrides one, which helps refactoring and clarifies intent.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements Runnable {
                // This method is overridden, and should have an @Override annotation
                public void run() {

                }
            }&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSMINIC</key>
    <name>Missing Static Method In Non Instantiatable Class</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A class that has private constructors and does not have any static methods or fields cannot be used.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// This class is unusable, since it cannot be
// instantiated (private constructor),
// and no static method can be called.

public class Foo {
  private Foo() {}
  void foo() {}
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MTOL</key>
    <name>More Than One Logger</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Normally only one logger is used in each class.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    Logger log = Logger.getLogger(Foo.class.getName());
    // It is very rare to see two loggers on a class, normally
    // log information is multiplexed by levels
    Logger log2= Logger.getLogger(Foo.class.getName());
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NCLISS</key>
    <name>Non Case Label In Switch Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A non-case label (e.g. a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
  void bar(int a) {
   switch (a) {
     case 1:
       // do something
       break;
     mylabel: // this is legal, but confusing!
       break;
     default:
       break;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NP</key>
    <name>No Package</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Detects when a class or interface does not have a package definition.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// no package declaration
public class ClassInDefaultPackage {
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSI</key>
    <name>Non Static Initializer</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {
  // this block gets run before any call to a constructor
  {
    System.out.println(&amp;quot;I am about to construct myself&amp;quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NTSS</key>
    <name>Non Thread Safe Singleton</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an &lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom&quot;&gt;initialize-on-demand holder class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Refrain from using the double-checked locking pattern. The Java Memory Model doesn’t guarantee it to work unless the variable is declared as &lt;code&gt;volatile&lt;/code&gt;, adding an uneeded performance penalty. &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Effective Java, item 48.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static Foo foo = null;

//multiple simultaneous callers may see partially initialized objects
public static Foo getFoo() {
    if (foo==null) {
        foo = new Foo();
    }
    return foo;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OBEAH</key>
    <name>Override Both Equals And Hashcode</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {        // poor, missing a hashcode() method
    public boolean equals(Object o) {
      // do some comparison
    }
}

public class Baz {        // poor, missing an equals() method
    public int hashCode() {
      // return some hash value
    }
}

public class Foo {        // perfect, both methods provided
    public boolean equals(Object other) {
      // do some comparison
    }
    public int hashCode() {
      // return some hash value
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ODPL</key>
    <name>One Declaration Per Line</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String name;            // separate declarations
String lastname;

String name, lastname;  // combined declaration, a violation

String name,
       lastname;        // combined declaration on multiple lines, no violation by default.
                        // Set property strictMode to true to mark this as violation.&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PC</key>
    <name>Package Case</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Detects when a package definition contains uppercase characters.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package com.MyCompany;  // should be lowercase name

public class SomeClass {
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PL</key>
    <name>Proper Logger</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A logger should normally be defined private static final and be associated with the correct class. Private final Log log; is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

    private static final Log LOG = LogFactory.getLog(Foo.class);    // proper way

    protected Log LOG = LogFactory.getLog(Testclass.class);         // wrong approach
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RFFB</key>
    <name>Return From Finally Block</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid returning from a finally block, this can discard exceptions.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {
    public String foo() {
        try {
            throw new Exception( &amp;quot;My Exception&amp;quot; );
        } catch (Exception e) {
            throw e;
        } finally {
            return &amp;quot;A. O. K.&amp;quot;; // return not recommended here
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RFI</key>
    <name>Redundant Field Initializer</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class C {
    boolean b   = false;    // examples of redundant initializers
    byte by     = 0;
    short s     = 0;
    char c      = 0;
    int i       = 0;
    long l      = 0;

    float f     = .0f;    // all possible float literals
    doable d    = 0d;     // all possible double literals
    Object o    = null;

    MyClass mca[] = null;
    int i1 = 0, ia1[] = null;

    class Nested {
        boolean b = false;
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RINC</key>
    <name>Remote Interface Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Remote Interface of a Session EJB should not have a suffix.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;/* Poor Session suffix */
public interface BadSuffixSession extends javax.ejb.EJBObject {}

/* Poor EJB suffix */
public interface BadSuffixEJB extends javax.ejb.EJBObject {}

/* Poor Bean suffix */
public interface BadSuffixBean extends javax.ejb.EJBObject {}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RSINC</key>
    <name>Remote Session Interface Naming Convention</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A Remote Home interface type of a Session EJB should be suffixed by ‘Home’.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name

public interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBA</key>
    <name>Simplify Boolean Assertion</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid negation in an assertTrue or assertFalse test.&lt;/p&gt;
&lt;p&gt;For example, rephrase:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assertTrue(!expr);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assertFalse(expr);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {
    public void testX() {
        assertTrue(&amp;quot;not empty&amp;quot;, !r.isEmpty());  // replace with assertFalse(&amp;quot;not empty&amp;quot;, r.isEmpty())
        assertFalse(!r.isEmpty());              // replace with assertTrue(r.isEmpty())
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBE</key>
    <name>Simplify Boolean Expressions</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {
  // can be simplified to
  // bar = isFoo();
  private boolean bar = (isFoo() == true);

  public isFoo() { return false;}
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBIWC</key>
    <name>String Buffer Instantiation With Char</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Individual character values provided as initialization arguments will be converted into integers. This can lead to internal buffer sizes that are larger than expected. Some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new StringBuffer()      //  16
new StringBuffer(6)     //  6
new StringBuffer(&amp;quot;hello world&amp;quot;)  // 11 + 16 = 27
new StringBuffer('A')   //  chr(A) = 65
new StringBuffer(&amp;quot;A&amp;quot;)   //  1 + 16 = 17 

new StringBuilder()     //  16
new StringBuilder(6)    //  6
new StringBuilder(&amp;quot;hello world&amp;quot;)  // 11 + 16 = 27
new StringBuilder('C')   //  chr(C) = 67
new StringBuilder(&amp;quot;A&amp;quot;)   //  1 + 16 = 17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// misleading instantiation, these buffers
// are actually sized to 99 characters long
StringBuffer  sb1 = new StringBuffer('c');
StringBuilder sb2 = new StringBuilder('c');

// in these forms, just single characters are allocated
StringBuffer  sb3 = new StringBuffer(&amp;quot;c&amp;quot;);
StringBuilder sb4 = new StringBuilder(&amp;quot;c&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBR</key>
    <name>Simplify Boolean Returns</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid unnecessary if-then-else statements when returning a boolean. The result of the conditional test can be returned instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean isBarEqualTo(int x) {
    if (bar == x) {      // this bit of code...
        return true;
    } else {
        return false;
    }
}

public boolean isBarEqualTo(int x) {
    return bar == x;    // can be replaced with this
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SCFN</key>
    <name>Suspicious Constant Field Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Field names using all uppercase characters - Sun’s Java naming conventions indicating constants - should be declared as final.&lt;/p&gt;
&lt;p&gt;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule &lt;a href=&quot;#PMD_FNC&quot;&gt;Field Naming Conventions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
 // this is bad, since someone could accidentally
 // do PI = 2.71828; which is actually e
 // final double PI = 3.16; is ok
  double PI = 3.16;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SCN</key>
    <name>Short Class Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Short Classnames with fewer than e.g. five characters are not recommended.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SCRNI</key>
    <name>Singleton Class Returning New Instance</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Singleton {
    private static Singleton instance = null;
    public static Singleton getInstance() {
        synchronized(Singleton.class) {
            return new Singleton();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SEJBFSBF</key>
    <name>Static EJBField Should Be Final</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;According to the J2EE specification, an EJB should not have any static fields with write access. However, static read-only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeEJB extends EJBObject implements EJBLocalHome {

    private static int CountA;          // poor, field can be edited

    private static final int CountB;    // preferred, read-only access
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SEMN</key>
    <name>Suspicious Equals Method Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The method name and parameter number are suspiciously close to equals(Object), which can denote an intention to override the equals(Object) method.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
   public int equals(Object o) {
     // oops, this probably was supposed to be boolean equals
   }
   public boolean equals(String s) {
     // oops, this probably was supposed to be equals(Object)
   }
   public boolean equals(Object o1, Object o2) {
     // oops, this probably was supposed to be equals(Object)
   }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SF</key>
    <name>Singular Field</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Fields whose scopes are limited to just single methods do not rely on the containing object to provide them to other methods. They may be better implemented as local variables within those methods.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    private int x;  // no reason to exist at the Foo instance level
    public void foo(int y) {
     x = y + 5;
     return x;
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SMS</key>
    <name>Single Method Singleton</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Singleton {

    private static Singleton singleton = new Singleton( );

    private Singleton(){ }

    public static Singleton getInstance( ) {
        return singleton;
    }

    public static Singleton getInstance(Object obj){
        Singleton singleton = (Singleton) obj;
        return singleton;           //violation
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SOE</key>
    <name>Suspicious Octal Escape</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any octal escape sequence followed by non-octal digits can be confusing, e.g. “38” is interpreted as the octal escape sequence “3” followed by the literal character “8”.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() {
  // interpreted as octal 12, followed by character '8'
  System.out.println(&amp;quot;suspicious: \128&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ST</key>
    <name>Simplified Ternary</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Look for ternary operators with the form &lt;code&gt;condition ? literalBoolean : foo&lt;/code&gt; or &lt;code&gt;condition ? foo : literalBoolean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These expressions can be simplified respectively to &lt;code&gt;condition || foo&lt;/code&gt; when the literalBoolean is true &lt;code&gt;!condition &amp;&amp; foo&lt;/code&gt; when the literalBoolean is false or &lt;code&gt;!condition || foo&lt;/code&gt; when the literalBoolean is true &lt;code&gt;condition &amp;&amp; foo&lt;/code&gt; when the literalBoolean is false&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    public boolean test() {
        return condition ? true : something(); // can be as simple as return condition || something();
    }

    public void test2() {
        final boolean value = condition ? false : something(); // can be as simple as value = !condition &amp;&amp; something();
    }

    public boolean test3() {
        return condition ? something() : true; // can be as simple as return !condition || something();
    }

    public void test4() {
        final boolean otherValue = condition ? something() : false; // can be as simple as condition &amp;&amp; something();
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SiDTE</key>
    <name>Signature Declare Throws Exception</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A method/constructor shouldn’t explicitly throw the generic java.lang.Exception, since it is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand such vague interfaces. Use either a class derived from RuntimeException or a checked exception.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() throws Exception {
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>StI</key>
    <name>String Instantiation</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private String bar = new String(&amp;quot;bar&amp;quot;); // just do a String bar = &amp;quot;bar&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TCWTC</key>
    <name>Test Class Without Test Cases</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;//Consider changing the name of the class if it is not a test
//Consider adding test methods if it is a test
public class CarTest {
   public static void main(String[] args) {
    // do something
   }
   // code
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TFBFASS</key>
    <name>Too Few Branches For ASwitch Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use the if-then statement to increase code readability.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// With a minimumNumberCaseForASwitch of 3
public class Foo {
    public void bar() {
        switch (condition) {
            case ONE:
                instruction;
                break;
            default:
                break; // not enough for a 'switch' stmt, a simple 'if' stmt would have been more appropriate
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMSI</key>
    <name>Too Many Static Imports</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import static Lennon;
import static Ringo;
import static George;
import static Paul;
import static Yoko; // Too much !&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UAAL</key>
    <name>Use Arrays As List</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The java.util.Arrays class has a “asList” method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one.&lt;/p&gt;
&lt;p&gt;Note that the result of Arrays.asList() is backed by the specified array, changes in the returned list will result in the array to be modified. For that reason, it is not possible to add new elements to the returned list of Arrays.asList() (UnsupportedOperationException). You must use new ArrayList&lt;&gt;(Arrays.asList(…)) if that is inconvenient for you (e.g. because of concurrent access).&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {
    public void foo(Integer[] ints) {
        // could just use Arrays.asList(ints)
        List&lt;Integer&gt; l= new ArrayList&lt;&gt;(100);
        for (int i=0; i&lt; 100; i++) {
            l.add(ints[i]);
        }
        for (int i=0; i&lt; 100; i++) {
            l.add(a[i].toString()); // won't trigger the rule
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UAEIOAT</key>
    <name>Use Assert Equals Instead Of Assert True</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {
    void testCode() {
        Object a, b;
        assertTrue(a.equals(b));                    // bad usage
        assertEquals(?a should equals b?, a, b);    // good usage
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UANIOAT</key>
    <name>Use Assert Null Instead Of Assert True</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {
    void testCode() {
        Object a = doSomething();
        assertTrue(a==null);    // bad usage
        assertNull(a);          // good usage
        assertTrue(a != null);  // bad usage
        assertNotNull(a);       // good usage
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UASIOAT</key>
    <name>Use Assert Same Instead Of Assert True</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {
    void testCode() {
        Object a, b;
        assertTrue(a == b); // bad usage
        assertSame(a, b);   // good usage
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UATIOAE</key>
    <name>Use Assert True Instead Of Assert Equals</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;When asserting a value is the same as a literal or Boxed boolean, use assertTrue/assertFalse, instead of assertEquals.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyTestCase extends TestCase {
    public void testMyCase() {
        boolean myVar = true;
        // Ok
        assertTrue(&amp;quot;myVar is true&amp;quot;, myVar);
        // Bad
        assertEquals(&amp;quot;myVar is true&amp;quot;, true, myVar);
        // Bad
        assertEquals(&amp;quot;myVar is false&amp;quot;, false, myVar);
        // Bad
        assertEquals(&amp;quot;myVar is true&amp;quot;, Boolean.TRUE, myVar);
        // Bad
        assertEquals(&amp;quot;myVar is false&amp;quot;, Boolean.FALSE, myVar);
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UAVE</key>
    <name>Unnecessary Annotation Value Element</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid the use of value in annotations when it’s the only element.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;@TestClassAnnotation(value = &amp;quot;TEST&amp;quot;)
public class Foo {

    @TestMemberAnnotation(value = &amp;quot;TEST&amp;quot;)
    private String y;

    @TestMethodAnnotation(value = &amp;quot;TEST&amp;quot;)
    public void bar() {
        int x = 42;
        return;
    }
}

// should be

@TestClassAnnotation(&amp;quot;TEST&amp;quot;)
public class Foo {

    @TestMemberAnnotation(&amp;quot;TEST&amp;quot;)
    private String y;

    @TestMethodAnnotation(&amp;quot;TEST&amp;quot;)
    public void bar() {
        int x = 42;
        return;
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UBA</key>
    <name>Unnecessary Boolean Assertion</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false). If you just want a test to halt after finding an error, use the fail() method and provide an indication message of why it did.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {
    public void testX() {
        assertTrue(true);       // serves no real purpose
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UC</key>
    <name>Unnecessary Constructor</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the constructor is identical to the default constructor. The default constructor should has same access modifier as the declaring class. In an enum type, the default constructor is implicitly private.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
  public Foo() {}
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UCC</key>
    <name>Unnecessary Case Change</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;boolean answer1 = buz.toUpperCase().equals(&amp;quot;baz&amp;quot;);              // should be buz.equalsIgnoreCase(&amp;quot;baz&amp;quot;)

boolean answer2 = buz.toUpperCase().equalsIgnoreCase(&amp;quot;baz&amp;quot;);    // another unnecessary toUpperCase()&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UCEL</key>
    <name>Use Correct Exception Logging</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Main {
    private static final Log _LOG = LogFactory.getLog( Main.class );
    void bar() {
        try {
        } catch( Exception e ) {
            _LOG.error( e ); //Wrong!
        } catch( OtherException oe ) {
            _LOG.error( oe.getMessage(), oe ); //Correct
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UCIE</key>
    <name>Use Collection Is Empty</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements. Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    void good() {
        List foo = getList();
        if (foo.isEmpty()) {
            // blah
        }
    }

    void bad() {
        List foo = getList();
        if (foo.size() == 0) {
            // blah
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UCT</key>
    <name>Unnecessary Conversion Temporary</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public String convert(int x) {
    String foo = new Integer(x).toString(); // this wastes an object

    return Integer.toString(x);             // preferred approach
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UDO</key>
    <name>Use Diamond Operator</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Use the diamond operator to let the type be inferred automatically. With the Diamond operator it is possible to avoid duplication of the type parameters. Instead, the compiler is now able to infer the parameter types for constructor calls, which makes the code also more readable.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;List&lt;String&gt; strings = new ArrayList&lt;String&gt;(); // unnecessary duplication of type parameters
List&lt;String&gt; stringsWithDiamond = new ArrayList&lt;&gt;(); // using the diamond operator is more concise&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UEC</key>
    <name>Uncommented Empty Constructor</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public Foo() {
  // This constructor is intentionally empty. Nothing special is needed here.
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UFQN</key>
    <name>Unnecessary Fully Qualified Name</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. Consider using the non-fully qualified name.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.util.List;

public class Foo {
    private java.util.List list1;   // Unnecessary FQN
    private List list2;             // More appropriate given import of 'java.util.List'
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UIS</key>
    <name>Unconditional If Statement</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Do not use “if” statements whose conditionals are always true or always false.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    public void close() {
        if (true) {        // fixed conditional, not recommended
            // ...
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UNAION</key>
    <name>Use Notify All Instead Of Notify</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar() {
    x.notify();
    // If many threads are monitoring x, only one (and you won't know which) will be notified.
    // use instead:
    x.notifyAll();
  }&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UOOI</key>
    <name>Useless Operation On Immutable</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;An operation on an Immutable object (String, BigDecimal or BigInteger) won’t change the object itself since the result of the operation is a new object. Therefore, ignoring the operation result is an error.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.math.*;

class Test {
    void method1() {
        BigDecimal bd=new BigDecimal(10);
        bd.add(new BigDecimal(5));      // this will trigger the rule
    }
    void method2() {
        BigDecimal bd=new BigDecimal(10);
        bd = bd.add(new BigDecimal(5)); // this won't trigger the rule
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UQT</key>
    <name>Useless Qualified This</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Reports qualified this usages in the same class.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    final Foo otherFoo = Foo.this;  // use &amp;quot;this&amp;quot; directly

    public void doSomething() {
         final Foo anotherFoo = Foo.this;  // use &amp;quot;this&amp;quot; directly
    }

    private ActionListener returnListener() {
        return new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doSomethingWithQualifiedThis(Foo.this);  // This is fine
            }
        };
    }

    private class Foo3 {
        final Foo myFoo = Foo.this;  // This is fine
    }

    private class Foo2 {
        final Foo2 myFoo2 = Foo2.this;  // Use &amp;quot;this&amp;quot; direclty
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>USDF</key>
    <name>Unsynchronized Static Date Formatter</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;SimpleDateFormat instances are not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.&lt;/p&gt;
&lt;p&gt;This rule has been deprecated in favor of the rule &lt;a href=&quot;#PMD_USF&quot;&gt;Unsynchronized Static Formatter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    private static final SimpleDateFormat sdf = new SimpleDateFormat();
    void bar() {
        sdf.format(); // poor, no thread-safety
    }
    synchronized void foo() {
        sdf.format(); // preferred
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>USF</key>
    <name>Unsynchronized Static Formatter</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Instances of &lt;code&gt;java.text.Format&lt;/code&gt; are generally not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    private static final SimpleDateFormat sdf = new SimpleDateFormat();
    void bar() {
        sdf.format(); // poor, no thread-safety
    }
    synchronized void foo() {
        sdf.format(); // preferred
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UTWR</key>
    <name>Use Try With Resources</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Java 7 introduced the try-with-resources statement. This statement ensures that each resource is closed at the end of the statement. It avoids the need of explicitly closing the resources in a finally block. Additionally exceptions are better handled: If an exception occurred both in the &lt;code&gt;try&lt;/code&gt; block and &lt;code&gt;finally&lt;/code&gt; block, then the exception from the try block was suppressed. With the &lt;code&gt;try&lt;/code&gt;-with-resources statement, the exception thrown from the try-block is preserved.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class TryWithResources {
    public void run() {
        InputStream in = null;
        try {
            in = openInputStream();
            int i = in.read();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException ignored) {
                // ignored
            }
        }

        // better use try-with-resources
        try (InputStream in2 = openInputStream()) {
            int i = in2.read();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUINL</key>
    <name>Use Underscores In Numeric Literals</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that numeric literals above a certain length use these underscores to increase readability.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        The rule only supports decimal (base 10) literals for now. The acceptable length under which literals
        are not required to have underscores is configurable via a property. Even under that length, underscores
        that are misplaced (not making groups of 3 digits) are reported.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    private int num = 1000000; // should be 1_000_000
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UV</key>
    <name>Use Varargs</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {
    public void foo(String s, Object[] args) {
        // Do something here...
    }

    public void bar(String s, Object... args) {
        // Ahh, varargs tastes much better...
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UnM</key>
    <name>Unnecessary Modifier</name>
    <description>&lt;h3&gt;PMD&lt;/h3&gt;&lt;p&gt;Fields in interfaces and annotations are automatically &lt;code&gt;public static final&lt;/code&gt;, and methods are &lt;code&gt;public abstract&lt;/code&gt;. Classes, interfaces or annotations nested in an interface or annotation are automatically &lt;code&gt;public static&lt;/code&gt; (all nested interfaces and annotations are automatically static). Nested enums are automatically &lt;code&gt;static&lt;/code&gt;. For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public @interface Annotation {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public interface Foo {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public class Bar {
    public static interface Baz {}  // static ignored
    public static enum FoorBar {    // static ignored
        FOO;
    }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CI</key>
    <name>Command Injection</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;In case of command injection the attacker forces the application to execute manipulated OS commands.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Escape not acceptable characters like ';' or '&amp;'. (The given characters are just examples and not a complete list. The list of the characters, which you should take care of, is platform dependent.).&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String dir =request.getParameter(&amp;quot;dir_name&amp;quot;);&amp;#x0A;String osCommand =&amp;quot;c:\\WINDOWS\\SYSTEM32\\cmd.exe /c dir &amp;quot;;&amp;#x0A;Process process =Runtime.getRuntime().exec(osCommand + dir);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;bin &amp; rmdir /S /Q data&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; The bin directory is listed and the data directory with all its subdirectories is deleted.&lt;/p&gt;</description>
    <type>VULNERABILITY</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DLC</key>
    <name>Dynamically Loaded Class</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;Classes loaded by a class loader might contain malicious codes. Static code parts do not even require instantiation of the class in order to execute malicious codes.</description>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HTTPRS</key>
    <name>HTTP Response Splitting</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;In case of HTTP response splitting attack the attacker forces the server to print a carriage return (CR) and line feed (LF) character into a field of the header in order to add new fields or split the response into two by adding an entirely new body with inserting two line breaks.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Check the user input for CR and LF characters.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String author =request.getParameter(AUTHOR_PARAM);&amp;#x0A;Cookie cookie = newCookie(&amp;quot;author&amp;quot;, author);&amp;#x0A;response.addCookie(cookie);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;John\r\nContent-Length: 0\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type:text/html\r\n\r\n&lt;html&gt;&lt;a title=&amp;quot;Click here!!!&amp;quot;href=&amp;quot;http://www.maliciouspage.org/&amp;quot;&gt;&lt;/a&gt;&lt;/html&gt;&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; The attacker creates two responses from one and shows his own malicious page instead of the original.&lt;/p&gt;</description>
    <type>VULNERABILITY</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LDAPI</key>
    <name>LDAP Injection</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;LDAP Injection is an attack used to exploit web-based applications that construct LDAP statements based on user input. Improper sanitization of the user input could result in the execution of arbitrary commands such as granting permissions to unauthorized queries.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; (, ), *, logical (AND &amp;quot;&amp;&amp;quot;, OR &amp;quot;|&amp;quot; and NOT &amp;quot;!&amp;quot;) and relational (=,&gt;=,&lt;=,~=) operators should be filtered out before usage.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String userName =request.getParameter(&amp;quot;user&amp;quot;);&amp;#x0A;String pwd =request.getParameter(&amp;quot;pwd&amp;quot;);&amp;#x0A;String filter = &amp;quot;(&amp;(USER=&amp;quot; +userName + &amp;quot;)(PASSWORD=&amp;quot; + pwd + &amp;quot;))&amp;quot;;&amp;#x0A;LdapContext ctx = new InitialLdapContext();&amp;#x0A;NamingEnumeration&lt;?&gt; results =ctx.search(base, filter, sc);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input: &lt;/b&gt;&lt;/p&gt;&lt;p&gt;userName = &amp;quot;John) (cn=*))(|(cn=*&amp;quot;&lt;/p&gt;&lt;p&gt;pwd = anything&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; Only the first filter is processed by the LDAP server, so the attacker gains access to the system without having avalid password.&lt;/p&gt;</description>
    <type>VULNERABILITY</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PT</key>
    <name>Path Traversal</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;Some programs create a path name from an external input, which gives the opportunity to the attacker to traverse the file system outside the application's folder.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Do not allow &amp;quot;..&amp;quot; or full path to be used in the inputs.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String dir =request.getParameter(&amp;quot;dir_name&amp;quot;);&amp;#x0A;File file = newFile(&amp;quot;C:\\webapp\\&amp;quot; + dir);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;..\Windows\System32\&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; Create a file object that points outside the directory of the web application.&lt;/p&gt;</description>
    <type>VULNERABILITY</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SECC</key>
    <name>Secure Cookie</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;Without setting the secure flag privileged information might be sent over insecure connection even if seemingly secure connection (https) is used.</description>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SQLI</key>
    <name>SQL Injection</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;The purpose of SQL injection attack is to insert malicious inputs into SQL queries. With this type of attack, the attacker can get sensitive information from the database and also modify data with inserted Insert/Update/Delete queries.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Use parameterized queries or at least check the inputs for suspicious keywords or characters.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String userName =request.getParameter(&amp;quot;name&amp;quot;);&amp;#x0A;Statement sqlStatement =dbConnection.createStatement();&amp;#x0A;sqlStatement.executeUpdate(&amp;quot;UPDATEusers SET status='updated' &amp;quot; +&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;WHERE name='&amp;quot; + userName + &amp;quot;'&amp;quot;);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;John&amp;#8217;; DROP TABLE users;--&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; John's status is updated, and then the users table is dropped.&lt;/p&gt;</description>
    <type>VULNERABILITY</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TB</key>
    <name>Trust Boundary</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;Programs often have to cooperate with other programs e.g. exchanging information. This information could be considered validated (no further validation is needed). In that case the provider program is inside of our program's Trust Boundary. If a provider is outside of this boundary all information need to be validated. The hardest task is to determine which programs are inside/outside this boundary.</description>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WCR</key>
    <name>Weak Crypto</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;Encrypting data should be done via algorithms that are not vulnerable. Some algorithms are proven to be vulnerable or could be used with a vulnerable seed that makes it vulnerable too.</description>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WH</key>
    <name>Weak Hash</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;WHen hashing data it is fundamental that the hashed value should be quite unique and impossible to restore the original data. Using weak hashing algorithms hash-collisions could be achieved easily or the original data can be restored quite easily. Hash collision could lead to bypassing authentication as e.g. passwords are stored in hashed forms.</description>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WR</key>
    <name>Weak Randomness</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;Weak Randomness is set when  a(-) method(s) or class(es) is(are) used that generates(generate) random numbers, which are predictable.</description>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XPI</key>
    <name>XPath Injection</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;When accessing XML files queries are usually defined by the user. Values inserted into the query without any validation could lead to unwanted code execution on the XML file.</description>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XSS</key>
    <name>Cross-Site Scripting</name>
    <description>&lt;h3&gt;VulnerabilityHunter&lt;/h3&gt;&lt;p&gt;In a typical cross-site scripting attack the hacker infects a legitimate web page with his malicious client-side script.When a user visits this web page the script is downloaded to his browser and executed.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prevention:&lt;/b&gt; Encode special characters (for example &lt; to &amp;lt) on server side.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;sourcemeter-example-code&quot;&gt;String userName =request.getParameter(&amp;quot;name&amp;quot;);&amp;#x0A;response.getWriter().println(&amp;quot;Welcome&amp;quot; + userName);&amp;#x0A;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Input:&lt;/b&gt; &amp;quot;John&lt;script&gt;alert(document.cookie)&lt;/script&gt;&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; The page will display all the cookies in an alert window.&lt;/p&gt;</description>
    <type>VULNERABILITY</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACNPE</key>
    <name>Avoid Catching NPE</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void bar() {
    try {
    // do something
    } catch (NullPointerException npe) {
    
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACT</key>
    <name>Avoid Catching Throwable</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {
  try {
    // do something
  } catch (Throwable th) { // should not catch Throwable
    th.printStackTrace();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ADNIS</key>
    <name>Avoid Deeply Nested If Stmts</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar(int x, int y, int z) {
    if (x &gt; y) {
      if (y &gt; z) {
        if (z == x) {
          // !! too deep
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AES</key>
    <name>Add Empty String</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific toString() methods instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String s = &amp;quot;&amp;quot; + 123; // inefficient

String t = Integer.toString(456); // preferred approach&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AICICC</key>
    <name>Avoid Instanceof Checks In Catch Clause</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Each caught exception type should be handled in its own catch clause.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;try { // Avoid this
  // do something
} catch (Exception ee) {
  if (ee instanceof IOException) {
    cleanup();
  }
}

try { // Prefer this:
  // do something
} catch (IOException ee) {
  cleanup();
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AIO</key>
    <name>Assignment In Operand</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid Assignments in operands; this can make code more complicated and harder to read.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar(int x, int y, int z) {
    if ((x = y) &gt; 6) { // assignment operator in condition
      z = 9;
    }
  }

}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AISD</key>
    <name>Array Is Stored Directly</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  private String [] x;
  
  public void foo (String [] param) {
    // Don't do this, make a copy of the array at least
    this.x=param;
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>APST</key>
    <name>Avoid Print Stack Trace</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid printStackTrace(); use a logger call instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {

  void bar() {
    try {
      // do something
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ARE</key>
    <name>Avoid Rethrowing Exception</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity. In cases when the rethrowed exception can be caught by following catches are allowed.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {
  try {
    / do something
  } catch (SomeException se) {
    throw se;
  }
}

public void foo(int a) throws IOException {
  try {
    if(a == 20) {
      throw new IOException();
    }
  } catch (IOException e) {
    throw e; // this is pointless
  }
}
  
  public void goo(int a) throws IOException {
    try {
      if(a == 20) {
        throw new IOException();
      } else {
        throw new Eception();
      }
    } catch(IOException e) {
      throw e; // it's OK, we don't want to catch the IOException here.
    } catch(Exception e){
    // do something
    }
  }&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ATNPE</key>
    <name>Avoid Throwing Null Pointer Exception</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception. The rule also warns on null pointer exception instantiations.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void bar() {
    throw new NullPointerException();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ATRET</key>
    <name>Avoid Throwing Raw Exception Types</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead. The rule also warns on raw exception instantiations.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar() throws Exception {
    throw new Exception();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BGMN</key>
    <name>Boolean Get Method Name</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Methods that return boolean results should be named as predicate statements to denote this. I.e, ‘isReady()’, ‘hasValues()’, ‘canCommit()’, ‘willFail()’, etc. Avoid the use of the ‘get’ prefix for these methods.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean getFoo(); // bad

public boolean isFoo(); // ok

public boolean getFoo(boolean bar); // ok&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BI</key>
    <name>Boolean Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Boolean bar = new Boolean(&amp;quot;true&amp;quot;); // unnecessary creation, just reference Boolean.TRUE;

Boolean buz = Boolean.valueOf(false); // ..., just reference Boolean.FALSE;&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BII</key>
    <name>Big Integer Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Don’t create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;BigInteger bi = new BigInteger(1); // reference BigInteger.ONE instead

BigInteger bi2 = new BigInteger(&amp;quot;0&amp;quot;); // reference BigInteger.ZERO instead

BigInteger bi3 = new BigInteger(0.0); // reference BigInteger.ZERO instead

BigInteger bi4;

bi4 = new BigInteger(0); // reference BigInteger.ZERO instead&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ByI</key>
    <name>Byte Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  private Byte i = new Byte(0); // change to Byte i = Byte.valueOf(0);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ClR</key>
    <name>Close Resource</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed in a finally block after use.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {

  public void foo() {
    Connection c = pool.getConnection();
    try {
      // do stuff
    } catch (SQLException ex) {
      // handle exception
    } finally {
      // oops, should close the connection using 'close'!
      // c.close();
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DLNLISS</key>
    <name>Default Label Not Last In Switch Stmt</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;By convention, the default label should be the last label in a switch statement.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void bar(int a) {
    switch (a) {
      case 1: // do something
        break;
      default: // the default case should be last, by convention
        break;
      case 2:
        break;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNCRE</key>
    <name>Do not Call Runtime exec</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Runtime.exec() should not be invoked.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;  void executeCommand(String command) {
    Process process = Runtime.getRuntime().exec(command);
    // ...
  }&lt;/code&gt;&lt;/pre&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNCTIEJB</key>
    <name>Do not Create Threads in EJB</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;The enterprise bean must not attempt to manage threads because it would harm resource management and transaction management.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;@Stateless
public class Example {
  void threadExample() {
    Thread t = new Thread();
    t.run();  // never call Thread.run() in EJB
    t.start();  // never call Thread.start() in EJB
  }
  
  void runnableExample() {
    Runnable r = new Runnable() {
      public void run() {
        // ...
      }
    };
    r.run();  // never call Runnable.run() in EJB
  }
  
  void callableExample() throws Exception {
    Callable&lt;Integer&gt; c = new Callable&lt;Integer&gt;() {
      public Integer call() throws Exception {
        // ...
      }
    };
    c.call();  // never call Callable&lt;T&gt;.call() in EJB
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNULFIEJB</key>
    <name>Do not Use Local Files in EJB</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;java.io.Reader, java.io.InputStream, java.nio.file.Files and javax.imageio.stream.FileImageInputStream should not be used in enterprise bean to access local files.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;@Remote
public class Example {
  void foo() {
    Reader reader = new StringReader(&amp;quot;input.txt&amp;quot;);
    // ...
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNUNQA</key>
    <name>Do Not Use NamedQuery Annotation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;NamedQuery annotations should not be used.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;@NamedQuery(
    name=&amp;quot;findAllEmployee&amp;quot;,
    queryString=&amp;quot;SELECT * FROM Employee&amp;quot;
)
public class Employee {
  // ...
}


@NamedQueries({
  @NamedQuery(name=&amp;quot;Student.findAll&amp;quot;,
              query=&amp;quot;SELECT s FROM Student s&amp;quot;),
  @NamedQuery(name=&amp;quot;Student.findByName&amp;quot;,
              query=&amp;quot;SELECT s FROM Student s WHERE s.name = :name&amp;quot;)
})
public class Student {
  // ...
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNUSIEJB</key>
    <name>Do not Use Synchronized in EJB</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Neither method nor block level synchronization should be used in enterprise bean.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;@Stateless
class Example {
  
  public synchronized void foo() {
    // ...
  }

  public void goo() {
    synchronized(this) {
      // ...
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ECB</key>
    <name>Empty Catch Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Empty Catch Block finds instances where an exception is caught, but nothing is done, except if there is a comment in the code. In most circumstances, this swallows an exception which should either be acted on or reported.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doSomething() {
  try {
  FileInputStream fis = new FileInputStream(&amp;quot;/tmp/bugger&amp;quot;);
  } catch (IOException ioe) {

  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EFB</key>
    <name>Empty Finally Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Empty finally blocks serve no purpose and should be removed.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar() {
    try {
    int x=2;
    } finally {
    // empty!
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EIS</key>
    <name>Empty If Stmt</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Empty If Statement finds instances where a condition is checked but nothing is done about it.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void bar(int x) {
    if (x == 0) {
    // empty!
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EMRC</key>
    <name>Equal Method Returns Constant</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Do not use equals() methods with a constant return value. These are potentially unfinished methods.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

@Override
public boolean equals(Object arg) {
  return true; // returns with constant
}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EOB</key>
    <name>Empty Override Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Do not override an empty method with another empty method. It is useless.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar() {
  
  }
  
}

public class Child extends Foo{

  @Override
  public void bar() { // empty override block

  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ESB</key>
    <name>Empty Synchronized Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Empty synchronized blocks serve no purpose and should be removed.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar() {
    synchronized (this) {
    // empty!
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ESS</key>
    <name>Empty Switch Statements</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Empty switch statements serve no purpose and should be removed.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {
  int x = 2;
  switch (x) {
    // once there was code here
    // but it's been commented out or something
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ETB</key>
    <name>Empty Try Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid empty try blocks - what’s the point?&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar() {
    try {
    
    } catch (Exception e) {
    e.printStackTrace();
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EWS</key>
    <name>Empty While Stmt</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the condition expression (increase, decrease, assign or call a method), no warning is issued.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar(int a, int b) {
  while (a == b) {
    // empty!
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FLMUB</key>
    <name>For Loops Must Use Braces</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid using ‘for’ statements without using curly braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;for (int i = 0; i &lt; 42; i++)
  foo();&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HF</key>
    <name>Hide Field</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Reach fields via getter/setter functions, not by direct reference.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public int i;

}

class Bar {

  public void example() {
    Foo f = new Foo();
    int z = f.i; // should be accessed via a getter
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IESMUB</key>
    <name>If Else Stmts Must Use Braces</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid using if or if..else statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (foo)
  x = x+1;
else
  x = x-1;&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>II</key>
    <name>Integer Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  private Integer i = new Integer(0);
  // change to Integer i = Integer.valueOf(0);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LoC</key>
    <name>Loose Coupling</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.HashSet;

public class Bar {
  // Use List instead
  private ArrayList list = new ArrayList();
  
  // Use Set instead
  public HashSet getFoo() {
    return new HashSet();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LoI</key>
    <name>Long Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  private Long i = new Long(0); // change to Long i = Long.valueOf(0);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MBIS</key>
    <name>Missing Break In Switch</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Switch statements without break, continue, throw or return statements for each case branch may indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through. When the case branch ends with a comment with ‘fall-through’ content are ignored as well. Missing break in the last case branch does not cause any problem so it is also ignored.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar(int status) {
  switch(status) {
    case CANCELLED:
      doCancelled();
      // break; hm, should this be commented out?
    case NEW:
      doNew();
      // is this really a fall-through?
    case REMOVED:
      doRemoved();
      // what happens if you add another case after this one?
    case OTHER: // empty case - this is interpreted as an intentional
      // fall-through
    case ERROR:
      doErrorHandling();
      break;
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MNCTS</key>
    <name>Missing Null Check In ToString</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid using an object’s members in toString methods without checking whether the object is null. A null check may be required to avoid NullPointerException.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  private Object o;

  @Override
  public String toString() {
    return o.toString(); // missing null check
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MWSNAEC</key>
    <name>Method With Same Name As Enclosing Class</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Non-constructor methods should not have the same name as the enclosing class.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {

  public MyClass() {} // this is OK because it is a constructor
  public void MyClass() {} // this is bad because it is a method
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MeNC</key>
    <name>Method Naming Conventions</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Method names should always begin with a lower case character, and should not contain underscores.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void fooStuff() {

  }

}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NFSVMBSB</key>
    <name>Non Final Static Variable Must Be In Synchronized Block</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Non-constant static variable must be used in synchronized block or method.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public static int a;

  public void bar() { // should be synchronized
    if (a == 0){
      a = 10;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PLFIC</key>
    <name>Position Literals First In Comparisons</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Position literals (or static final variables) first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {

  private static final String OK_BUTTON = &amp;quot;OK&amp;quot;;

  boolean bar(String x) {
    return x.equals(&amp;quot;2&amp;quot;); // should be &amp;quot;2&amp;quot;.equals(x)
  }

  boolean isOK(String x) {
    return x.equals(OK_BUTTON); // should be OK_BUTTON.equals(x)
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PLFICIC</key>
    <name>Position Literals First In Case Insensitive Comparisons</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Position literals (or static final variables) first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {

  private static final String OK_BUTTON = &amp;quot;OK&amp;quot;;

  boolean bar(String x) {
    // should be &amp;quot;Bar&amp;quot;.equalsIgnoreCase(x)
    return x.equalsIgnoreCase(&amp;quot;Bar&amp;quot;);
  }

  boolean isOK(String x) {
    // should be OK_BUTTON.equalsIgnoreCase(x)
    return x.equalsIgnoreCase(OK_BUTTON);
  }

}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PST</key>
    <name>Preserve Stack Trace</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Throwing a new exception from a catch block without passing the original exception into the new exception will cause the original stack trace to be lost making it difficult to debug effectively.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void good() {
    try{
      Integer.parseInt(&amp;quot;a&amp;quot;);
    } catch (Exception e) {
      throw new Exception(e); // first possibility to create
      // exception chain
    }
    try {
      Integer.parseInt(&amp;quot;a&amp;quot;);
    } catch (Exception e) {
    throw (IllegalStateException)new IllegalStateException()
      .initCause(e);// second possibility to create exception chain.
    }
  }
  
  void bad() {
    try{
      Integer.parseInt(&amp;quot;a&amp;quot;);
    } catch (Exception e) {
      throw new Exception(e.getMessage()); // loosing the stack trace!
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RHWM</key>
    <name>Replace Hashtable With Map</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void bar() {
    Hashtable h = new Hashtable();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RVWL</key>
    <name>Replace Vector With List</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void bar() {
    Vector v = new Vector();
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SC</key>
    <name>Simplify Conditional</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {

  void bar(Object x) {
    if (x != null &amp;&amp; x instanceof Bar) {
      // just drop the &amp;quot;x != null&amp;quot; check
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SDFNL</key>
    <name>Simple Date Format Needs Locale</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Be sure to specify a Locale when creating java.text.SimpleDateFormat instances to ensure that locale-appropriate formatting is used.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  // Should specify Locale.US (or whatever)
  private SimpleDateFormat sdf = new SimpleDateFormat(&amp;quot;pattern&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SHMN</key>
    <name>Suspicious Hashcode Method Name</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;The method name and return type are suspiciously close to hashCode(), which may denote an intention to override the hashCode() method.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public int hashcode() { 
    // oops, this probably was
    // supposed to be 'hashCode'
  }

}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SI</key>
    <name>Short Instantiation</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf(). It makes use of an internal cache that recycles earlier instances making it more memory efficient.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  private Short i = new Short(0); // change to Short i = Short.valueOf(0);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SMN</key>
    <name>Short Method Name</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Method names that are very short are not helpful to the reader. Names like ‘or’, ‘in’, ‘lt’, ‘gt’, ‘eq’, ‘le’, ‘ge’, ‘ne’ are allowed.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class ShortMethod {

  public void a( int i ) { // Violation

  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SP</key>
    <name>System Println</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Printing to System.(out|err) is usually intended for debugging purposes and should not remain in the code.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  Logger log = Logger.getLogger(Foo.class.getName());

  public void testA() {

    System.out.println(&amp;quot;Entering&amp;quot;);

    // Better use this

    log.info(&amp;quot;Entering&amp;quot;);

  }

}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSSHD</key>
    <name>Switch Stmts Should Have Default</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;All switch statements should include a default option to catch any unspecified values.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {
  int x = 2;
  switch (x) {
  case 1: int j = 6;
  case 2: int j = 8;
    // missing default: here
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMR</key>
    <name>Too Many Returns</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Do not use more than one return statement in a method. Too many return statements can make a method less understandable.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void bar(int x, int y, int z) { // too many returns
    if (x &gt; y &amp;&amp; x &gt; z) {
      return x;
    } else if (y &gt; x &amp;&amp; y &gt; z) {
      return y;
    } else {
      return z;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UALIOV</key>
    <name>Use Array List Instead Of Vector</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {

  public void testX() {
    Collection c1 = new Vector();
    Collection c2 = new ArrayList(); // achieves the same
    // with much better performance
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UEM</key>
    <name>Uncommented Empty Method</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doSomething() {

}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UETCS</key>
    <name>Use Equals To Compare Strings</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Using ‘==’ or ‘!=’ to compare strings only works if intern version is used on both sides. Use the equals() method instead.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean test(String s) {
  if (s == &amp;quot;one&amp;quot;) return true; // unreliable
  if (&amp;quot;two&amp;quot;.equals(s)) return true; // better
  return false;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ULBR</key>
    <name>Unnecessary Local Before Return</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Consider simply returning the value vs storing it in a local variable.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public int foo() {
    int x = doSomething();
    return x; // instead, just 'return doSomething();'
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ULV</key>
    <name>Unused Local Variable</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Detects when a local variable is just declared, but not used.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  public void doSomething() {
    int i = 5; // Unused
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ULWCC</key>
    <name>Use Locale With Case Conversions</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoid problems with languages that have unusual conventions, i.e. Turkish.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {
  // BAD
  if (x.toLowerCase().equals(&amp;quot;list&amp;quot;))...
  // This will not match &amp;quot;LIST&amp;quot; when in Turkish locale
  // The above could be
  // if (x.toLowerCase(Locale.US).equals(&amp;quot;list&amp;quot;)) ...
  // or simply
  // if (x.equalsIgnoreCase(&amp;quot;list&amp;quot;)) ...
  // GOOD

  String z = a.toLowerCase(Locale.EN);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UOM</key>
    <name>Useless Overriding Method</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;The overriding method merely calls the same method defined in a superclass.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo(String bar) {
  super.foo(bar); // why bother overriding?
}

public String foo() {
  return super.foo(); // why bother overriding?
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UPF</key>
    <name>Unused Private Field</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Detects when a private field is just declared, but not used.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Something {

  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  
  public int addOne() {
    return j++;
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UPM</key>
    <name>Unused Private Method</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Unused Private Method&lt;/b&gt;: Unused Private Method detects when a private method is declared but is unused.&lt;/p&gt; &lt;p&gt;Example(s):&lt;/p&gt;  &lt;pre class=&quot;sourcemeter-example-code&quot;&gt;  public class Something {&amp;#x0A;  &amp;nbsp; private void foo() {} // unused&amp;#x0A;  }&amp;#x0A;  &lt;/pre&gt;</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>USBFSA</key>
    <name>Use String Buffer For String Appends</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {

  void bar() {
    String a;
    a = &amp;quot;foo&amp;quot;;
    a += &amp;quot; bar&amp;quot;;
    // better would be:
    // StringBuilder a = new StringBuilder(&amp;quot;foo&amp;quot;);
    // a.append(&amp;quot; bar&amp;quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UnI</key>
    <name>Unused Imports</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.io.*; // not referenced or required

public class Foo {}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WLMUB</key>
    <name>While Loops Must Use Braces</name>
    <description>&lt;h3&gt;FaultHunter&lt;/h3&gt;&lt;p&gt;Avoid using ‘while’ statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.&lt;/p&gt;
&lt;p&gt;Example(s):&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;while (true) // not recommended
  x++;
while (true) { // preferred approach
  x++;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CSF</key>
    <name>Call Super First</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Call Super First:&lt;/b&gt; Super call should be the first method invocation in the override ofthe following methods of the Activity, Application, Service and Fragmentclasses:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;onCreate()&lt;/li&gt;&lt;li&gt;onConfigurationChanged()&lt;/li&gt;&lt;li&gt;onPostCreate()&lt;/li&gt;&lt;li&gt;onPostResume()&lt;/li&gt;&lt;li&gt;onRestart()&lt;/li&gt;&lt;li&gt;onRestorInstanceState()&lt;/li&gt;&lt;li&gt;onResume()&lt;/li&gt;&lt;li&gt;onStart()&lt;/li&gt;&lt;/ul&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; public void onCreate(Bundle bundle) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; foo();&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onCreate(bundle);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CSL</key>
    <name>Call Super Last</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Call Super Last:&lt;/b&gt; Super call should be the last method invocation in the override ofthe following methods of the Activity, Application, Service and Fragment classes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;finish()&lt;/li&gt;&lt;li&gt;onDestroy()&lt;/li&gt;&lt;li&gt;onPause()&lt;/li&gt;&lt;li&gt;onSaveInstanceState()&lt;/li&gt;&lt;li&gt;onStop()&lt;/li&gt;&lt;li&gt;onTerminate()&lt;/li&gt;&lt;/ul&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; public void onStop() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onStop();&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; foo();&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNHCSDC</key>
    <name>Do not hard code the SD card.</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Do Not Hard Code SD Card:&lt;/b&gt; Hard-coding external storage directory can easily lead to faults, asit can differ on different devices. Instead of &amp;#8220;/sdcard&amp;#8221; use thegetExternalStorageDirectory() method of the android.os.Environment class.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; public void foo() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; String storage =&amp;#8220;/sdcard/myfolder&amp;#8221;;&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNODICP</key>
    <name>Do Not Open Database In ContentProvider</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Do Not Open Database In ContentProvider:&lt;/b&gt; Database upgrade may take a long time, you should not call thegetWritableDatabase() and the getReadableDatabase() methods from the ContentProvider.onCreate().&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyContentProvider extends ContentProvider{&amp;#x0A;&amp;nbsp; public boolean onCreate() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; DatabaseHelper foo = newDatabaseHelper(getContext());&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; SQLiteDatabase db = foo.getReadableDatabase();&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNSBF</key>
    <name>Database Name Should Be Final</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Database Name Should Be Final:&lt;/b&gt; The name of a database should be final, if it is possible.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class DatabaseHelper extends SQLiteOpenHelper{&amp;#x0A;&amp;nbsp; private String DATABASE_NAME =&amp;#8220;mydatabase.db&amp;#8221;&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; // The content of DATABASE_NAME doesnot change&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; DatabaseHelper(Context context) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context,DATABASE_NAME, DATABASE_VERSION);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISC</key>
    <name>Is Super Called</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Is Super Called:&lt;/b&gt; In the classes, which inherits from Activity, you must call throughto the super class's implementation, if you override the so-called lifecycle methods.Otherwise, an exception will be thrown.The Activity&amp;#8217;s lifecycle methodsare the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;onCreate()&lt;/li&gt;&lt;li&gt;onStart()&lt;/li&gt;&lt;li&gt;onPause()&lt;/li&gt;&lt;li&gt;onResume()&lt;/li&gt;&lt;li&gt;onDestroy()&lt;/li&gt;&lt;li&gt;onRestart()&lt;/li&gt;&lt;li&gt;onStop()&lt;/li&gt;&lt;li&gt;onSaveInstanceState()&lt;/li&gt;&lt;/ul&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity{&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onCreate(BundlesavedInstanceState) {&amp;#x0A;&amp;nbsp; &amp;nbsp;&amp;nbsp;...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing super.onCreate()&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; protected void onStop() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing super.onStop()&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISCF</key>
    <name>Is Super Called Fragment</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Is Super Called Fragment:&lt;/b&gt; In the classes, which extends Fragment, you must call through tothe super class's implementation, if you override the following methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;onInflate()&lt;/li&gt;&lt;li&gt;onAttach()&lt;/li&gt;&lt;li&gt;onCreate()&lt;/li&gt;&lt;li&gt;onActivityCreated()&lt;/li&gt;&lt;li&gt;onViewStateRestored()&lt;/li&gt;&lt;li&gt;onStart()&lt;/li&gt;&lt;li&gt;onResume()&lt;/li&gt;&lt;li&gt;onConfigurationChanged ()&lt;/li&gt;&lt;li&gt;onPause()&lt;/li&gt;&lt;li&gt;onStop()&lt;/li&gt;&lt;li&gt;onLowMemory()&lt;/li&gt;&lt;li&gt;onTrimMemory()&lt;/li&gt;&lt;li&gt;onDestroyView()&lt;/li&gt;&lt;li&gt;onDestroy()&lt;/li&gt;&lt;li&gt;onDetach()&lt;/li&gt;&lt;/ul&gt;Otherwise, an exception will be thrown.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyFragment extends Fragment{&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onAttach(Activity activity){&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing super.onAttach(activity)&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MRU</key>
    <name>Missing Remove Updates</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Missing Remove Updates:&lt;/b&gt; If you attach a listener to a location resource then you shouldalways detach it.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity implementsLocationListener {&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onStart(BundlesavedInstanceState) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; myLocationManager.requestLocationUpdates(&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LocationManager.GPS_PROVIDER,0, 0, this);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; //Missing lm.removeUpdates(this);&amp;#x0A;&amp;nbsp; ...&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MURIA</key>
    <name>Missing Unregister Receiver In Activity</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Missing Unregister Receiver In Activity:&lt;/b&gt; If you register a receiver in your Activity.onResume()implementation, you should unregister it in Activity.onPause() You won'treceive intents when paused, and this will cut down on unnecessary systemoverhead.&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity {&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onResume() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; registerReceiver(myReceiver,new IntentFilter(&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onPause() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Missing unregisterReceiver(myReceiver);&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRITWP</key>
    <name>Resource Release In The Wrong Place</name>
    <description>&lt;h3&gt;AndroidHunter&lt;/h3&gt;&lt;p&gt;&lt;b&gt;Resource Release In The Wrong Place:&lt;/b&gt; Do not place any release of resources inActivity.onSaveInstanceState(), because this callback is not always called whenan activity is being placed in the background or on its way to destruction. Anideal place to release resources is the Activity.onPause().&lt;/p&gt;&lt;p&gt;Example(s):&lt;/p&gt;&lt;pre&gt;public class MyActivity extends Activity {&amp;#x0A;&amp;nbsp; @Override&amp;#x0A;&amp;nbsp; public void onSaveInstanceState(BundeloutState) {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp;unregisterReceiver(myReceiver); //wrong place&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; public void onPause() {&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; unregisterReceiver(myReceiver);//good place&amp;#x0A;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;#x0A;&amp;nbsp; }&amp;#x0A;}&amp;#x0A;&lt;/pre&gt;</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACEJFE</key>
    <name>Creates Empty Jar File Entry</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code calls &lt;code&gt;putNextEntry()&lt;/code&gt;, immediately followed by a call to &lt;code&gt;closeEntry()&lt;/code&gt;. This results in an empty JarFile entry. The contents of the entry should be written to the JarFile between the calls to &lt;code&gt;putNextEntry()&lt;/code&gt; and &lt;code&gt;closeEntry()&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACEZFE</key>
    <name>Creates Empty Zip File Entry</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code calls &lt;code&gt;putNextEntry()&lt;/code&gt;, immediately followed by a call to &lt;code&gt;closeEntry()&lt;/code&gt;. This results in an empty ZipFile entry. The contents of the entry should be written to the ZipFile between the calls to &lt;code&gt;putNextEntry()&lt;/code&gt; and &lt;code&gt;closeEntry()&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACF</key>
    <name>Explicit Invocation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains an explicit invocation of the &lt;code&gt;finalize()&lt;/code&gt; method on an object.  Because finalizer methods are supposed to be executed once, and only by the VM, this is a bad idea.&lt;/p&gt;
&lt;p&gt;If a connected set of objects beings finalizable, then the VM will invoke the finalize method on all the finalizable object, possibly at the same time in different threads. Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize on objects referenced by X, because they may already be getting finalized in a separate thread.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ADLIBDC</key>
    <name>Bigdecimal Constructed From Double</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates a BigDecimal from a double value that doesn’t translate well to a decimal number. For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AOSOCA</key>
    <name>Operation Sequence On Concurrent Abstraction</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map). These calls will not be executed atomically.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>APFIFC</key>
    <name>Confused Inheritance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class is declared to be final, but declares fields to be protected. Since the class is final, it can not be derived from, and the use of protected is confusing. The access modifier for the field should be changed to private or public to represent the true use for the field.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BA</key>
    <name>And</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares an expression of the form (e &amp; C) to D, which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BAOSB</key>
    <name>Add Of Signed Byte</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Adds a byte value and a value which is known to have the 8 lower bits clear. Values loaded from a byte array are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if &lt;code&gt;b[0]&lt;/code&gt; contains the value &lt;code&gt;0xff&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; is initially 0, then the code &lt;code&gt;((x &lt;&lt; 8) + b[0])&lt;/code&gt; will sign extend &lt;code&gt;0xff&lt;/code&gt; to get &lt;code&gt;0xffffffff&lt;/code&gt;, and thus give the value &lt;code&gt;0xffffffff&lt;/code&gt; as the result.&lt;/p&gt;
&lt;p&gt;In particular, the following code for packing a byte array into an int is badly wrong:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;
for(int i = 0; i &lt; 4; i++)
    result = ((result &lt;&lt; 8) + b[i]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following idiom will work instead:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;
for(int i = 0; i &lt; 4; i++)
    result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BAZ</key>
    <name>And Zz</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares an expression of the form &lt;code&gt;(e &amp; 0)&lt;/code&gt; to 0, which will always compare equal. This may indicate a logic error or typo.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BBCTAC</key>
    <name>Bad Cast To Abstract Collection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code casts a Collection to an abstract collection (such as &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or &lt;code&gt;Map&lt;/code&gt;). Ensure that you are guaranteed that the object is of the type you are casting to. If all you need is to be able to iterate through a collection, you don’t need to cast it to a Set or List.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BBCTCC</key>
    <name>Bad Cast To Concrete Collection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code casts an abstract collection (such as a Collection, List, or Set) to a specific concrete implementation (such as an ArrayList or HashSet). This might not be correct, and it may make your code fragile, since it makes it harder to switch to other concrete implementations at a future point. Unless you have a particular reason to do so, just use the abstract collection class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BBIU</key>
    <name>Boxing Immediately Unboxed</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A primitive is boxed, and then immediately unboxed. This probably is due to a manual boxing in a place where an unboxed value is required, thus forcing the compiler to immediately undo the work of the boxing.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BBIUTPC</key>
    <name>Boxing Immediately Unboxed To Perform Coercion</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A primitive boxed value constructed and then immediately converted into a different primitive type (e.g., &lt;code&gt;new Double(d).intValue()&lt;/code&gt;). Just perform direct primitive coercion (e.g., &lt;code&gt;(int) d&lt;/code&gt;).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BBOA</key>
    <name>Badly Overridden Adapter</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method overrides a method found in a parent class, where that class is an Adapter that implements a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not get called when the event occurs.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BC</key>
    <name>Test If Equal To Not A Number</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code checks to see if a floating point value is equal to the special Not A Number value (e.g., &lt;code&gt;if (x == Double.NaN)&lt;/code&gt;). However, because of the special semantics of &lt;code&gt;NaN&lt;/code&gt;, no value is equal to &lt;code&gt;Nan&lt;/code&gt;, including &lt;code&gt;NaN&lt;/code&gt;. Thus, &lt;code&gt;x == Double.NaN&lt;/code&gt; always evaluates to false. To check to see if a value contained in &lt;code&gt;x&lt;/code&gt; is the special Not A Number value, use &lt;code&gt;Double.isNaN(x)&lt;/code&gt; (or &lt;code&gt;Float.isNaN(x)&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is floating point precision).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BEMSWFAO</key>
    <name>Equals Method Should Work For All Objects</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;equals(Object o)&lt;/code&gt; method shouldn’t make any assumptions about the type of &lt;code&gt;o&lt;/code&gt;. It should simply return false if &lt;code&gt;o&lt;/code&gt; is not the same type as &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BIC</key>
    <name>Impossible Cast</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This cast will always throw a ClassCastException. SpotBugs tracks type information from instanceof checks, and also uses more precise information about the types of values returned from methods and loaded from fields. Thus, it may have more precise information that just the declared type of a variable, and can use this to determine that a cast will always throw an exception at runtime.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BID</key>
    <name>Impossible Downcast</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BIOSB</key>
    <name>Ior Of Signed Byte</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Loads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value. Byte values are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if &lt;code&gt;b[0]&lt;/code&gt; contains the value &lt;code&gt;0xff&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; is initially 0, then the code &lt;code&gt;((x &lt;&lt; 8) | b[0])&lt;/code&gt; will sign extend &lt;code&gt;0xff&lt;/code&gt; to get &lt;code&gt;0xffffffff&lt;/code&gt;, and thus give the value &lt;code&gt;0xffffffff&lt;/code&gt; as the result.&lt;/p&gt;
&lt;p&gt;In particular, the following code for packing a byte array into an int is badly wrong:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;
for(int i = 0; i &lt; 4; i++) {
    result = ((result &lt;&lt; 8) | b[i]);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following idiom will work instead:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;
for(int i = 0; i &lt; 4; i++) {
    result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BSC</key>
    <name>Signed Check</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares an expression such as &lt;code&gt;((event.detail &amp; SWT.SELECTED) &gt; 0)&lt;/code&gt;. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results (of course depending on the value of SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate for a bug. Even when SWT.SELECTED is not negative, it seems good practice to use ‘!= 0’ instead of ‘&gt; 0’.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BSCHB</key>
    <name>Signed Check High Bit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares a bitwise expression such as &lt;code&gt;((val &amp; CONSTANT) &gt; 0)&lt;/code&gt; where CONSTANT is the negative number. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results. This comparison is unlikely to work as expected. The good practice is to use ‘!= 0’ instead of ‘&gt; 0’.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BUACFTO</key>
    <name>Unboxed And Coerced For Ternary Operator</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A wrapped primitive value is unboxed and converted to another primitive type as part of the evaluation of a conditional ternary operator (the &lt;code&gt;b ? e1 : e2&lt;/code&gt; operator). The semantics of Java mandate that if &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are wrapped numeric values, the values are unboxed and converted/coerced to their common type (e.g, if &lt;code&gt;e1&lt;/code&gt; is of type &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; is of type &lt;code&gt;Float&lt;/code&gt;, then &lt;code&gt;e1&lt;/code&gt; is unboxed, converted to a floating point value, and boxed. See JLS Section 15.25.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BUC</key>
    <name>Unconfirmed Cast</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This cast is unchecked, and not all instances of the type casted from can be cast to the type it is being cast to. Check that your program logic ensures that this cast will not fail.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BUCORV</key>
    <name>Unconfirmed Cast Of Return Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code performs an unchecked cast of the return value of a method. The code might be calling the method in such a way that the cast is guaranteed to be safe, but SpotBugs is unable to verify that the cast is safe. Check that your program logic ensures that this cast will not fail.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BUIR</key>
    <name>Unboxing Immediately Reboxed</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A boxed value is unboxed and then immediately reboxed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BVI</key>
    <name>Vacuous Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instanceof test will always return true (unless the value being tested is null). Although this is safe, make sure it isn’t an indication of some misunderstanding or some other logic error. If you really want to test the value for being null, perhaps it would be clearer to do better to do a null test rather than an instanceof test.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BWAP</key>
    <name>Wrong Add Priority</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code performs an operation like (x &lt;&lt; 8 + y). Although this might be correct, probably it was meant to perform (x &lt;&lt; 8) + y, but shift operation has a lower precedence, so it’s actually parsed as x &lt;&lt; (8 + y).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BcII</key>
    <name>Impossible Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instanceof test will always return false. Although this is safe, make sure it isn’t an indication of some misunderstanding or some other logic error.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BiI</key>
    <name>Ior</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares an expression of the form &lt;code&gt;(e | C)&lt;/code&gt; to D. which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.&lt;/p&gt;
&lt;p&gt;Typically, this bug occurs because the code wants to perform a membership test in a bit set, but uses the bitwise OR operator (“|”) instead of bitwise AND (“&amp;”).&lt;/p&gt;
&lt;p&gt;Also such bug may appear in expressions like &lt;code&gt;(e &amp; A | B) == C&lt;/code&gt; which is parsed like &lt;code&gt;((e &amp; A) | B) == C&lt;/code&gt; while &lt;code&gt;(e &amp; (A | B)) == C&lt;/code&gt; was intended.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CAS</key>
    <name>Abstract Self</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;This class defines a covariant version of `compareTo()`.  To correctly
override the `compareTo()` method in the `Comparable` interface, the
parameter of `compareTo()` must have type `java.lang.Object`.
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CCEWTA</key>
    <name>Impossible Downcast Of Toarray</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code is casting the result of calling &lt;code&gt;toArray()&lt;/code&gt; on a collection to a type more specific than &lt;code&gt;Object[]&lt;/code&gt;, as in:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String[] getAsArray(Collection&lt;String&gt; c) {
    return (String[]) c.toArray();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will usually fail by throwing a ClassCastException. The &lt;code&gt;toArray()&lt;/code&gt; of almost all collections return an &lt;code&gt;Object[]&lt;/code&gt;. They can’t really do anything else, since the Collection object has no reference to the declared generic type of the collection.&lt;/p&gt;
&lt;p&gt;The correct way to do get an array of a specific type from a collection is to use &lt;code&gt;c.toArray(new String[]);&lt;/code&gt; or &lt;code&gt;c.toArray(new String[c.size()]);&lt;/code&gt; (the latter is slightly more efficient).&lt;/p&gt;
&lt;p&gt;There is one common/known exception to this. The &lt;code&gt;toArray()&lt;/code&gt; method of lists returned by &lt;code&gt;Arrays.asList(...)&lt;/code&gt; will return a covariantly typed array. For example, &lt;code&gt;Arrays.asArray(new String[] { &amp;quot;a&amp;quot; }).toArray()&lt;/code&gt; will return a &lt;code&gt;String []&lt;/code&gt;. SpotBugs attempts to detect and suppress such cases, but may miss some.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CCIF</key>
    <name>Compareto Incorrect Floating</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares double or float values using pattern like this: val1 &gt; val2 ? 1 : val1 &lt; val2 ? -1 : 0. This pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection (if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all the special cases correctly.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CCRMV</key>
    <name>Compareto Results Min Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, which is an exceptionally bad practice. The only thing that matters about the return value of compareTo is the sign of the result. But people will sometimes negate the return value of compareTo, expecting that this will negate the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE. So just return -1 rather than Integer.MIN_VALUE.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CICBNC</key>
    <name>Implements Clone But Not Cloneable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a clone() method but the class doesn’t implement Cloneable. There are some situations in which this is OK (e.g., you want to control how subclasses can clone themselves), but just make sure that this is what you intended.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CNC</key>
    <name>Class Naming Convention</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CRCV</key>
    <name>Rough Constant Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;It’s recommended to use the predefined library constant for code clarity and better precision.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CSNO</key>
    <name>Self No Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;This class defines a covariant version of `compareTo()`.  To correctly
override the `compareTo()` method in the `Comparable` interface, the
parameter of `compareTo()` must have type `java.lang.Object`.
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ClMMIC</key>
    <name>Idiom</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Class implements Cloneable but does not define or use the clone method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DAINVTR</key>
    <name>Annotation Is Not Visible To Reflection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Unless an annotation has itself been annotated with &lt;span class=&quot;citation&quot; data-cites=&quot;Retention&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME), the annotation can’t be observed using reflection (e.g., by using the isAnnotationPresent method). .&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DAWO</key>
    <name>Arguments Wrong Order</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The arguments to this method call seem to be in the wrong order. For example, a call &lt;code&gt;Preconditions.checkNotNull(&amp;quot;message&amp;quot;, message)&lt;/code&gt; has reserved arguments: the value to be checked is the first argument.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DBC</key>
    <name>Boolean Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Creating new instances of &lt;code&gt;java.lang.Boolean&lt;/code&gt; wastes memory, since &lt;code&gt;Boolean&lt;/code&gt; objects are immutable and there are only two useful values of this type.  Use the &lt;code&gt;Boolean.valueOf()&lt;/code&gt; method (or Java 1.5 autoboxing) to create &lt;code&gt;Boolean&lt;/code&gt; objects instead.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DBM</key>
    <name>Bad Month</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code passes a constant month value outside the expected range of 0..11 to a method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DBMOU</key>
    <name>Blocking Methods On Url</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See &lt;a href=&quot;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&quot; class=&quot;uri&quot;&gt;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&lt;/a&gt; for more information. Consider using &lt;code&gt;java.net.URI&lt;/code&gt; instead.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DBPFC</key>
    <name>Boxed Primitive For Compare</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A boxed primitive is created just to call compareTo method. It’s more efficient to use static compare method (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DBPFP</key>
    <name>Boxed Primitive For Parsing</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A boxed primitive is created from a String, just to extract the unboxed primitive value. It is more efficient to just call the static parseXXX method.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DBPT</key>
    <name>Boxed Primitive Tostring</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So,&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Replace…&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;With this…&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;new Integer(1).toString()&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Integer.toString(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;new Long(1).toString()&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Long.toString(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;new Float(1.0).toString()&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Float.toString(1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;new Double(1.0).toString()&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Double.toString(1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;new Byte(1).toString()&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Byte.toString(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;new Short(1).toString()&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Short.toString(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;new Boolean(true).toString()&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Boolean.toString(true)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DCCIDP</key>
    <name>Create Classloader Inside Do Privileged</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates a classloader, which needs permission if a security manage is installed. If this code might be invoked by code that does not have security permissions, then the classloader creation needs to occur inside a doPrivileged block.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DCDP</key>
    <name>Constant Db Password</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can easily learn the password.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DCL</key>
    <name>Doublecheck</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method may contain an instance of double-checked locking.  This idiom is not correct according to the semantics of the Java memory model.  For more information, see the web page &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot; class=&quot;uri&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DCNFH</key>
    <name>Calling Next From Hasnext</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The hasNext() method invokes the next() method. This is almost certainly wrong, since the hasNext() method is not supposed to change the state of the iterator, and the next method is supposed to change the state of the iterator.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DCOU</key>
    <name>Collection Of Urls</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See &lt;a href=&quot;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&quot; class=&quot;uri&quot;&gt;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&lt;/a&gt; for more information. Consider using &lt;code&gt;java.net.URI&lt;/code&gt; instead.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DCSNCT</key>
    <name>Collections Should Not Contain Themselves</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This call to a generic collection’s method would only make sense if a collection contained itself (e.g., if &lt;code&gt;s.contains(s)&lt;/code&gt; were true). This is unlikely to be true and would cause problems if it were true (such as the computation of the hash code resulting in infinite recursion). It is likely that the wrong value is being passed as a parameter.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DCTR</key>
    <name>Invoke Run</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method explicitly invokes &lt;code&gt;run()&lt;/code&gt; on an object.  In general, classes implement the &lt;code&gt;Runnable&lt;/code&gt; interface because they are going to have their &lt;code&gt;run()&lt;/code&gt; method invoked in a new thread, in which case &lt;code&gt;Thread.start()&lt;/code&gt; is the right method to call.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDB</key>
    <name>Duplicate Branches</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method uses the same code to implement two branches of a conditional branch. Check to ensure that this isn’t a coding mistake.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDE</key>
    <name>Default Encoding</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDIDP</key>
    <name>Do Inside Do Privileged</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code invokes a method that requires a security permission check. If this code will be granted security permissions, but might be invoked by code that does not have security permissions, then the invocation needs to occur inside a doPrivileged block.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDLS</key>
    <name>Dead Local Store</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used.&lt;/p&gt;
&lt;p&gt;Note that Sun’s javac compiler often generates dead stores for final local variables. Because SpotBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDLSIR</key>
    <name>Dead Local Store In Return</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This statement assigns to a local variable in a return statement. This assignment has effect. Please verify that this statement does the right thing.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDLSON</key>
    <name>Dead Local Store Of Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code stores null into a local variable, and the stored value is not read. This store may have been introduced to assist the garbage collector, but as of Java SE 6.0, this is no longer needed or useful.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDLSSF</key>
    <name>Dead Local Store Shadows Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used. There is a field with the same name as the local variable. Did you mean to assign to that variable instead?&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDSC</key>
    <name>Duplicate Switch Clauses</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method uses the same code to implement two clauses of a switch statement. This could be a case of duplicate code, but it might also indicate a coding mistake.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDSOCL</key>
    <name>Dead Store Of Class Literal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instruction assigns a class literal to a variable and then never uses it. &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal&quot;&gt;The behavior of this differs in Java 1.4 and in Java 5.&lt;/a&gt; In Java 1.4 and earlier, a reference to &lt;code&gt;Foo.class&lt;/code&gt; would force the static initializer for &lt;code&gt;Foo&lt;/code&gt; to be executed, if it has not been executed already. In Java 5 and later, it does not.&lt;/p&gt;
&lt;p&gt;See Sun’s &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal&quot;&gt;article on Java SE compatibility&lt;/a&gt; for more details and examples, and suggestions on how to force class initialization in Java 5.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DEDP</key>
    <name>Empty Db Password</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DESMREO</key>
    <name>Entry Sets May Reuse Entry Objects</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The entrySet() method is allowed to return a view of the underlying Map in which a single Entry object is reused and returned during the iteration. As of Java 1.6, both IdentityHashMap and EnumMap did so. When iterating through such a Map, the Entry value is only valid until you advance to the next iteration. If, for example, you try to pass such an entrySet to an addAll method, things will go badly wrong.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DFATCMSOSTPE</key>
    <name>Futile Attempt To Change Maxpool Size Of Scheduled Thread Pool Executor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;(&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html&quot;&gt;Javadoc&lt;/a&gt;) While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DFNC</key>
    <name>Fp Number Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Using &lt;code&gt;new Double(double)&lt;/code&gt; is guaranteed to always result in a new object whereas &lt;code&gt;Double.valueOf(double)&lt;/code&gt; allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.&lt;/p&gt;
&lt;p&gt;Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the &lt;code&gt;valueOf()&lt;/code&gt; method when creating instances of &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Float&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DHAF</key>
    <name>Hardcoded Absolute Filename</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code constructs a File object using a hard coded to an absolute pathname (e.g., &lt;code&gt;new File(&amp;quot;/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment&amp;quot;);&lt;/code&gt;&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DIHOA</key>
    <name>Invoking Hashcode On Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code invokes hashCode on an array. Calling hashCode on an array returns the same value as System.identityHashCode, and ignores the contents and length of the array. If you need a hashCode that depends on the contents of an array &lt;code&gt;a&lt;/code&gt;, use &lt;code&gt;java.util.Arrays.hashCode(a)&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DIMM</key>
    <name>Invalid Min Max</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result (or NaN if the value is NaN).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DITOA</key>
    <name>Invoking Tostring On Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DITOAA</key>
    <name>Invoking Tostring On Anonymous Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code invokes toString on an (anonymous) array. Calling toString on an array generates a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DLBTDIOI</key>
    <name>Long Bits To Double Invoked On Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed as an argument. This almost certainly is not intended and is unlikely to give the intended result.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DMD</key>
    <name>Might Drop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method might drop an exception.  In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DMI</key>
    <name>Might Ignore</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method might ignore an exception.  In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DMWOC</key>
    <name>Monitor Wait On Condition</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls &lt;code&gt;wait()&lt;/code&gt; on a &lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt; object.  Waiting for a &lt;code&gt;Condition&lt;/code&gt; should be done using one of the &lt;code&gt;await()&lt;/code&gt; methods defined by the &lt;code&gt;Condition&lt;/code&gt; interface.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNCGCE</key>
    <name>Gc</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Code explicitly invokes garbage collection. Except for specific use in benchmarking, this is very dubious.&lt;/p&gt;
&lt;p&gt;In the past, situations where people have explicitly invoked the garbage collector in routines such as close or finalize methods has led to huge performance black holes. Garbage collection can be expensive. Any situation that forces hundreds or thousands of garbage collections will bring the machine to a crawl.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNCSE</key>
    <name>Exit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Invoking System.exit shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNOW</key>
    <name>Nonserializable Object Written</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code seems to be passing a non-serializable object to the ObjectOutput.writeObject method. If the object is, indeed, non-serializable, an error will result.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNUT</key>
    <name>Thread Passed Where Runnable Expected</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A Thread object is passed as a parameter to a method where a Runnable is expected. This is rather unusual, and may indicate a logic error or cause unexpected behavior.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DNVN</key>
    <name>Nextint Via Nextdouble</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;If &lt;code&gt;r&lt;/code&gt; is a &lt;code&gt;java.util.Random&lt;/code&gt;, you can generate a random number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt; using &lt;code&gt;r.nextInt(n)&lt;/code&gt;, rather than using &lt;code&gt;(int)(r.nextDouble() * n)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The argument to nextInt must be positive. If, for example, you want to generate a random value from -99 to 0, use &lt;code&gt;-r.nextInt(100)&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DOI</key>
    <name>Overwritten Increment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code performs an increment operation (e.g., &lt;code&gt;i++&lt;/code&gt;) and then immediately overwrites it. For example, &lt;code&gt;i = i++&lt;/code&gt; immediately overwrites the incremented value with the original value.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DPC</key>
    <name>Partially Constructed</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Looks like this method uses lazy field initialization with double-checked locking. While the field is correctly declared as volatile, it’s possible that the internal structure of the object is changed after the field assignment, thus another thread may see the partially initialized object.&lt;/p&gt;
&lt;p&gt;To fix this problem consider storing the object into the local variable first and save it to the volatile field only after it’s fully constructed.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DRFOE</key>
    <name>Run Finalizers On Exit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries.&lt;/em&gt; – Joshua Bloch&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DRUOO</key>
    <name>Random Used Only Once</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object. This produces mediocre quality random numbers and is inefficient. If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number is required invoke a method on the existing Random object to obtain it.&lt;/p&gt;
&lt;p&gt;If it is important that the generated Random numbers not be guessable, you &lt;em&gt;must&lt;/em&gt; not create a new Random for each random number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead (and avoid allocating a new SecureRandom for each random number needed).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSC</key>
    <name>String Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Using the &lt;code&gt;java.lang.String(String)&lt;/code&gt; constructor wastes memory because the object so constructed will be functionally indistinguishable from the &lt;code&gt;String&lt;/code&gt; passed as a parameter.  Just use the argument &lt;code&gt;String&lt;/code&gt; directly.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSOB</key>
    <name>Synchronization On Boolean</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code synchronizes on a boxed primitive constant, such as a Boolean.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static Boolean inited = Boolean.FALSE;
...
synchronized(inited) {
    if (!inited) {
        init();
        inited = Boolean.TRUE;
    }
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.&lt;/p&gt;
&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSOBP</key>
    <name>Synchronization On Boxed Primitive</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code synchronizes on a boxed primitive constant, such as an Integer.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static Integer count = 0;
...
synchronized(count) {
    count++;
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since Integer objects can be cached and shared, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.&lt;/p&gt;
&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSOSC</key>
    <name>Synchronization On Shared Constant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code synchronizes on interned String.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static String LOCK = &amp;quot;LOCK&amp;quot;;
...
synchronized(LOCK) {
    ...
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code is locking on something that other code might also be locking. This could result in very strange and hard to diagnose blocking and deadlock behavior. See &lt;a href=&quot;http://www.javalobby.org/java/forums/t96352.html&quot; class=&quot;uri&quot;&gt;http://www.javalobby.org/java/forums/t96352.html&lt;/a&gt; and &lt;a href=&quot;http://jira.codehaus.org/browse/JETTY-352&quot; class=&quot;uri&quot;&gt;http://jira.codehaus.org/browse/JETTY-352&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSOUBP</key>
    <name>Synchronization On Unshared Boxed Primitive</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code synchronizes on an apparently unshared boxed primitive, such as an Integer.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final Integer fileLock = new Integer(1);
...
synchronized(fileLock) {
    .. do something ..
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be much better, in this code, to redeclare fileLock as&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final Object fileLock = new Object();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The existing code might be OK, but it is confusing and a future refactoring, such as the “Remove Boxing” refactoring in IntelliJ, might replace this with the use of an interned Integer object shared throughout the JVM, leading to very confusing behavior and potential deadlock.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSTPEWZCT</key>
    <name>Scheduled Thread Pool Executor With Zero Core Threads</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;(&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29&quot;&gt;Javadoc&lt;/a&gt;) A ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSVC</key>
    <name>String Void Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Creating a new &lt;code&gt;java.lang.String&lt;/code&gt; object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.  Java guarantees that identical string constants will be represented by the same &lt;code&gt;String&lt;/code&gt; object.  Therefore, you should just use the empty string constant directly.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DUM</key>
    <name>Unsupported Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;All targets of this method invocation throw an UnsupportedOperationException.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DURTCC</key>
    <name>Using Removeall To Clear Collection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;If you want to remove all elements from a collection &lt;code&gt;c&lt;/code&gt;, use &lt;code&gt;c.clear&lt;/code&gt;, not &lt;code&gt;c.removeAll(c)&lt;/code&gt;. Calling &lt;code&gt;c.removeAll(c)&lt;/code&gt; to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DUS</key>
    <name>Useless Substring</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code invokes substring(0) on a String, which returns the original value.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DUT</key>
    <name>Useless Thread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object. This thread, then, does nothing but waste time.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DVCTEM</key>
    <name>Vacuous Call To Easymock Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This call doesn’t pass any objects to the EasyMock method, so the call doesn’t do anything.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DVSCC</key>
    <name>Vacuous Self Collection Call</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This call doesn’t make sense. For any collection &lt;code&gt;c&lt;/code&gt;, calling &lt;code&gt;c.containsAll(c)&lt;/code&gt; should always be true, and &lt;code&gt;c.retainAll(c)&lt;/code&gt; should have no effect.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DmD</key>
    <name>Doh</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This partical method invocation doesn’t make sense, for reasons that should be apparent from inspection.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EAAN</key>
    <name>Array And Nonarray</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method invokes the .equals(Object o) to compare an array and a reference that doesn’t seem to be an array. If things being compared are of different types, they are guaranteed to be unequal and the comparison is almost certainly an error. Even if they are both arrays, the equals method on arrays only determines of the two arrays are the same object. To compare the contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EAF</key>
    <name>Always False</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means that equals is not reflexive, one of the requirements of the equals method.&lt;/p&gt;
&lt;p&gt;The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class &lt;code&gt;Object&lt;/code&gt;. If you need to override an equals inherited from a different superclass, you can use:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean equals(Object o) {
    return this == o;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EAS</key>
    <name>Abstract Self</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a covariant version of &lt;code&gt;equals()&lt;/code&gt;.  To correctly override the &lt;code&gt;equals()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, the parameter of &lt;code&gt;equals()&lt;/code&gt; must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EAT</key>
    <name>Always True</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines an equals method that always returns true. This is imaginative, but not very smart. Plus, it means that the equals method is not symmetric.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EBAC</key>
    <name>Bad Array Compare</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals method of Object, calling equals on an array is the same as comparing their addresses. To compare the contents of the arrays, use &lt;code&gt;java.util.Arrays.equals(Object[], Object[])&lt;/code&gt;. To compare the addresses of the arrays, it would be less confusing to explicitly check pointer equality using &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ECCN</key>
    <name>Comparing Class Names</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method checks to see if two objects are the same class by checking to see if the names of their classes are equal. You can have different classes with the same name if they are loaded by different class loaders. Just check to see if the class objects are the same.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ECFONCWT</key>
    <name>Check For Operand Not Compatible With This</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This equals method is checking to see if the argument is some incompatible type (i.e., a class that is neither a supertype nor subtype of the class that defines the equals method). For example, the Foo class might have an equals method that looks like:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean equals(Object o) {
    if (o instanceof Foo)
        return name.equals(((Foo)o).name);
    else if (o instanceof String)
        return name.equals(o);
    else return false;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is considered bad practice, as it makes it very hard to implement an equals method that is symmetric and transitive. Without those properties, very unexpected behaviors are possible.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ECPSWE</key>
    <name>Comparing Parameter String With Eq</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code compares a &lt;code&gt;java.lang.String&lt;/code&gt; parameter for reference equality using the == or != operators. Requiring callers to pass only String constants or interned strings to a method is unnecessarily fragile, and rarely leads to measurable performance gains. Consider using the &lt;code&gt;equals(Object)&lt;/code&gt; method instead.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ECSWE</key>
    <name>Comparing Strings With Eq</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code compares &lt;code&gt;java.lang.String&lt;/code&gt; objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the &lt;code&gt;String.intern()&lt;/code&gt; method, the same string value may be represented by two different String objects. Consider using the &lt;code&gt;equals(Object)&lt;/code&gt; method instead.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ECUOE</key>
    <name>Compareto Use Object Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a &lt;code&gt;compareTo(...)&lt;/code&gt; method but inherits its &lt;code&gt;equals()&lt;/code&gt; method from &lt;code&gt;java.lang.Object&lt;/code&gt;. Generally, the value of compareTo should return zero if and only if equals returns true. If this is violated, weird and unpredictable failures will occur in classes such as PriorityQueue. In Java 5 the PriorityQueue.remove method uses the compareTo method, while in Java 6 it uses the equals method.&lt;/p&gt;
&lt;p&gt;From the JavaDoc for the compareTo method in the Comparable interface:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is strongly recommended, but not strictly required that &lt;code&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/code&gt;. Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. The recommended language is “Note: this class has a natural ordering that is inconsistent with equals.”&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EDDEFE</key>
    <name>Dont Define Equals For Enum</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines an enumeration, and equality on enumerations are defined using object identity. Defining a covariant equals method for an enumeration value is exceptionally bad practice, since it would likely result in having two different enumeration values that compare as equals using the covariant enum method, and as not equal when compared normally. Don’t do it.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EDOE</key>
    <name>Doesnt Override Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class extends a class that defines an equals method and adds fields, but doesn’t define an equals method itself. Thus, equality on instances of this class will ignore the identity of the subclass and the added fields. Be sure this is what is intended, and that you don’t need to override the equals method. Even if you don’t need to override the equals method, consider overriding it anyway to document the fact that the equals method for the subclass just return the result of invoking super.equals(o).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EER</key>
    <name>Expose Rep</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;Returning a reference to a mutable object value stored in one of the
object's fields exposes the internal representation of the object.  If
instances are accessed by untrusted code, and unchecked changes to the
mutable object would compromise security or other important properties,
you will need to do something different. Returning a new copy of the
object is better approach in many situations.
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EESR</key>
    <name>Expose Static Rep2</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code stores a reference to an externally mutable object into a static field. If unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Storing a copy of the object is better approach in many situations.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EF</key>
    <name>Empty</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Empty &lt;code&gt;finalize()&lt;/code&gt; methods are useless, so they should be deleted.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EGACC</key>
    <name>Getclass And Class Constant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class has an equals method that will be broken if it is inherited by subclasses. It compares a class literal with the class of the argument (e.g., in class &lt;code&gt;Foo&lt;/code&gt; it might check if &lt;code&gt;Foo.class == o.getClass()&lt;/code&gt;). It is better to check if &lt;code&gt;this.getClass() == o.getClass()&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EIAC</key>
    <name>Incompatible Array Compare</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method invokes the .equals(Object o) to compare two arrays, but the arrays of of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(…) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ENA</key>
    <name>Null Arg</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls equals(Object), passing a null value as the argument. According to the contract of the equals() method, this call should always return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EOENS</key>
    <name>Overriding Equals Not Symmetric</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines an equals method that overrides an equals method in a superclass. Both equals methods methods use &lt;code&gt;instanceof&lt;/code&gt; in the determination of whether two objects are equal. This is fraught with peril, since it is important that the equals method is symmetrical (in other words, &lt;code&gt;a.equals(b) == b.equals(a)&lt;/code&gt;). If B is a subtype of A, and A’s equals method checks that the argument is an instanceof A, and B’s equals method checks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these methods is not symmetric.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EONO</key>
    <name>Other No Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines an &lt;code&gt;equals()&lt;/code&gt; method, that doesn’t override the normal &lt;code&gt;equals(Object)&lt;/code&gt; method defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.  Instead, it inherits an &lt;code&gt;equals(Object)&lt;/code&gt; method from a superclass. The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EOUO</key>
    <name>Other Use Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines an &lt;code&gt;equals()&lt;/code&gt; method, that doesn’t override the normal &lt;code&gt;equals(Object)&lt;/code&gt; method defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.  The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ESNO</key>
    <name>Self No Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a covariant version of &lt;code&gt;equals()&lt;/code&gt;.  To correctly override the &lt;code&gt;equals()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, the parameter of &lt;code&gt;equals()&lt;/code&gt; must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ESUO</key>
    <name>Self Use Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a covariant version of the &lt;code&gt;equals()&lt;/code&gt; method, but inherits the normal &lt;code&gt;equals(Object)&lt;/code&gt; method defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.  The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EU</key>
    <name>Unusual</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class doesn’t do any of the patterns we recognize for checking that the type of the argument is compatible with the type of the &lt;code&gt;this&lt;/code&gt; object. There might not be anything wrong with this code, but it is worth reviewing.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EUCAI</key>
    <name>Unrelated Class And Interface</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls equals(Object) on two references, one of which is a class and the other an interface, where neither the class nor any of its non-abstract subclasses implement the interface. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EUI</key>
    <name>Unrelated Interfaces</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls equals(Object) on two references of unrelated interface types, where neither is a subtype of the other, and there are no known non-abstract classes which implement both interfaces. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EUT</key>
    <name>Unrelated Types</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;This method calls equals(Object) on two references of different class
types and analysis suggests they will be to objects of different classes
at runtime. Further, examination of the equals methods that would be
invoked suggest that either this call will always return false, or else
the equals method is not be symmetric (which is a property required by
the contract for equals in class Object).
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EUTUPE</key>
    <name>Unrelated Types Using Pointer Equality</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method uses using pointer equality to compare two references that seem to be of different types. The result of this comparison will always be false at runtime.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EiER</key>
    <name>Expose Rep2</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code stores a reference to an externally mutable object into the internal representation of the object.  If instances are accessed by untrusted code, and unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Storing a copy of the object is better approach in many situations.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FDNCSF</key>
    <name>Missing Super Call</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This &lt;code&gt;finalize()&lt;/code&gt; method does not make a call to its superclass’s &lt;code&gt;finalize()&lt;/code&gt; method.  So, any finalizer actions defined for the superclass will not be performed.  Add a call to &lt;code&gt;super.finalize()&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FFNF</key>
    <name>Finalizer Nulls Fields</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This finalizer nulls out fields. This is usually an error, as it does not aid garbage collection, and the object is going to be garbage collected anyway.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FFONF</key>
    <name>Finalizer Only Nulls Fields</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This finalizer does nothing except null out fields. This is completely pointless, and requires that the object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize method.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FFPE</key>
    <name>Floating Point Equality</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This operation compares two floating point values for equality. Because floating point calculations may involve rounding, calculated float and double values may not be accurate. For values that must be precise, such as monetary values, consider using a fixed-precision type such as BigDecimal. For values that need not be precise, consider comparing for equality within some range, for example: &lt;code&gt;if ( Math.abs(x - y) &lt; .0000001 )&lt;/code&gt;. See the Java Language Specification, section 4.2.4.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FMEW</key>
    <name>Missing Expected Warning</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;SpotBugs didn’t generate generated a warning that, according to a &lt;span class=&quot;citation&quot; data-cites=&quot;ExpectedWarning&quot;&gt;@ExpectedWarning&lt;/span&gt; annotated, is expected or desired.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FMUFP</key>
    <name>Math Using Float Precision</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method performs math operations using floating point precision. Floating point precision is very imprecise. For example, 16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FNS</key>
    <name>Nullify Super</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This empty &lt;code&gt;finalize()&lt;/code&gt; method explicitly negates the effect of any finalizer defined by its superclass.  Any finalizer actions defined for the superclass will not be performed.  Unless this is intended, delete this method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FSBP</key>
    <name>Public Should Be Protected</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A class’s &lt;code&gt;finalize()&lt;/code&gt; method should have protected access, not public.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FU</key>
    <name>Useless</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The only thing this &lt;code&gt;finalize()&lt;/code&gt; method does is call the superclass’s &lt;code&gt;finalize()&lt;/code&gt; method, making it redundant.  Delete it.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FUW</key>
    <name>Unexpected Warning</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;SpotBugs generated a warning that, according to a &lt;span class=&quot;citation&quot; data-cites=&quot;NoWarning&quot;&gt;@NoWarning&lt;/span&gt; annotated, is unexpected or undesired.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GUT</key>
    <name>Unrelated Types</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This call to a generic collection method contains an argument with an incompatible class from that of the collection’s parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument). Therefore, it is unlikely that the collection contains any objects that are equal to the method argument used here. Most likely, the wrong value is being passed to the method.&lt;/p&gt;
&lt;p&gt;In general, instances of two unrelated classes are not equal. For example, if the &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; classes are not related by subtyping, then an instance of &lt;code&gt;Foo&lt;/code&gt; should not be equal to an instance of &lt;code&gt;Bar&lt;/code&gt;. Among other issues, doing so will likely result in an equals method that is not symmetrical. For example, if you define the &lt;code&gt;Foo&lt;/code&gt; class so that a &lt;code&gt;Foo&lt;/code&gt; can be equal to a &lt;code&gt;String&lt;/code&gt;, your equals method isn’t symmetrical since a &lt;code&gt;String&lt;/code&gt; can only be equal to a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In rare cases, people do define nonsymmetrical equals methods and still manage to make their code work. Although none of the APIs document or guarantee it, it is typically the case that if you check if a &lt;code&gt;Collection&lt;String&gt;&lt;/code&gt; contains a &lt;code&gt;Foo&lt;/code&gt;, the equals method of argument (e.g., the equals method of the &lt;code&gt;Foo&lt;/code&gt; class) used to perform the equality checks.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GUTIGC</key>
    <name>Unchecked Type In Generic Call</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This call to a generic collection method passes an argument while compile type Object where a specific type from the generic type parameters is expected. Thus, neither the standard Java type system nor static analysis can provide useful information on whether the object being passed as a parameter is of an appropriate type.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HENH</key>
    <name>Equals No Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class overrides &lt;code&gt;equals(Object)&lt;/code&gt;, but does not override &lt;code&gt;hashCode()&lt;/code&gt;.  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HEUH</key>
    <name>Equals Use Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class overrides &lt;code&gt;equals(Object)&lt;/code&gt;, but does not override &lt;code&gt;hashCode()&lt;/code&gt;, and inherits the implementation of &lt;code&gt;hashCode()&lt;/code&gt; from &lt;code&gt;java.lang.Object&lt;/code&gt; (which returns the identity hash code, an arbitrary value assigned to the object by the VM).  Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;
&lt;p&gt;If you don’t think instances of this class will ever be inserted into a HashMap/HashTable, the recommended &lt;code&gt;hashCode&lt;/code&gt; implementation to use is:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public int hashCode() {
    assert false : &amp;quot;hashCode not designed&amp;quot;;
    return 42; // any arbitrary constant will do
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HHNE</key>
    <name>Hashcode No Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a &lt;code&gt;hashCode()&lt;/code&gt; method but not an &lt;code&gt;equals()&lt;/code&gt; method.  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HHSSC</key>
    <name>Huge Shared String Constant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A large String constant is duplicated across multiple class files. This is likely because a final field is initialized to a String constant, and the Java language mandates that all references to a final field from other classes be inlined into that classfile. See &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475&quot;&gt;JDK bug 6447475&lt;/a&gt; for a description of an occurrence of this bug in the JDK and how resolving it reduced the size of the JDK by 1 megabyte.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HHUOE</key>
    <name>Hashcode Use Object Equals</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a &lt;code&gt;hashCode()&lt;/code&gt; method but inherits its &lt;code&gt;equals()&lt;/code&gt; method from &lt;code&gt;java.lang.Object&lt;/code&gt; (which defines equality by comparing object references).  Although this will probably satisfy the contract that equal objects must have equal hashcodes, it is probably not what was intended by overriding the &lt;code&gt;hashCode()&lt;/code&gt; method.  (Overriding &lt;code&gt;hashCode()&lt;/code&gt; implies that the object’s identity is based on criteria more complicated than simple reference equality.)&lt;/p&gt;
&lt;p&gt;If you don’t think instances of this class will ever be inserted into a HashMap/HashTable, the recommended &lt;code&gt;hashCode&lt;/code&gt; implementation to use is:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public int hashCode() {
    assert false : &amp;quot;hashCode not designed&amp;quot;;
    return 42; // any arbitrary constant will do
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HIEUH</key>
    <name>Inherits Equals Use Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class inherits &lt;code&gt;equals(Object)&lt;/code&gt; from an abstract superclass, and &lt;code&gt;hashCode()&lt;/code&gt; from &lt;code&gt;java.lang.Object&lt;/code&gt; (which returns the identity hash code, an arbitrary value assigned to the object by the VM).  Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;
&lt;p&gt;If you don’t want to define a hashCode method, and/or don’t believe the object will ever be put into a HashMap/Hashtable, define the &lt;code&gt;hashCode()&lt;/code&gt; method to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HRPTC</key>
    <name>Request Parameter To Cookie</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_response_splitting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/HTTP_response_splitting&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesn’t report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HRPTHH</key>
    <name>Request Parameter To Http Header</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_response_splitting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/HTTP_response_splitting&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesn’t report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HSDHOUC</key>
    <name>Signature Declares Hashing Of Unhashable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A method, field or class declares a generic signature where a non-hashable class is used in context where a hashable class is required. A class that declares an equals method but inherits a hashCode() method from Object is unhashable, since it doesn’t fulfill the requirement that equal objects have equal hashCodes.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HUOUC</key>
    <name>Use Of Unhashable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A class defines an equals(Object) method but not a hashCode() method, and thus doesn’t fulfill the requirement that equal objects have equal hashCodes. An instance of this class is used in a hash data structure, making the need to fix this problem of highest importance.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IACCO</key>
    <name>Average Computation Could Overflow</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code computes the average of two integers using either division or signed right shift, and then uses the result as the index of an array. If the values being averaged are very large, this can overflow (resulting in the computation of a negative average). Assuming that the result is intended to be nonnegative, you can use an unsigned right shift instead. In other words, rather that using &lt;code&gt;(low+high)/2&lt;/code&gt;, use &lt;code&gt;(low+high) &gt;&gt;&gt; 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This bug exists in many earlier implementations of binary search and merge sort. Martin Buchholz &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6412541&quot;&gt;found and fixed it&lt;/a&gt; in the JDK libraries, and Joshua Bloch &lt;a href=&quot;http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html&quot;&gt;widely publicized the bug pattern&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IAIOIOOM</key>
    <name>Ambiguous Invocation Of Inherited Or Outer Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class. For example, you invoke &lt;code&gt;foo(17)&lt;/code&gt;, which is defined in both a superclass and in an outer method. By the Java semantics, it will be resolved to invoke the inherited method, but this may not be what you intend.&lt;/p&gt;
&lt;p&gt;If you really intend to invoke the inherited method, invoke it by invoking the method on super (e.g., invoke super.foo(17)), and thus it will be clear to other readers of your code and to SpotBugs that you want to invoke the inherited method, not the method in the outer class.&lt;/p&gt;
&lt;p&gt;If you call &lt;code&gt;this.foo(17)&lt;/code&gt;, then the inherited method will be invoked. However, since SpotBugs only looks at classfiles, it can’t tell the difference between an invocation of &lt;code&gt;this.foo(17)&lt;/code&gt; and &lt;code&gt;foo(17)&lt;/code&gt;, it will still complain about a potential ambiguous invocation.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IAMIFRM</key>
    <name>Assert Method Invoked From Run Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A JUnit assertion is performed in a run method. Failed JUnit assertions just result in exceptions being thrown. Thus, if this exception occurs in a thread other than the thread that invokes the test method, the exception will terminate the thread but not result in the test failing.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IATOOS</key>
    <name>Appending To Object Output Stream</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code opens a file in append mode and then wraps the result in an object output stream. This won’t allow you to append to an existing object output stream stored in a file. If you want to be able to append to an object output stream, you need to keep the object output stream open.&lt;/p&gt;
&lt;p&gt;The only situation in which opening a file in append mode and the writing an object output stream could work is if on reading the file you plan to open it in random access mode and seek to the byte offset where the append started.&lt;/p&gt;
&lt;p&gt;TODO: example.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IBCFO</key>
    <name>Bad Check For Odd</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code uses x % 2 == 1 to check to see if a value is odd, but this won’t work for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check for oddness, consider using x &amp; 1 == 1, or x % 2 != 0.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IBCWIV</key>
    <name>Bad Comparison With Int Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code compares an int value with a long constant that is outside the range of values that can be represented as an int value. This comparison is vacuous and possibly incorrect.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IBCWNV</key>
    <name>Bad Comparison With Nonnegative Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code compares a value that is guaranteed to be non-negative with a negative constant or zero.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IBCWSB</key>
    <name>Bad Comparison With Signed Byte</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Signed bytes can only have a value in the range -128 to 127. Comparing a signed byte with a value outside that range is vacuous and likely to be incorrect. To convert a signed byte &lt;code&gt;b&lt;/code&gt; to an unsigned value in the range 0..255, use &lt;code&gt;0xff &amp; b&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IBRB1</key>
    <name>Bad Rem By 1</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Any expression (exp % 1) is guaranteed to always return zero. Did you mean (exp &amp; 1) or (exp % 2) instead?&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IBSA</key>
    <name>Bad Shift Amount</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code performs shift of a 32 bit int by a constant amount outside the range -31..31. The effect of this is to use the lower 5 bits of the integer value to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits, and shifting by 32 bits is the same as shifting by zero bits). This probably isn’t what was expected, and it is at least confusing.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IBSM</key>
    <name>Bad Suite Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Class is a JUnit TestCase and defines a suite() method. However, the suite method needs to be declared as either&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public static junit.framework.Test suite()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public static junit.framework.TestSuite suite()&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ICATI</key>
    <name>Container Added To Itself</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A collection is added to itself. As a result, computing the hashCode of this set will throw a StackOverflowException.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IDCI</key>
    <name>Dont Catch Imse</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IFNG</key>
    <name>Field Not Guarded</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy, but can be accessed in a way that seems to violate those annotations.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>II2LAI</key>
    <name>Int 2 Long As Instant</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a method parameter that requires an absolute time value. An absolute time value is the number of milliseconds since the standard base time known as “the epoch”, namely January 1, 1970, 00:00:00 GMT. For example, the following method, intended to convert seconds since the epoch into a Date, is badly broken:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Date getDate(int seconds) { return new Date(seconds * 1000); }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value. When a 32-bit value is converted to 64-bits and used to express an absolute time value, only dates in December 1969 and January 1970 can be represented.&lt;/p&gt;
&lt;p&gt;Correct implementations for the above method are:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Fails for dates after 2037
Date getDate(int seconds) { return new Date(seconds * 1000L); }

// better, works for all dates
Date getDate(long seconds) { return new Date(seconds * 1000); }&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IIC</key>
    <name>Init Circularity</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A circularity was detected in the static initializers of the two classes referenced by the bug instance.  Many kinds of unexpected behavior may arise from such circularity.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IICTD</key>
    <name>Idiv Cast To Double</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code casts the result of an integral division (e.g., int or long division) operation to double or float. Doing division on integers truncates the result to the integer value closest to zero. The fact that the result was cast to double suggests that this precision should have been retained. What was probably meant was to cast one or both of the operands to double &lt;em&gt;before&lt;/em&gt; performing the division. Here is an example:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int x = 2;
int y = 5;
// Wrong: yields result 0.0
double value1 = x / y;

// Right: yields result 0.4
double value2 = x / (double) y;&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IICTDPTC</key>
    <name>Int Cast To Double Passed To Ceil</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code converts an integral value (e.g., int or long) to a double precision floating point number and then passing the result to the Math.ceil() function, which rounds a double to the next higher integer value. This operation should always be a no-op, since the converting an integer to a double should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.ceil was intended to be performed using double precision floating point arithmetic.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IICTFPTR</key>
    <name>Int Cast To Float Passed To Round</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code converts an int value to a float precision floating point number and then passing the result to the Math.round() function, which returns the int/long closest to the argument. This operation should always be a no-op, since the converting an integer to a float should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.round was intended to be performed using floating point arithmetic.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IIL</key>
    <name>Infinite Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This loop doesn’t seem to have a way to terminate (other than by perhaps throwing an exception).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IIMCTL</key>
    <name>Integer Multiply Cast To Long</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code performs integer multiply and then converts the result to a long, as in:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the multiplication is done using long arithmetic, you can avoid the possibility that the result will overflow. For example, you could fix the above code to:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;static final long MILLISECONDS_PER_DAY = 24L*3600*1000;
long convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IIRL</key>
    <name>Infinite Recursive Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method unconditionally invokes itself. This would seem to indicate an infinite recursive loop that will result in a stack overflow.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IIS</key>
    <name>Inconsistent Sync</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The fields of this class appear to be accessed inconsistently with respect to synchronization.  This bug report indicates that the bug pattern detector judged that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The class contains a mix of locked and unlocked accesses,&lt;/li&gt;
&lt;li&gt;The class is &lt;strong&gt;not&lt;/strong&gt; annotated as javax.annotation.concurrent.NotThreadSafe,&lt;/li&gt;
&lt;li&gt;At least one locked access was performed by one of the class’s own methods, and&lt;/li&gt;
&lt;li&gt;The number of unsynchronized field accesses (reads and writes) was no more than one third of all accesses, with writes being weighed twice as high as reads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A typical bug matching this bug pattern is forgetting to synchronize one of the methods in a class that is intended to be thread-safe.&lt;/p&gt;
&lt;p&gt;You can select the nodes labeled “Unsynchronized access” to show the code locations where the detector believed that a field was accessed without synchronization.&lt;/p&gt;
&lt;p&gt;Note that there are various sources of inaccuracy in this detector; for example, the detector cannot statically detect all situations in which a lock is held.  Also, even when the detector is accurate in distinguishing locked vs. unlocked accesses, the code in question may still be correct.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IISC</key>
    <name>Instantiate Static Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class allocates an object that is based on a class that only supplies static methods. This object does not need to be created, just access the static methods directly using the class name as a qualifier.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IMROI</key>
    <name>Multiplying Result Of Irem</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code multiplies the result of an integer remaining by an integer constant. Be sure you don’t have your operator precedence confused. For example i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>INSE</key>
    <name>No Such Element</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class implements the &lt;code&gt;java.util.Iterator&lt;/code&gt; interface.  However, its &lt;code&gt;next()&lt;/code&gt; method is not capable of throwing &lt;code&gt;java.util.NoSuchElementException&lt;/code&gt;.  The &lt;code&gt;next()&lt;/code&gt; method should be changed so it throws &lt;code&gt;NoSuchElementException&lt;/code&gt; if is called when there are no more elements to return.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>INT</key>
    <name>No Tests</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Class is a JUnit TestCase but has not implemented any test methods.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IPIDBO</key>
    <name>Parameter Is Dead But Overwritten</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IQURS</key>
    <name>Questionable Unsigned Right Shift</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code performs an unsigned right shift, whose result is then cast to a short or byte, which discards the upper bits of the result. Since the upper bits are discarded, there may be no difference between a signed and unsigned right shift (depending upon the size of the shift).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISNS</key>
    <name>Setup No Super</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Class is a JUnit TestCase and implements the setUp method. The setUp method should call super.setUp(), but doesn’t.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISUSDI</key>
    <name>Superclass Uses Subclass During Initialization</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;During the initialization of a class, the class makes an active use of a subclass. That subclass will not yet be initialized at the time of this use. For example, in the following code, &lt;code&gt;foo&lt;/code&gt; will be null.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class CircularClassInitialization {
    static class InnerClassSingleton extends CircularClassInitialization {
        static InnerClassSingleton singleton = new InnerClassSingleton();
    }

    static CircularClassInitialization foo = InnerClassSingleton.singleton;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ITGC</key>
    <name>New For Getclass</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method allocates an object just to call getClass() on it, in order to retrieve the Class object for it. It is simpler to just access the .class property of the class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ITNS</key>
    <name>Teardown No Super</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call super.tearDown(), but doesn’t.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IVBO</key>
    <name>Vacuous Bit Operation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This is an integer bit operation (and, or, or exclusive or) that doesn’t do any useful work (e.g., &lt;code&gt;v &amp; 0xffffffff&lt;/code&gt;).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IVC</key>
    <name>Vacuous Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;There is an integer comparison that always returns the same value (e.g., x &lt;= Integer.MAX_VALUE).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JFIFIIC</key>
    <name>Field Isnt Final In Immutable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable, and the rules for those annotations require that all fields are final. .&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JJCWRTA</key>
    <name>Jsr166 Calling Wait Rather Than Await</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls &lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()()&lt;/code&gt; on an object that also provides an &lt;code&gt;await()&lt;/code&gt;, &lt;code&gt;signal()&lt;/code&gt;, &lt;code&gt;signalAll()&lt;/code&gt; method (such as util.concurrent Condition objects). This probably isn’t what you want, and even if you do want it, you should consider changing your design, as other developers will find it exceptionally confusing.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JJLM</key>
    <name>Jsr166 Lock Monitorenter</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method performs synchronization an object that implements java.util.concurrent.locks.Lock. Such an object is locked/unlocked using &lt;code&gt;acquire()&lt;/code&gt;/&lt;code&gt;release()&lt;/code&gt; rather than using the &lt;code&gt;synchronized (...)&lt;/code&gt; construct.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JJUM</key>
    <name>Jsr166 Utilconcurrent Monitorenter</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method performs synchronization an object that is an instance of a class from the java.util.concurrent package (or its subclasses). Instances of these classes have their own concurrency control mechanisms that are orthogonal to the synchronization provided by the Java keyword &lt;code&gt;synchronized&lt;/code&gt;. For example, synchronizing on an &lt;code&gt;AtomicBoolean&lt;/code&gt; will not prevent other threads from modifying the &lt;code&gt;AtomicBoolean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Such code may be correct, but should be carefully reviewed and documented, and may confuse people who have to maintain the code at a later date.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JSONSOIS</key>
    <name>Store Of Non Serializable Object Into Session</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code seems to be storing a non-serializable object into an HttpSession. If this session is passivated or migrated, an error will result.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>JUSS</key>
    <name>Suite Not Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Class is a JUnit TestCase and implements the suite() method. The suite method should be declared as being static, but isn’t.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LLIS</key>
    <name>Lazy Init Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains an unsynchronized lazy initialization of a non-volatile static field. Because the compiler or processor may reorder instructions, threads are not guaranteed to see a completely initialized object, &lt;em&gt;if the method can be called by multiple threads&lt;/em&gt;. You can make the field volatile to correct the problem. For more information, see the &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/&quot;&gt;Java Memory Model web site&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LLIUS</key>
    <name>Lazy Init Update Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains an unsynchronized lazy initialization of a static field. After the field is set, the object stored into that location is further updated or accessed. The setting of the field is visible to other threads as soon as it is set. If the further accesses in the method that set the field serve to initialize the object, then you have a &lt;em&gt;very serious&lt;/em&gt; multithreading bug, unless something else prevents any other thread from accessing the stored object until it is fully initialized.&lt;/p&gt;
&lt;p&gt;Even if you feel confident that the method is never called by multiple threads, it might be better to not set the static field until the value you are setting it to is fully populated/initialized.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MCBF</key>
    <name>Cannot Be Final</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A mutable static field could be changed by malicious code or by accident from another package. Unfortunately, the way the field is used doesn’t allow any easy fix to this problem.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MCMF</key>
    <name>Class Masks Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a field with the same name as a visible instance field in a superclass. This is confusing, and may indicate an error if methods update or access one of the fields when they wanted the other.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MEFS</key>
    <name>Enum Field Setter</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it’s a bad practice to expose them to the outer world. Consider removing this method or declaring it package-private.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MFP</key>
    <name>Final Pkgprotect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A mutable static field could be changed by malicious code or by accident from another package. The field could be made package protected and/or made final to avoid this vulnerability.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMA</key>
    <name>Mutable Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A final static field references an array and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the array.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMC</key>
    <name>Mutable Collection</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package. Consider wrapping this field into Collections.unmodifiableSet/List/Map/etc. to avoid this vulnerability.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMCP</key>
    <name>Mutable Collection Pkgprotect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package. The field could be made package protected to avoid this vulnerability. Alternatively you may wrap this field into Collections.unmodifiableSet/List/Map/etc. to avoid this vulnerability.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMEF</key>
    <name>Mutable Enum Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it’s a bad practice to expose them to the outer world. Consider declaring this field final and/or package-private.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMH</key>
    <name>Mutable Hashtable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A final static field references a Hashtable and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the Hashtable.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMMF</key>
    <name>Method Masks Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method defines a local variable with the same name as a field in this class or a superclass. This may cause the method to read an uninitialized value from the field, leave the field uninitialized, or both.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMN</key>
    <name>Mismatched Notify</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls Object.notify() or Object.notifyAll() without obviously holding a lock on the object.  Calling notify() or notifyAll() without a lock held will result in an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMSF</key>
    <name>Mutable Servlet Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A web server generally only creates one instance of servlet or JSP class (i.e., treats the class as a Singleton), and will have multiple threads invoke methods on that instance to service multiple simultaneous requests. Thus, having a mutable instance field generally creates race conditions.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MMW</key>
    <name>Mismatched Wait</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls Object.wait() without obviously holding a lock on the object.  Calling wait() without a lock held will result in an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MOP</key>
    <name>Ooi Pkgprotect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A final static field that is defined in an interface references a mutable object such as an array or hashtable. This mutable object could be changed by malicious code or by accident from another package. To solve this, the field needs to be moved to a class and made package protected to avoid this vulnerability.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MP</key>
    <name>Pkgprotect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MRIA</key>
    <name>Expose Rep</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A public static method returns a reference to an array that is part of the static state of the class. Any code that calls this method can freely modify the underlying array. One fix is to return a copy of the array.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSBF</key>
    <name>Should Be Final</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This static field public but not final, and could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSBRTBF</key>
    <name>Should Be Refactored To Be Final</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This static field public but not final, and could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability. However, the static initializer contains more than one write to the field, so doing so will require some refactoring.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSOFTGCTF</key>
    <name>Sync On Field To Guard Changing That Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method synchronizes on a field in what appears to be an attempt to guard against simultaneous updates to that field. But guarding a field gets a lock on the referenced object, not on the field. This may not provide the mutual exclusion you need, and other threads might be obtaining locks on the referenced objects (for other purposes). An example of this pattern would be:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private Long myNtfSeqNbrCounter = new Long(0);
private Long getNotificationSequenceNumber() {
     Long result = null;
     synchronized(myNtfSeqNbrCounter) {
         result = new Long(myNtfSeqNbrCounter.longValue() + 1);
         myNtfSeqNbrCounter = new Long(result.longValue());
     }
     return result;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSOUF</key>
    <name>Sync On Updated Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method synchronizes on an object referenced from a mutable field. This is unlikely to have useful semantics, since different threads may be synchronizing on different objects.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSSIF</key>
    <name>Suspect Servlet Instance Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class extends from a Servlet class, and uses an instance member variable. Since only one instance of a Servlet class is created by the J2EE framework, and used in a multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider only using method local variables.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSVUID</key>
    <name>No Serialversionid</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface, but does not define a &lt;code&gt;serialVersionUID&lt;/code&gt; field.  A change as simple as adding a reference to a .class object will add synthetic fields to the class, which will unfortunately change the implicit serialVersionUID (e.g., adding a reference to &lt;code&gt;String.class&lt;/code&gt; will generate a static field &lt;code&gt;class$java$lang$String&lt;/code&gt;). Also, different source code to bytecode compilers may use different naming conventions for synthetic variables generated for references to class objects or inner classes. To ensure interoperability of Serializable across versions, consider adding an explicit serialVersionUID.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MtSSIF</key>
    <name>Suspect Struts Instance Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class extends from a Struts Action class, and uses an instance member variable. Since only one instance of a struts Action class is created by the Struts framework, and used in a multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider only using method local variables. Only instance fields that are written outside of a monitor are reported.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NAMBN</key>
    <name>Argument Might Be Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A parameter to this method has been identified as a value that should always be checked to see whether or not it is null, but it is being dereferenced without a preceding null check.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NAN</key>
    <name>Always Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A null pointer is dereferenced here.  This will lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NANE</key>
    <name>Always Null Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A pointer which is null on an exception path is dereferenced here.  This will lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.  Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.&lt;/p&gt;
&lt;p&gt;Also note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NBE</key>
    <name>Bad Equal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a method &lt;code&gt;equal(Object)&lt;/code&gt;.  This method does not override the &lt;code&gt;equals(Object)&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, which is probably what was intended.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NBRN</key>
    <name>Boolean Return Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NC</key>
    <name>Confusing</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The referenced methods have names that differ only by capitalization.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NCN</key>
    <name>Closing Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;close() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NCNE</key>
    <name>Class Not Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class is not derived from another exception, but ends with ‘Exception’. This will be confusing to users of this class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NDNSC</key>
    <name>Dangerous Non Short Circuit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code seems to be using non-short-circuit logic (e.g., &amp; or |) rather than short-circuit logic (&amp;&amp; or ||). In addition, it seem possible that, depending on the value of the left hand side, you might not want to evaluate the right hand side (because it would have side effects, could cause an exception or could be expensive.&lt;/p&gt;
&lt;p&gt;Non-short-circuit logic causes both sides of the expression to be evaluated even when the result can be inferred from knowing the left-hand side. This can be less efficient and can result in errors if the left-hand side guards cases when evaluating the right-hand side can generate an error.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2&quot;&gt;the Java Language Specification&lt;/a&gt; for details.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NDORV</key>
    <name>Dereference Of Readline Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text to read, readLine() will return null and dereferencing that will generate a null pointer exception.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NFKUAI</key>
    <name>Future Keyword Used As Identifier</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NFKUAMI</key>
    <name>Future Keyword Used As Member Identifier</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This identifier is used as a keyword in later versions of Java. This code, and any code that references this API, will need to be changed in order to compile it in later versions of Java.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NFNC</key>
    <name>Field Naming Convention</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NGD</key>
    <name>Guaranteed Deref</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;There is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).&lt;/p&gt;
&lt;p&gt;Note that a check such as &lt;code&gt;if (x == null) throw new NullPointerException();&lt;/code&gt; is treated as a dereference of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NGDOEP</key>
    <name>Guaranteed Deref On Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;There is a statement or branch on an exception path that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NIDOR</key>
    <name>Immediate Dereference Of Readline</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The result of invoking readLine() is immediately dereferenced. If there are no more lines of text to read, readLine() will return null and dereferencing that will generate a null pointer exception.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NLOKNV</key>
    <name>Load Of Known Null Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The variable referenced at this point is known to be null due to an earlier check against null. Although this is valid, it might be a mistake (perhaps you intended to refer to a different variable, or perhaps the earlier check to see if the variable is null should have been a check to see if it was non-null).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NLT</key>
    <name>Lcase Tostring</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a method called &lt;code&gt;tostring()&lt;/code&gt;.  This method does not override the &lt;code&gt;toString()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, which is probably what was intended.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NMPTA</key>
    <name>Method Parameter Tightens Annotation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter that is marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Nullable&quot;&gt;@Nullable&lt;/span&gt;, you shouldn’t override that method in a subclass with a method where that parameter is &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;. Doing so violates the contract that the method should handle a null parameter.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NMRRA</key>
    <name>Method Return Relaxing Annotation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A method should always implement the contract of a method it overrides. Thus, if a method takes is annotated as returning a &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt; value, you shouldn’t override that method in a subclass with a method annotated as returning a &lt;span class=&quot;citation&quot; data-cites=&quot;Nullable&quot;&gt;@Nullable&lt;/span&gt; or &lt;span class=&quot;citation&quot; data-cites=&quot;CheckForNull&quot;&gt;@CheckForNull&lt;/span&gt; value. Doing so violates the contract that the method shouldn’t return null.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNFNIIC</key>
    <name>Nonnull Field Not Initialized In Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The field is marked as non-null, but isn’t written to by the constructor. The field might be initialized elsewhere during constructor, or might always be initialized before use.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNI</key>
    <name>Null Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instanceof test will always return false, since the value being checked is guaranteed to be null. Although this is safe, make sure it isn’t an indication of some misunderstanding or some other logic error.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNN</key>
    <name>Naked Notify</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A call to &lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()&lt;/code&gt; was made without any (apparent) accompanying modification to mutable object state.  In general, calling a notify method on a monitor is done because some condition another thread is waiting for has become true.  However, for the condition to be meaningful, it must involve a heap object that is visible to both threads.&lt;/p&gt;
&lt;p&gt;This bug does not necessarily indicate an error, since the change to mutable object state may have taken place in a method which then called the method containing the notification.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNNN</key>
    <name>Notify Not Notifyall</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls &lt;code&gt;notify()&lt;/code&gt; rather than &lt;code&gt;notifyAll()&lt;/code&gt;.  Java monitors are often used for multiple conditions.  Calling &lt;code&gt;notify()&lt;/code&gt; only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNOSP</key>
    <name>Null On Some Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt; guarantees that a null value will be dereferenced, which would generate a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception can’t ever be executed; deciding that is beyond the ability of SpotBugs.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNOSPE</key>
    <name>Null On Some Path Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A reference value which is null on some exception control path is dereferenced here.  This may lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.  Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.&lt;/p&gt;
&lt;p&gt;Also note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNOSPFRV</key>
    <name>Null On Some Path From Return Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The return value from a method is dereferenced without a null check, and the return value of that method is one that should generally be checked for null. This may lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNOSPMBI</key>
    <name>Null On Some Path Might Be Infeasible</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt; guarantees that a null value will be dereferenced, which would generate a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception can’t ever be executed; deciding that is beyond the ability of SpotBugs. Due to the fact that this value had been previously tested for nullness, this is a definite possibility.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNPD</key>
    <name>Null Param Deref</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method call passes a null value for a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNPDATD</key>
    <name>Null Param Deref All Targets Dangerous</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A possibly-null value is passed at a call site where all known target methods require the parameter to be non-null. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNPDN</key>
    <name>Null Param Deref Nonvirtual</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A possibly-null value is passed to a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNPV</key>
    <name>Nonnull Param Violation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method passes a null value as the parameter of a method which must be non-null. Either this parameter has been explicitly marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;, or analysis has determined that this parameter is always dereferenced.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNRV</key>
    <name>Nonnull Return Violation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method may return a null value, but the method (or a superclass method which it overrides) is declared to return &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNSC</key>
    <name>Non Short Circuit</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code seems to be using non-short-circuit logic (e.g., &amp; or |) rather than short-circuit logic (&amp;&amp; or ||). Non-short-circuit logic causes both sides of the expression to be evaluated even when the result can be inferred from knowing the left-hand side. This can be less efficient and can result in errors if the left-hand side guards cases when evaluating the right-hand side can generate an error.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2&quot;&gt;the Java Language Specification&lt;/a&gt; for details.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NORN</key>
    <name>Optional Return Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The usage of Optional return type (java.util.Optional or com.google.common.base.Optional) always means that explicit null returns were not desired by design. Returning a null value in such case is a contract violation and will most likely break client code.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NPMBNBMAN</key>
    <name>Parameter Must Be Nonnull But Marked As Nullable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This parameter is always used in a way that requires it to be non-null, but the parameter is explicitly annotated as being Nullable. Either the use of the parameter or the annotation is wrong.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSANCF</key>
    <name>Sync And Null Check Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Since the field is synchronized on, it seems not likely to be null. If it is null and then synchronized on a NullPointerException will be thrown and the check would be pointless. Better to synchronize on another field.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSINF</key>
    <name>Store Into Nonnull Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value that could be null is stored into a field that has been annotated as &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSSNAI</key>
    <name>Same Simple Name As Interface</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., &lt;code&gt;alpha.Foo&lt;/code&gt; extends &lt;code&gt;beta.Foo&lt;/code&gt;). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSSNAS</key>
    <name>Same Simple Name As Superclass</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., &lt;code&gt;alpha.Foo&lt;/code&gt; extends &lt;code&gt;beta.Foo&lt;/code&gt;). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NTCRN</key>
    <name>Tostring Could Return Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This toString method seems to return null in some circumstances. A liberal reading of the spec could be interpreted as allowing this, but it is probably a bad idea and could cause other code to break. Return the empty string or some other appropriate string rather than null.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NUF</key>
    <name>Unwritten Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;The program is dereferencing a field that does not seem to ever have a
non-null value written to it. Unless the field is initialized via some
mechanism not seen by the analysis, dereferencing this value will
generate a null pointer exception.
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NUPOPF</key>
    <name>Unwritten Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;The program is dereferencing a public or protected field that does not
seem to ever have a non-null value written to it. Unless the field is
initialized via some mechanism not seen by the analysis, dereferencing
this value will generate a null pointer exception.
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NVC</key>
    <name>Very Confusing</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NVCI</key>
    <name>Very Confusing Intentional</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other. From the existence of other methods, it seems that the existence of both of these methods is intentional, but is sure is confusing. You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NWP</key>
    <name>Wrong Package</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method in the subclass doesn’t override a similar method in a superclass because the type of a parameter doesn’t exactly match the type of the corresponding parameter in the superclass. For example, if you have:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import alpha.Foo;

public class A {
    public int f(Foo x) { return 17; }
}
----
import beta.Foo;

public class B extends A {
    public int f(Foo x) { return 42; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;B&lt;/code&gt; doesn’t override the &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;A&lt;/code&gt;, because the argument types are &lt;code&gt;Foo&lt;/code&gt;’s from different packages.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NWPI</key>
    <name>Wrong Package Intentional</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method in the subclass doesn’t override a similar method in a superclass because the type of a parameter doesn’t exactly match the type of the corresponding parameter in the superclass. For example, if you have:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import alpha.Foo;

public class A {
    public int f(Foo x) { return 17; }
}
----
import beta.Foo;

public class B extends A {
    public int f(Foo x) { return 42; }
    public int f(alpha.Foo x) { return 27; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;B&lt;/code&gt; doesn’t override the &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;A&lt;/code&gt;, because the argument types are &lt;code&gt;Foo&lt;/code&gt;’s from different packages.&lt;/p&gt;
&lt;p&gt;In this case, the subclass does define a method with a signature identical to the method in the superclass, so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider removing or deprecating the method with the similar but not identical signature.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OODR</key>
    <name>Open Database Resource</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OODREP</key>
    <name>Open Database Resource Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OOS</key>
    <name>Open Stream</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method.  This may result in a file descriptor leak.  It is generally a good idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are closed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OOSEP</key>
    <name>Open Stream Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.  This may result in a file descriptor leak.  It is generally a good idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are closed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PAPT</key>
    <name>Absolute Path Traversal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as “/abs/path” that can resolve to a location that is outside of that directory. See &lt;a href=&quot;http://cwe.mitre.org/data/definitions/36.html&quot; class=&quot;uri&quot;&gt;http://cwe.mitre.org/data/definitions/36.html&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of absolute path traversal. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesn’t report. If you are concerned about absolute path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PCI</key>
    <name>Idiom No Super Call</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This non-final class defines a clone() method that does not call super.clone(). If this class (“&lt;em&gt;A&lt;/em&gt;”) is extended by a subclass (“&lt;em&gt;B&lt;/em&gt;”), and the subclass &lt;em&gt;B&lt;/em&gt; calls super.clone(), then it is likely that &lt;em&gt;B&lt;/em&gt;’s clone() method will return an object of type &lt;em&gt;A&lt;/em&gt;, which violates the standard contract for clone().&lt;/p&gt;
&lt;p&gt;If all clone() methods call super.clone(), then they are guaranteed to use Object.clone(), which always returns an object of the correct type.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PDREOII</key>
    <name>Dont Reuse Entry Objects In Iterators</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The entrySet() method is allowed to return a view of the underlying Map in which an Iterator and Map.Entry. This clever idea was used in several Map implementations, but introduces the possibility of nasty coding mistakes. If a map &lt;code&gt;m&lt;/code&gt; returns such an iterator for an entrySet, then &lt;code&gt;c.addAll(m.entrySet())&lt;/code&gt; will go badly wrong. All of the Map implementations in OpenJDK 1.7 have been rewritten to avoid this, you should to.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PPS</key>
    <name>Public Semaphores</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this reference). Client classes that use this class, may, in addition, use an instance of this class as a synchronizing object. Because two classes are using the same object for synchronization, Multithread correctness is suspect. You should not synchronize nor call semaphore methods on a public reference. Consider using a internal private member variable to control synchronization.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PPZLA</key>
    <name>Prefer Zero Length Arrays</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;It is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.&lt;/p&gt;
&lt;p&gt;On the other hand, using null to indicate “there is no answer to this question” is probably appropriate. For example, &lt;code&gt;File.listFiles()&lt;/code&gt; returns an empty list if given a directory containing no files, and returns null if the file is not a directory.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PRPT</key>
    <name>Relative Path Traversal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as “..” that can resolve to a location that is outside of that directory. See &lt;a href=&quot;http://cwe.mitre.org/data/definitions/23.html&quot; class=&quot;uri&quot;&gt;http://cwe.mitre.org/data/definitions/23.html&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of relative path traversal. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesn’t report. If you are concerned about relative path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>QQBA</key>
    <name>Questionable Boolean Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression. Most probably this was supposed to be a boolean comparison using ==, not an assignment using =.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>QQFL</key>
    <name>Questionable For Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Are you sure this for loop is incrementing the correct variable? It appears that another variable is being initialized and checked by the for loop.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>R0TI</key>
    <name>01 To Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A random value from 0 to 1 is being coerced to the integer value 0. You probably want to multiply the random value by something else before coercing it to an integer, or use the &lt;code&gt;Random.nextInt(n)&lt;/code&gt; method.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RAI</key>
    <name>Array Index</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RAL</key>
    <name>Array Length</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RAO</key>
    <name>Array Offset</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RAVOH</key>
    <name>Absolute Value Of Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code generates a hashcode and then computes the absolute value of that hashcode. If the hashcode is &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, then the result will be negative as well (since &lt;code&gt;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;One out of 2^32 strings have a hashCode of Integer.MIN_VALUE, including “polygenelubricants” “GydZG_” and “”DESIGNING WORKHOUSES“.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RAVORI</key>
    <name>Absolute Value Of Random Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code generates a random signed integer and then computes the absolute value of that random integer. If the number returned by the random number generator is &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, then the result will be negative as well (since &lt;code&gt;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE&lt;/code&gt;). (Same problem arises for long values as well).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RBSFRE</key>
    <name>Bad Syntax For Regular Expression</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code here uses a regular expression that is invalid according to the syntax for regular expressions. This statement will throw a PatternSyntaxException when executed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RCCFSRV</key>
    <name>Check Compareto For Specific Return Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code invoked a compareTo or compare method, and checks to see if the return value is a specific value, such as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them will return other values.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RCE</key>
    <name>Catch Exception</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { … } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs.&lt;/p&gt;
&lt;p&gt;A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;try {
    ...
} catch (RuntimeException e) {
    throw e;
} catch (Exception e) {
    ... deal with all non-runtime exceptions ...
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RCFPI</key>
    <name>Check For Positive Indexof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method invokes String.indexOf and checks to see if the result is positive or non-positive. It is much more typical to check to see if the result is negative or non-negative. It is positive only if the substring checked for occurs at some place other than at the beginning of the String.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RCUFSARE</key>
    <name>Cant Use File Separator As Regular Expression</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code here uses &lt;code&gt;File.separator&lt;/code&gt; where a regular expression is required. This will fail on Windows platforms, where the &lt;code&gt;File.separator&lt;/code&gt; is a backslash, which is interpreted in a regular expression as an escape character. Among other options, you can just use &lt;code&gt;File.separatorChar=='\\' ? &amp;quot;\\\\&amp;quot; : File.separator&lt;/code&gt; instead of &lt;code&gt;File.separator&lt;/code&gt;&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RDJNCR</key>
    <name>Dont Just Null Check Readline</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The value returned by readLine is discarded after checking to see if the return value is non-null. In almost all situations, if the result is non-null, you will want to use that non-null value. Calling readLine again will give you a different line.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>REARTN</key>
    <name>Clone Could Return Null</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This clone method seems to return null in some circumstances, but clone is never allowed to return a null value. If you are convinced this path is unreachable, throw an AssertionError instead.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RENT</key>
    <name>Exception Not Thrown</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code creates an exception (or error) object, but doesn’t do anything with it. For example, something like&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (x &lt; 0) {
    new IllegalArgumentException(&amp;quot;x must be nonnegative&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It was probably the intent of the programmer to throw the created exception:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (x &lt; 0) {
    throw new IllegalArgumentException(&amp;quot;x must be nonnegative&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RNC</key>
    <name>Not Checked</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;This method ignores the return value of one of the variants of
`java.io.InputStream.read()` which can return multiple bytes.  If the
return value is not checked, the caller will not be able to correctly
handle the case where fewer bytes were read than the caller requested. 
This is a particularly insidious kind of bug, because in many programs,
reads from input streams usually do read the full amount of data
requested, causing the program to fail only sporadically.
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RNROC</key>
    <name>Negating Result Of Compareto</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code negatives the return value of a compareTo or compare method. This is a questionable or bad programming practice, since if the return value is Integer.MIN_VALUE, negating the return value won’t negate the sign of the result. You can achieve the same intended result by reversing the order of the operands rather than by negating the results.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RPUP</key>
    <name>Possible Unintended Pattern</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A String function is being invoked and “.” or “|” is being passed to a parameter that takes a regular expression as an argument. Is this what you intended? For example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s.replaceAll(“.”, “/”) will return a String in which &lt;em&gt;every&lt;/em&gt; character has been replaced by a ‘/’ character&lt;/li&gt;
&lt;li&gt;s.split(“.”) &lt;em&gt;always&lt;/em&gt; returns a zero length array of String&lt;/li&gt;
&lt;li&gt;“ab|cd”.replaceAll(“|”, “/”) will return “/a/b/|/c/d/”&lt;/li&gt;
&lt;li&gt;“ab|cd”.split(“|”) will return array with six (!) elements: [, a, b, |, c, d]&lt;/li&gt;
&lt;/ul&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRC</key>
    <name>Ref Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares two reference values using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRCBP</key>
    <name>Ref Comparison Bad Practice</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRCBPB</key>
    <name>Ref Comparison Bad Practice Boolean</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the &lt;code&gt;new Boolean(b)&lt;/code&gt; constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using &lt;code&gt;.equals(...)&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRCONANV</key>
    <name>Redundant Comparison Of Null And Nonnull Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a reference known to be non-null with another reference known to be null.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRCT</key>
    <name>Repeated Conditional Test</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code contains a conditional test is performed twice, one right after the other (e.g., &lt;code&gt;x == 0 || x == 0&lt;/code&gt;). Perhaps the second occurrence is intended to be something else (e.g., &lt;code&gt;x == 0 || y == 0&lt;/code&gt;).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRCTNV</key>
    <name>Redundant Comparison Two Null Values</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a redundant comparison of two references known to both be definitely null.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRI</key>
    <name>Redundant Interfaces</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class declares that it implements an interface that is also implemented by a superclass. This is redundant because once a superclass implements an interface, all subclasses by default also implement this interface. It may point out that the inheritance hierarchy has changed since this class was created, and consideration should be given to the ownership of the interface’s implementation.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRNONV</key>
    <name>Redundant Nullcheck Of Nonnull Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a redundant check of a known non-null value against the constant null.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRNWHBAN</key>
    <name>Redundant Nullcheck Would Have Been A Npe</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value is checked here to see whether it is null, but this value can’t be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree as to whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RROH</key>
    <name>Rem Of Hashcode</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code computes a hashCode, and then computes the remainder of that value modulo another value. Since the hashCode can be negative, the result of the remainder operation can also be negative.&lt;/p&gt;
&lt;p&gt;Assuming you want to ensure that the result of your computation is nonnegative, you may need to change your code. If you know the divisor is a power of 2, you can use a bitwise and operator instead (i.e., instead of using &lt;code&gt;x.hashCode()%n&lt;/code&gt;, use &lt;code&gt;x.hashCode()&amp;(n-1)&lt;/code&gt;). This is probably faster than computing the remainder as well. If you don’t know that the divisor is a power of 2, take the absolute value of the result of the remainder operation (i.e., use &lt;code&gt;Math.abs(x.hashCode()%n)&lt;/code&gt;).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRORI</key>
    <name>Rem Of Random Int</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code generates a random signed integer and then computes the remainder of that value modulo another value. Since the random number can be negative, the result of the remainder operation can also be negative. Be sure this is intended, and strongly consider using the Random.nextInt(int) method instead.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRS</key>
    <name>Readobject Sync</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This serializable class defines a &lt;code&gt;readObject()&lt;/code&gt; which is synchronized.  By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for &lt;code&gt;readObject()&lt;/code&gt; to be synchronized.  If the &lt;code&gt;readObject()&lt;/code&gt; method itself is causing the object to become visible to another thread, that is an example of very dubious coding style.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRVI</key>
    <name>Return Value Ignored</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The return value of this method should be checked. One common cause of this warning is to invoke a method on an immutable object, thinking that it updates the object. For example, in the following code fragment,&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String dateString = getHeaderField(name);
dateString.trim();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the programmer seems to be thinking that the trim() method will update the String referenced by dateString. But since Strings are immutable, the trim() function returns a new String value, which is being ignored here. The code should be corrected to:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String dateString = getHeaderField(name);
dateString = dateString.trim();&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRVIBP</key>
    <name>Return Value Ignored Bad Practice</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method returns a value that is not checked. The return value should be checked since it can indicate an unusual or unexpected function execution. For example, the &lt;code&gt;File.delete()&lt;/code&gt; method returns false if the file could not be successfully deleted (rather than throwing an Exception). If you don’t check the result, you won’t notice if the method invocation signals unexpected behavior by returning an atypical return value.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRVII</key>
    <name>Return Value Ignored Inferred</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code calls a method and ignores the return value. The return value is the same type as the type the method is invoked on, and from our analysis it looks like the return value might be important (e.g., like ignoring the return value of &lt;code&gt;String.toLowerCase()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We are guessing that ignoring the return value might be a bad idea just from a simple analysis of the body of the method. You can use a &lt;span class=&quot;citation&quot; data-cites=&quot;CheckReturnValue&quot;&gt;@CheckReturnValue&lt;/span&gt; annotation to instruct SpotBugs as to whether ignoring the return value of this method is important or acceptable.&lt;/p&gt;
&lt;p&gt;Please investigate this closely to decide whether it is OK to ignore the return value.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRVINSE</key>
    <name>Return Value Ignored No Side Effect</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code calls a method and ignores the return value. However our analysis shows that the method (including its implementations in subclasses if any) does not produce any effect other than return value. Thus this call can be removed.&lt;/p&gt;
&lt;p&gt;We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong. Common false-positive cases include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The method is called to trigger the class loading which may have a side effect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The method is called just to get some exception.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you feel that our assumption is incorrect, you can use a &lt;span class=&quot;citation&quot; data-cites=&quot;CheckReturnValue&quot;&gt;@CheckReturnValue&lt;/span&gt; annotation to instruct SpotBugs that ignoring the return value of this method is acceptable.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RRVOPI</key>
    <name>Return Value Of Putifabsent Ignored</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;putIfAbsent&lt;/code&gt; method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isn’t stored in the map, your program will behave incorrectly.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RSI</key>
    <name>String Index</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RcRNONV</key>
    <name>Redundant Nullcheck Of Null Value</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a redundant check of a known null value against the constant null.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBF</key>
    <name>Bad Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or &lt;code&gt;java.lang.Object&lt;/code&gt;, and does not appear to implement the &lt;code&gt;Externalizable&lt;/code&gt; interface or the &lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt; methods.  Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBFIC</key>
    <name>Bad Field Inner Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This Serializable class is an inner class of a non-serializable class. Thus, attempts to serialize it will also attempt to associate instance of the outer class with which it is associated, leading to a runtime error.&lt;/p&gt;
&lt;p&gt;If possible, making the inner class a static inner class should solve the problem. Making the outer class serializable might also work, but that would mean serializing an instance of the inner class would always also serialize the instance of the outer class, which it often not what you really want.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBFS</key>
    <name>Bad Field Store</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A non-serializable value is stored into a non-transient field of a serializable class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBPSA</key>
    <name>Bad Prepared Statement Access</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A call to a setXXX method of a prepared statement was made where the parameter index is 0. As parameter indexes start at index 1, this is always a mistake.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBRA</key>
    <name>Bad Resultset Access</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A call to getXXX or updateXXX methods of a result set was made where the field index is 0. As ResultSet fields start at index 1, this is always a mistake.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SCSBS</key>
    <name>Comparator Should Be Serializable</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class implements the &lt;code&gt;Comparator&lt;/code&gt; interface. You should consider whether or not it should also implement the &lt;code&gt;Serializable&lt;/code&gt; interface. If a comparator is used to construct an ordered collection such as a &lt;code&gt;TreeMap&lt;/code&gt;, then the &lt;code&gt;TreeMap&lt;/code&gt; will be serializable only if the comparator is also serializable. As most comparators have little or no state, making them serializable is generally easy and good defensive programming.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SDSDTSF</key>
    <name>Dead Store Due To Switch Fallthrough</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that you forgot to put a break or return at the end of the previous case.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SDSDTSFTT</key>
    <name>Dead Store Due To Switch Fallthrough To Throw</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. It is likely that you forgot to put a break or return at the end of the previous case.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SFDA</key>
    <name>Field Double Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a double assignment of a field; e.g.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int x,y;
public void foo() {
    x = x = 17;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assigning to a field twice is useless, and may indicate a logic error or typo.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SFSA</key>
    <name>Field Self Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a self assignment of a field; e.g.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int x;
public void foo() {
    x = x;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such assignments are useless, and may indicate a logic error or typo.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SFSC</key>
    <name>Field Self Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares a field with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIBFA</key>
    <name>Instance Before Finals Assigned</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The class’s static initializer creates an instance of the class before all of the static final fields are assigned.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIC</key>
    <name>Inner Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This Serializable class is an inner class. Any attempt to serialize it will also serialize the associated outer instance. The outer instance is serializable, so this won’t fail, but it might serialize a lot more data than intended. If possible, making the inner class a static inner class (also known as a nested class) should solve the problem.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIOC</key>
    <name>Interrupted On Currentthread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a static method, is more simple and clear to use Thread.interrupted().&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIOSCI</key>
    <name>Invoke On Static Calendar Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. The detector has found a call to an instance of Calendar that has been obtained via a static field. This looks suspicious.&lt;/p&gt;
&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIOSDFI</key>
    <name>Invoke On Static Date Format Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. The detector has found a call to an instance of DateFormat that has been obtained via a static field. This looks suspicious.&lt;/p&gt;
&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIOU</key>
    <name>Interrupted On Unknownthread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is not the current thread. As the interrupted() method is static, the interrupted method will be called on a different object than the one the author intended.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SISBS</key>
    <name>Inner Should Be Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class is an inner class, but does not use its embedded reference to the object which created it.  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.  If possible, the class should be made static.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SISBSA</key>
    <name>Inner Should Be Static Anon</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class is an inner class, but does not use its embedded reference to the object which created it.  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.  If possible, the class should be made into a &lt;em&gt;static&lt;/em&gt; inner class. Since anonymous inner classes cannot be marked as static, doing this will require refactoring the inner class so that it is a named inner class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SISBSNT</key>
    <name>Inner Should Be Static Needs This</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class is an inner class, but does not use its embedded reference to the object which created it except during construction of the inner object.  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.  If possible, the class should be made into a &lt;em&gt;static&lt;/em&gt; inner class. Since the reference to the outer object is required during construction of the inner instance, the inner class will need to be refactored so as to pass a reference to the outer instance to the constructor for the inner class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SLDA</key>
    <name>Local Double Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a double assignment of a local variable; e.g.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() {
    int x,y;
    x = x = 17;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SLSA</key>
    <name>Local Self Assignment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a self assignment of a local variable; e.g.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() {
    int x = 3;
    x = x;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such assignments are useless, and may indicate a logic error or typo.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SLSAIOF</key>
    <name>Local Self Assignment Instead Of Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a self assignment of a local variable, and there is a field with an identical name. assignment appears to have been ; e.g.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;    int foo;
    public void setFoo(int foo) {
        foo = foo;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The assignment is useless. Did you mean to assign to the field instead?&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SLSC</key>
    <name>Local Self Comparison</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method compares a local variable with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SMMBP</key>
    <name>Method Must Be Private</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface, and defines a method for custom serialization/deserialization. But since that method isn’t declared private, it will be silently ignored by the serialization/deserialization API.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SNC</key>
    <name>Not Checked</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method ignores the return value of &lt;code&gt;java.io.InputStream.skip()&lt;/code&gt; which can skip multiple bytes.  If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were skipped than the caller requested.  This is a particularly insidious kind of bug, because in many programs, skips from input streams usually do skip the full amount of data requested, causing the program to fail only sporadically. With Buffered streams, however, skip() will only skip data in the buffer, and will routinely fail to skip the requested number of bytes.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SNS</key>
    <name>Nonfinal Serialversionid</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not final.  The field should be made final if it is intended to specify the version UID for purposes of serialization.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SNSC</key>
    <name>No Suitable Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface and its superclass does not. When such an object is deserialized, the fields of the superclass need to be initialized by invoking the void constructor of the superclass. Since the superclass does not have one, serialization and deserialization will fail at runtime.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SNSCFE</key>
    <name>No Suitable Constructor For Externalization</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class implements the &lt;code&gt;Externalizable&lt;/code&gt; interface, but does not define a void constructor. When Externalizable objects are deserialized, they first need to be constructed by invoking the void constructor. Since this class does not have one, serialization and deserialization will fail at runtime.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SNSPTE</key>
    <name>Nonconstant String Passed To Execute</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The method invokes the execute or addBatch method on an SQL statement with a String that seems to be dynamically generated. Consider using a prepared statement instead. It is more efficient and less vulnerable to SQL injection attacks.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SPRRNI</key>
    <name>Private Read Resolve Not Inherited</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a private readResolve method. Since it is private, it won’t be inherited by subclasses. This might be intentional and OK, but should be reviewed to ensure it is what is intended.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SPSGFNS</key>
    <name>Prepared Statement Generated From Nonconstant String</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The code creates an SQL prepared statement from a nonconstant String. If unchecked, tainted data from a user is used in building this String, SQL injection could be used to make the prepared statement do something unexpected and undesirable.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SRRIS</key>
    <name>Read Resolve Is Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;In order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SRRMRO</key>
    <name>Read Resolve Must Return Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;In order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSBS</key>
    <name>Should Be Static</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSCI</key>
    <name>Static Calendar Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().&lt;/p&gt;
&lt;p&gt;You may also experience serialization problems.&lt;/p&gt;
&lt;p&gt;Using an instance field is recommended.&lt;/p&gt;
&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSI</key>
    <name>Superfluous Instanceof</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Type check performed using the instanceof operator where it can be statically determined whether the object is of the type requested.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSIC</key>
    <name>Start In Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The constructor starts a thread. This is likely to be wrong if the class is ever extended/subclassed, since the thread will be started before the subclass constructor is started.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSMIIST</key>
    <name>Swing Methods Invoked In Swing Thread</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;(&lt;a href=&quot;http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html&quot;&gt;From JDC Tech Tip&lt;/a&gt;): The Swing methods show(), setVisible(), and pack() will create the associated peer for the frame. With the creation of the peer, the system creates the event dispatch thread. This makes things problematic because the event dispatch thread could be notifying listeners while pack and validate are still processing. This situation could result in two threads going through the Swing component-based GUI – it’s a serious flaw that could result in deadlocks or other related threading issues. A pack call causes components to be realized. As they are being realized (that is, not necessarily visible), they could trigger listener notification on the event dispatch thread.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSOF</key>
    <name>Spin On Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method spins in a loop which reads a field.  The compiler may legally hoist the read out of the loop, turning the code into an infinite loop.  The class should be changed so it uses proper synchronization (including wait and notify calls).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSSDFI</key>
    <name>Static Simple Date Format Instance</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.&lt;/p&gt;
&lt;p&gt;You may also experience serialization problems.&lt;/p&gt;
&lt;p&gt;Using an instance field is recommended.&lt;/p&gt;
&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSWLH</key>
    <name>Sleep With Lock Held</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method calls Thread.sleep() with a lock held. This may result in very poor performance and scalability, or a deadlock, since other threads may be waiting to acquire the lock. It is a much better idea to call wait() on the lock, which releases the lock and allows other threads to run.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>STDE</key>
    <name>Threadlocal Deadly Embrace</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn’t static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>STFNR</key>
    <name>Transient Field Not Restored</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any deserialized instance of the class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>STFONC</key>
    <name>Transient Field Of Nonserializable Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;The field is marked as transient, but the class isn’t Serializable, so marking it as transient has absolutely no effect. This may be leftover marking from a previous version of the code in which the class was transient, or it may indicate a misunderstanding of how serialization works.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>STS</key>
    <name>String Tostring</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Calling &lt;code&gt;String.toString()&lt;/code&gt; is just a redundant operation. Just use the String.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SWTSFIM</key>
    <name>Write To Static From Instance Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instance method writes to a static field. This is tricky to get correct if multiple instances are being manipulated, and generally bad practice.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SaFSC</key>
    <name>Field Self Computation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method performs a nonsensical computation of a field with another reference to the same field (e.g., x&amp;x or x-x). Because of the nature of the computation, this operation doesn’t seem to make sense, and may indicate a typo or a logic error. Double check the computation.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SaLSC</key>
    <name>Local Self Computation</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&amp;x or x-x). Because of the nature of the computation, this operation doesn’t seem to make sense, and may indicate a typo or a logic error. Double check the computation.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SeNS</key>
    <name>Nonlong Serialversionid</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not long.  The field should be made long if it is intended to specify the version UID for purposes of serialization.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SeNoS</key>
    <name>Nonstatic Serialversionid</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not static.  The field should be made static if it is intended to specify the version UID for purposes of serialization.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TAVUWNR</key>
    <name>Always Value Used Where Never Required</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value specified as carrying a type qualifier annotation is consumed in a location or locations requiring that the value not carry that annotation.&lt;/p&gt;
&lt;p&gt;More precisely, a value annotated with a type qualifier specifying when=ALWAYS is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.&lt;/p&gt;
&lt;p&gt;For example, say that &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; is a nickname for the type qualifier annotation &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;(when=When.NEVER). The following code will generate this warning because the return statement requires a &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; value, but receives one that is marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public @NonNegative Integer example(@Negative Integer value) {
    return value;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TCVWITQ</key>
    <name>Comparing Values With Incompatible Type Qualifiers</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value specified as carrying a type qualifier annotation is compared with a value that doesn’t ever carry that qualifier.&lt;/p&gt;
&lt;p&gt;More precisely, a value annotated with a type qualifier specifying when=ALWAYS is compared with a value that where the same type qualifier specifies when=NEVER.&lt;/p&gt;
&lt;p&gt;For example, say that &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; is a nickname for the type qualifier annotation &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;(when=When.NEVER). The following code will generate this warning because the return statement requires a &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; value, but receives one that is marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean example(@Negative Integer value1, @NonNegative Integer value2) {
    return value1.equals(value2);
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TEUSVRAS</key>
    <name>Explicit Unknown Source Value Reaches Always Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value is used in a way that requires it to be always be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is required to have that type qualifier. Either the usage or the annotation is incorrect.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TEUSVRNS</key>
    <name>Explicit Unknown Source Value Reaches Never Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value is used in a way that requires it to be never be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier. Either the usage or the annotation is incorrect.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMSVRAS</key>
    <name>Maybe Source Value Reaches Always Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value that is annotated as possibility not being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that requires values denoted by that type qualifier.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMSVRNS</key>
    <name>Maybe Source Value Reaches Never Sink</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value that is annotated as possibility being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that prohibits values denoted by that type qualifier.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TNVUWAR</key>
    <name>Never Value Used Where Always Required</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value specified as not carrying a type qualifier annotation is guaranteed to be consumed in a location or locations requiring that the value does carry that annotation.&lt;/p&gt;
&lt;p&gt;More precisely, a value annotated with a type qualifier specifying when=NEVER is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.&lt;/p&gt;
&lt;p&gt;TODO: example&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TTLW</key>
    <name>Two Lock Wait</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Waiting on a monitor while two locks are held may cause deadlock.   Performing a wait only releases the lock on the object being waited on, not any other locks.   This not necessarily a bug, but is worth examining closely.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TUVUWASR</key>
    <name>Unknown Value Used Where Always Strictly Required</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;A value is being used in a way that requires the value be annotation with a type qualifier. The type qualifier is strict, so the tool rejects any values that do not have the appropriate annotation.&lt;/p&gt;
&lt;p&gt;To coerce a value to have a strict annotation, define an identity function where the return value is annotated with the strict annotation. This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UFNIIC</key>
    <name>Field Not Initialized In Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This field is never initialized within any constructor, and is therefore could be null after the object is constructed. Elsewhere, it is loaded and dereferenced without a null check. This could be a either an error or a questionable design, since it means a null pointer exception will be generated if that field is dereferenced before being initialized.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UIUG</key>
    <name>Inheritance Unsafe Getresource</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Calling &lt;code&gt;this.getClass().getResource(...)&lt;/code&gt; could give results other than expected if this class is extended by a class in another package.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UNCIE</key>
    <name>Equals Should Handle Null Argument</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument. All equals() methods should return false if passed a null value.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UNF</key>
    <name>Null Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;All writes to this field are of the constant value null, and thus all reads of the field will return null. Check for errors, or remove it if it is useless.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>USSUG</key>
    <name>Sync Set Unsync Get</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class contains similarly-named get and set methods where the set method is synchronized and the get method is not.  This may result in incorrect behavior at runtime, as callers of the get method will not necessarily see a consistent state for the object.  The get method should be made synchronized.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUCF</key>
    <name>Useless Control Flow</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a useless control flow statement, where control flow continues onto the same place regardless of whether or not the branch is taken. For example, this is caused by having an empty statement block for an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (argv.length == 0) {
    // TODO: handle this case
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUCFNL</key>
    <name>Useless Control Flow Next Line</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a useless control flow statement in which control flow follows to the same or following line regardless of whether or not the branch is taken. Often, this is caused by inadvertently using an empty statement as the body of an &lt;code&gt;if&lt;/code&gt; statement, e.g.:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (argv.length == 1);
    System.out.println(&amp;quot;Hello, &amp;quot; + argv[0]);&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUCT</key>
    <name>Useless Condition Type</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This condition always produces the same result due to the type range of the involved variable. Probably something else was meant or the condition can be removed.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUCo</key>
    <name>Useless Condition</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This condition always produces the same result as the value of the involved variable that was narrowed before. Probably something else was meant or the condition can be removed.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUF</key>
    <name>Unread Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This field is never read.  Consider removing it from the class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUL</key>
    <name>Unreleased Lock</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method acquires a JSR-166 (&lt;code&gt;java.util.concurrent&lt;/code&gt;) lock, but does not release it on all paths out of the method. In general, the correct idiom for using a JSR-166 lock is:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Lock l = ...;
l.lock();
try {
    // do something
} finally {
    l.unlock();
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UULEP</key>
    <name>Unreleased Lock Exception Path</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method acquires a JSR-166 (&lt;code&gt;java.util.concurrent&lt;/code&gt;) lock, but does not release it on all exception paths out of the method. In general, the correct idiom for using a JSR-166 lock is:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Lock l = ...;
l.lock();
try {
    // do something
} finally {
    l.unlock();
}&lt;/code&gt;&lt;/pre&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUM</key>
    <name>Unnecessary Math</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method uses a static method from java.lang.Math on a constant value. This method’s result in this case, can be determined statically, and is faster and sometimes more accurate to just use the constant. Methods detected are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Method&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;abs&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;acos&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;asin&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;atan&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;atan2&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;cbrt&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;ceil&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;cos&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;cosh&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;exp&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;expm1&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;floor&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;log&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;log10&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;rint&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;round&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;sin&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;sinh&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;sqrt&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;tan&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;tanh&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;toDegrees&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;toRadians&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUMOAC</key>
    <name>Uncallable Method Of Anonymous Class</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This anonymous class defined a method that is not directly invoked and does not override a method in a superclass. Since methods in other classes cannot directly invoke methods declared in an anonymous class, it seems that this method is uncallable. The method might simply be dead code, but it is also possible that the method is intended to override a method declared in a superclass, and due to an typo or other error the method does not, in fact, override the method it is intended to.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUO</key>
    <name>Useless Object</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Our analysis shows that this object is useless. It’s created and modified, but its value never go outside of the method or produce any side-effect. Either there is a mistake and object was intended to be used or it can be removed.&lt;/p&gt;
&lt;p&gt;This analysis rarely produces false-positives. Common false-positive cases include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This object used to implicitly throw some obscure exception.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This object used as a stub to generalize the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This object used to hold strong references to weak/soft-referenced objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUOS</key>
    <name>Useless Object Stack</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This object is created just to perform some modifications which don’t have any side-effect. Probably something else was meant or the object can be removed.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUPM</key>
    <name>Uncalled Private Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This private method is never called. Although it is possible that the method will be invoked through reflection, it is more likely that the method is never used, and should be removed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUPOPF</key>
    <name>Unread Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This field is never read.  The field is public or protected, so perhaps it is intended to be used with classes not seen as part of the analysis. If not, consider removing it from the class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUR</key>
    <name>Uninit Read</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This constructor reads a field which has not yet been assigned a value.  This is often caused when the programmer mistakenly uses the field instead of one of the constructor’s parameters.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UURCFSC</key>
    <name>Uninit Read Called From Super Constructor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method is invoked in the constructor of the superclass. At this point, the fields of the class have not yet initialized.&lt;/p&gt;
&lt;p&gt;To make this more concrete, consider the following classes:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;abstract class A {
    int hashCode;
    abstract Object getValue();

    A() {
        hashCode = getValue().hashCode();
    }
}

class B extends A {
    Object value;

    B(Object v) {
        this.value = v;
    }

    Object getValue() {
        return value;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a &lt;code&gt;B&lt;/code&gt; is constructed, the constructor for the &lt;code&gt;A&lt;/code&gt; class is invoked &lt;em&gt;before&lt;/em&gt; the constructor for &lt;code&gt;B&lt;/code&gt; sets &lt;code&gt;value&lt;/code&gt;. Thus, when the constructor for &lt;code&gt;A&lt;/code&gt; invokes &lt;code&gt;getValue&lt;/code&gt;, an uninitialized value is read for &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUVM</key>
    <name>Useless Void Method</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Our analysis shows that this non-empty void method does not actually perform any useful work. Please check it: probably there’s a mistake in its code or its body can be fully removed.&lt;/p&gt;
&lt;p&gt;We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong. Common false-positive cases include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The method is intended to trigger loading of some class which may have a side effect.&lt;/li&gt;
&lt;li&gt;The method is intended to implicitly throw some obscure exception.&lt;/li&gt;
&lt;/ul&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UUW</key>
    <name>Uncond Wait</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a call to &lt;code&gt;java.lang.Object.wait()&lt;/code&gt; which is not guarded by conditional control flow.  The code should verify that condition it intends to wait for is not already satisfied before calling wait; any previous notifications will be ignored.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UWOC</key>
    <name>Number Ctor</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;Using &lt;code&gt;new Integer(int)&lt;/code&gt; is guaranteed to always result in a new object whereas &lt;code&gt;Integer.valueOf(int)&lt;/code&gt; allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.&lt;/p&gt;
&lt;p&gt;Values between -128 and 127 are guaranteed to have corresponding cached instances and using &lt;code&gt;valueOf&lt;/code&gt; is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same.&lt;/p&gt;
&lt;p&gt;Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the &lt;code&gt;valueOf()&lt;/code&gt; method when creating instances of &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, and &lt;code&gt;Byte&lt;/code&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UuUF</key>
    <name>Unused Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This field is never used.  Consider removing it from the class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UuUPOPF</key>
    <name>Unused Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This field is never used.  The field is public or protected, so perhaps it is intended to be used with classes not seen as part of the analysis. If not, consider removing it from the class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UwUF</key>
    <name>Unwritten Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This field is never written.  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UwUPOPF</key>
    <name>Unwritten Public Or Protected Field</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;No writes were seen to this public/protected field.  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>VFSUN</key>
    <name>Format String Uses Newline</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This format string includes a newline character (\n). In format strings, it is generally preferable to use %n, which will produce the platform-specific line separator.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>VPAPTOV</key>
    <name>Primitive Array Passed To Object Vararg</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code passes a primitive array to a function that takes a variable number of object arguments. This creates an array of length one to hold the primitive array and passes it to the function.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>VVI</key>
    <name>Volatile Increment</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code increments a volatile field. Increments of volatile fields aren’t atomic. If more than one thread is incrementing the field at the same time, increments could be lost.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>VVRTA</key>
    <name>Volatile Reference To Array</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This declares a volatile reference to an array, which might not be what you want. With a volatile reference to an array, reads and writes of the reference to the array are treated as volatile, but the array elements are non-volatile. To get volatile array elements, you will need to use one of the atomic array classes in java.util.concurrent (provided in Java 5.0).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WANIL</key>
    <name>Await Not In Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a call to &lt;code&gt;java.util.concurrent.await()&lt;/code&gt; (or variants) which is not in a loop.  If the object is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WNIL</key>
    <name>Not In Loop</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method contains a call to &lt;code&gt;java.lang.Object.wait()&lt;/code&gt; which is not in a loop.  If the monitor is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WUGRTCL</key>
    <name>Using Getclass Rather Than Class Literal</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This instance method synchronizes on &lt;code&gt;this.getClass()&lt;/code&gt;. If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn’t likely what was intended. For example, consider this code from java.awt.Label:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final String base = &amp;quot;label&amp;quot;;
private static int nameCounter = 0;

String constructComponentName() {
    synchronized (getClass()) {
        return base + nameCounter++;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Subclasses of &lt;code&gt;Label&lt;/code&gt; won’t synchronize on the same subclass, giving rise to a datarace. Instead, this code should be synchronizing on &lt;code&gt;Label.class&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final String base = &amp;quot;label&amp;quot;;
private static int nameCounter = 0;

String constructComponentName() {
    synchronized (Label.class) {
        return base + nameCounter++;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bug pattern contributed by Jason Mehrens&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WWMI</key>
    <name>Wrong Map Iterator</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method accesses the value of a Map entry, using a key that was retrieved from a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WWS</key>
    <name>Writeobject Sync</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This class has a &lt;code&gt;writeObject()&lt;/code&gt; method which is synchronized; however, no other method of the class is synchronized.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XRPTJW</key>
    <name>Request Parameter To Jsp Writer</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting vulnerabilities that SpotBugs doesn’t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XRPTSE</key>
    <name>Request Parameter To Send Error</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows for a reflected cross site scripting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting vulnerabilities that SpotBugs doesn’t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XRPTSW</key>
    <name>Request Parameter To Servlet Writer</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting vulnerabilities that SpotBugs doesn’t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XXFB</key>
    <name>Xml Factory Bypass</name>
    <description>&lt;h3&gt;FindBugs&lt;/h3&gt;&lt;p&gt;This method allocates a specific implementation of an xml interface. It is preferable to use the supplied factory classes to create these objects so that the implementation can be changed at runtime. See&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javax.xml.parsers.DocumentBuilderFactory&lt;/li&gt;
&lt;li&gt;javax.xml.parsers.SAXParserFactory&lt;/li&gt;
&lt;li&gt;javax.xml.transform.TransformerFactory&lt;/li&gt;
&lt;li&gt;org.w3c.dom.Document.create&lt;em&gt;XXXX&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for details.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DBZ</key>
    <name>Division By Zero</name>
    <description>&lt;h3&gt;RTEHunter&lt;/h3&gt;Division by zero causes an ArithmeticException.</description>
    <type>BUG</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IOB</key>
    <name>Index Out Of Bounds</name>
    <description>&lt;h3&gt;RTEHunter&lt;/h3&gt;Indexing an array by an index which is less than zero, or greater than its size.</description>
    <type>BUG</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NAS</key>
    <name>Negative Array Size</name>
    <description>&lt;h3&gt;RTEHunter&lt;/h3&gt;Creating an array with negative size.</description>
    <type>BUG</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NPE</key>
    <name>NullPointerException</name>
    <description>&lt;h3&gt;RTEHunter&lt;/h3&gt;Null pointer dereferenced which causes a NullPointerException.</description>
    <type>BUG</type>
    <severity>BLOCKER</severity>
    <tag>sourcemeter</tag>
  </rule>
</rules>
