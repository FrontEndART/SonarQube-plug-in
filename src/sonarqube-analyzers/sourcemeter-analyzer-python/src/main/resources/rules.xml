<?xml version="1.0" ?>
<rules>
  <rule>
    <key>MET_CBO</key>
    <name>Coupling Between Object classes (CBO) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of directly used other classes (e.g. by inheritance, function call, type reference, attribute reference). Classes using many other classes highly depend on their environment, so it is difficult to test or reuse them; furthermore, they are very sensitive to the changes in the system.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CBOI</key>
    <name>Coupling Between Object classes Inverse (CBOI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of other classes, which directly use the class. Classes which are used by many other classes have a high impact on the behavior of the system, and should be modified very carefully and tested intensively.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CD</key>
    <name>Comment Density (CD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method/Function:&lt;/strong&gt; ratio of the comment lines of the method/function (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; ratio of the comment lines of the class (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; ratio of the comment lines of the module (CLOC) to the sum of its comment (CLOC) and logical lines of code (LLOC).&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLOC</key>
    <name>Comment Lines of Code (CLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method/Function:&lt;/strong&gt; number of comment and documentation code lines of the method/function; however, its local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of comment and documentation code lines of the class, including its local methods and attributes; however, its nested and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of comment and documentation code lines of the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of comment and documentation code lines in the file.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_DIT</key>
    <name>Depth of Inheritance Tree (DIT) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; length of the path that leads from the class to its farthest ancestor in the inheritance tree.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_DLOC</key>
    <name>Documentation Lines of Code (DLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method/Function:&lt;/strong&gt; number of documentation code lines of the method/function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of documentation code lines of the class, including its local methods and attributes; however, its nested and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of documentation code lines of the modul.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LCOM5</key>
    <name>Lack of Cohesion in Methods 5 (LCOM5) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of functionalities of the class. One of the basic principles of object-oriented programming is encapsulation, meaning that attributes belonging together and the operations that use them should be organized into one class, and one class shall implement only one functionality, i.e. its attributes and methods should be coherent. This metric measures the lack of cohesion and computes into how many coherent classes the class could be split. It is calculated by taking a non-directed graph, where the nodes are the implemented local methods of the class and there is an edge between the two nodes if and only if a common (local or inherited) attribute or abstract method is used or a method invokes another. The value of the metric is the number of connected components in the graph not counting those, which contain only constructors.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LLOC</key>
    <name>Logical Lines of Code (LLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of non-empty and non-comment code lines of the method/function; however, its nested functions are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of non-empty and non-comment code lines of the class, including the non-empty and non-comment lines of its local methods; however, its nested and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of non-empty and non-comment code lines of the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of non-empty and non-comment code lines of the package; however, its subpackages are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of non-empty and non-comment code lines in the file.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LOC</key>
    <name>Lines of Code (LOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of code lines of the method/function, including empty and comment lines; however, its nested functions are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of code lines of the class, including empty and comment lines, as well as its local methods; however, its nested and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of code lines of the module, including empty and comment lines.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of code lines of the package, including empty and comment lines; however, its subpackages are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of code lines in the file, including empty and comment lines.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_McCC</key>
    <name>McCabe's Cyclomatic Complexity (McCC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; complexity of the method/function expressed as the number of independent control flow paths in it. It represents a lower bound for the number of possible execution paths in the source code and at the same time it is an upper bound for the minimum number of test cases needed for achieving full branch test coverage. The value of the metric is calculated as the number of the following instructions plus 1: if, for, while, except and conditional expression. Moreover, logical “and” and logical “or” expressions also add 1 to the value because their short-circuit evaluation can cause branching depending on the first operand. The following instructions are not included: else, try, finally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; complexity of the file expressed as the number of independent control flow paths in it. It represents a lower bound for the number of possible execution paths in the source code and at the same time it is an upper bound for the minimum number of test cases needed for achieving full branch test coverage. The value of the metric is calculated as the number of the following instructions plus 1: if, for, while, except and conditional expression. Moreover, logical “and” and logical “or” expressions also add 1 to the value because their short-circuit evaluation can cause branching depending on the first operand. The following instructions are not included: else, try, finally.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NA</key>
    <name>Number of Attributes (NA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of attributes in the class, including the inherited ones; however, the attributes of its nested and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of attributes in the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of attributes in the package; however, attributes of its subpackages are not included.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NCL</key>
    <name>Number of Classes (NCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of classes in the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of classes in the package; however, the classes of its subpackages are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NII</key>
    <name>Number of Incoming Invocations (NII) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of other methods/functions and attribute initializations which directly call the method/function. If the method/function is invoked several times from the same method/function or attribute initialization, it is counted only once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of other methods and attribute initializations which directly call the local methods of the class. If a method is invoked several times from the same method or attribute initialization, it is counted only once.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NL</key>
    <name>Nesting Level (NL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; complexity of the method/function expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes. The following instructions are taken into account: if, else-if, else, for, while, with, try, except, finally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes. It is calculated as the maximum nesting level (NL) of its local methods.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLA</key>
    <name>Number of Local Attributes (NLA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) attributes in the class; however, the attributes of nested and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLE</key>
    <name>Nesting Level Else-If (NLE) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; complexity of the method/function expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes, where in the if-else-if construct only the first if instruction is considered. The following instructions are taken into account: if, else, for, while, with, try, except, finally. The following instructions do not increase the value by themselves; however, if additional embeddedness can be found in their blocks, they are considered: else-if (i.e. in the if-else-if construct the use of else-if does not increase the value of the metric).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the depth of the maximum embeddedness of its conditional, iteration and exception handling block scopes, where in the if-else-if construct only the first if instruction is considered. It is calculated as the maximum nesting level (NLE) of its local methods.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NLM</key>
    <name>Number of Local Methods (NLM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class; however, the methods of nested and local classes are not included.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NM</key>
    <name>Number of Methods (NM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of methods/functions in the class, including the inherited ones; however, the methods of its nested and local classes are not included. Methods that override abstract methods are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of methods in the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of methods in the package; however, methods of its subpackages are not included.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOA</key>
    <name>Number of Ancestors (NOA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes from which the class is directly or indirectly inherited.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOC</key>
    <name>Number of Children (NOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes which are directly derived from the class.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOD</key>
    <name>Number of Descendants (NOD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes, which are directly or indirectly derived from the class.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOI</key>
    <name>Number of Outgoing Invocations (NOI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of directly called methods/functions. If a method/function is invoked several times, it is counted only once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of directly called methods of other classes, including method invocations from attribute initializations. If a method is invoked several times, it is counted only once.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOP</key>
    <name>Number of Parents (NOP) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of classes from which the class is directly inherited.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NOS</key>
    <name>Number of Statements (NOS) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of statements in the method/function; however, the statements of its nested functions are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of statements in the class; however, the statements of its nested and local classes are not included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File:&lt;/strong&gt; number of statements in the file.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NPKG</key>
    <name>Number of Packages (NPKG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of directly contained subpackages of the package.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_NUMPAR</key>
    <name>Number of Parameters (NUMPAR) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of the parameters of the method/function. The varargs and kwargs parameters counts as one.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_RFC</key>
    <name>Response set For Class (RFC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class (NLM) plus the number of directly invoked other methods by its methods or attribute initializations (NOI).&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TCD</key>
    <name>Total Comment Density (TCD) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method/Function:&lt;/strong&gt; ratio of the total comment lines of the method/function (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; ratio of the total comment lines of the class (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; ratio of the total comment lines of the module (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; ratio of the total comment lines of the package (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; ratio of the total comment lines of the component (TCLOC) to the sum of its total comment (TCLOC) and total logical lines of code (TLLOC).&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TCLOC</key>
    <name>Total Comment Lines of Code (TCLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method/Function:&lt;/strong&gt; number of comment and documentation code lines of the method/function, including its local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of comment and documentation code lines of the class, including its local methods and attributes, as well as its nested and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of comment and documentation code lines of the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of comment and documentation code lines of the package, including its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of comment and documentation code lines of the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TLLOC</key>
    <name>Total Logical Lines of Code (TLLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of non-empty and non-comment code lines of the method/function, including the non-empty and non-comment lines of its nested functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of non-empty and non-comment code lines of the class, including the non-empty and non-comment code lines of its nested and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of non-empty and non-comment code lines of the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of non-empty and non-comment code lines of the package, including its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of non-empty and non-comment code lines of the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TLOC</key>
    <name>Total Lines of Code (TLOC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Method / Function:&lt;/strong&gt; number of code lines of the method/function, including empty and comment lines, as well as its nested functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of code lines of the class, including empty and comment lines, as well as its nested and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of code lines of the module, including empty and comment lines.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of code lines of the package, including empty and comment lines, as well as its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of code lines of the component, including empty and comment lines, as well as its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNA</key>
    <name>Total Number of Attributes (TNA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of attributes in the class, including the inherited ones, as well as the inherited and local attributes of its nested and local classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of attributes in the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of attributes in the package, including the attributes of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of attributes in the component, including the attributes of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNCL</key>
    <name>Total Number of Classes (TNCL) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; number of classes in the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of classes in the package, including the classes of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of classes in the component, including the classes of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNDI</key>
    <name>Total Number of Directories (TNDI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of directories that belong to the package, including the directories of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of directories that belong to the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNFI</key>
    <name>Total Number of Files (TNFI) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of files that belong to the package, including the files of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of files that belong to the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLA</key>
    <name>Total Number of Local Attributes (TNLA) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) attributes in the class, including the attributes of its nested and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNLM</key>
    <name>Total Number of Local Methods (TNLM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of local (i.e. not inherited) methods in the class, including the local methods of its nested and local classes.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNM</key>
    <name>Total Number of Methods (TNM) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; number of methods/functions in the class, including the inherited ones, as well as the inherited and local methods of its nested and local classes. Methods that override abstract methods are not counted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of methods in the module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of methods in the package, including the methods of its subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of methods in the component, including the methods of its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNOS</key>
    <name>Total Number of Statements (TNOS) Metric Threshold Violation</name>
    <description>&lt;b&gt;Method/Function:&lt;/b&gt; number of statements in the method/function, including the statements of its nested functions.&lt;b&gt;Class:&lt;/b&gt; number of statements in the class, including the statements of its nested and local classes.&lt;b&gt;Module:&lt;/b&gt; number of statements in the module.&lt;b&gt;Package:&lt;/b&gt; number of statements in the package, including the statements of its subpackages.&lt;b&gt;Component:&lt;/b&gt; number of statements in the component, including the statements of its subcomponents.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_TNPKG</key>
    <name>Total Number of Packages (TNPKG) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Package:&lt;/strong&gt; number of subpackages in the package, including all directly or indirectly contained subpackages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component:&lt;/strong&gt; number of packages and subpackages that belong to the component, including its subcomponents.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_WMC</key>
    <name>Weighted Methods per Class (WMC) Metric Threshold Violation</name>
    <description>&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; complexity of the class expressed as the number of independent control flow paths in it. It is calculated as the sum of the McCabe’s Cyclomatic Complexity (McCC) values of its local methods.&lt;/p&gt;
</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CA</key>
    <name>Clone Age (CA) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class/clone instance:&lt;/b&gt; number of previously analyzed revisions in which the clone class/clone instance was present + 1.</description>
    <type>CODE_SMELL</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CC</key>
    <name>Clone Coverage (CC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of the source code element, expressed in terms of the number of syntactic entities (statements, expressions, etc.).&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of the number of syntactic entities (statements, expressions, etc.).</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CCL</key>
    <name>Clone Classes (CCL) Metric Threshold Violation</name>
    <description>&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; number of clone classes having at least one clone instance in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of clone classes having at least one clone instance in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CCO</key>
    <name>Clone Complexity (CCO) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; the McCabe complexity of the code fragment corresponding to the clone instance.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; sum of CCO of clone instances in the clone class.&lt;br&gt;&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; sum of CCO of clone instances in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; sum of CCO of clone instances in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CE</key>
    <name>Clone Embeddedness (CE) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; sum of incoming and outgoing references (function calls, variable references, type references; different references to the same entity are counted only once) in the code fragment corresponding to the clone instance, weighted with the number of directory changes between the referenced code fragments.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; sum of CE of the clone instances of the clone class + 1.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CEE</key>
    <name>Clone Elimination Effort (CEE) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; index of the effort required to eliminate the clone class. It is computed as the product of CI, CE, and NCR.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; index of the effort required to eliminate all clones from the component. It is computed as the sum of CEE of the clone classes in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CEG</key>
    <name>Clone Elimination Gain (CEG) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; index of the gain resulting from eliminating the clone class. It is computed as the ratio of CR to CEE.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; index of the gain resulting from eliminating all clones from the component. It is computed as the logistic function of the ratio of CR to CEE.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CI</key>
    <name>Clone Instances (CI) Metric Threshold Violation</name>
    <description>&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; number of clone instances in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of clone instances in the component.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; number of clone instances in the clone class.</description>
    <type>BUG</type>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLC</key>
    <name>Clone Line Coverage (CLC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of the source code element, expressed in terms of lines of code.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of lines of code.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLLC</key>
    <name>Clone Logical Line Coverage (CLLC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; ratio of code covered by code duplications in the source code element to the size of source code element, expressed in terms of logical lines of code (non-empty, non-comment lines).&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; ratio of code covered by code duplications in the component to the size of the component, expressed in terms of logical lines of code (non-empty, non-comment lines).</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CLLOC</key>
    <name>Clone Lines of Code (CLLOC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; length of the clone instance expressed in terms of lines of code.&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt;  average of CLLOC of clone instances belonging to the clone class.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CR</key>
    <name>Clone Risk (CR) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone class:&lt;/b&gt; risk index of the existence of the clone class. It is computed as the product of CLLOC, CI, CCO, NCR, and CV.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; relative risk index of the existence of code duplications in the component. It is computed as the sum of CR of the clone classes in the component, divided by the total logical lines of code (non-empty, non-comment lines) of the component. It expresses the risk index projected to a non-empty, non-comment line of code in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_CV</key>
    <name>Clone Variability (CV) Metric Threshold Violation</name>
    <description>&lt;b&gt;Clone instance:&lt;/b&gt; instability of the clone instance since it appeared. It is computed as the ratio of the number of previously analyzed revisions when the instance had been changed to its age (CA).&lt;br&gt;&lt;b&gt;Clone class:&lt;/b&gt; instability of the clone class since it appeared. It is computed as the ratio of the number of previously analyzed revisions when its contained instances were moved, deleted, or added, to its age (CA), plus the average CV of its clone instances.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LDC</key>
    <name>Lines of Duplicated Code (LDC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; number of code lines covered by code duplications in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; number of code lines covered by code duplications in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MET_LLDC</key>
    <name>Logical Lines of Duplicated Code (LLDC) Metric Threshold Violation</name>
    <description>&lt;b&gt;Function/method/class/module/package:&lt;/b&gt; number of logical code lines (non-empty, non-comment lines) covered by code duplications in the source code element.&lt;br&gt;&lt;b&gt;Component:&lt;/b&gt; The number of logical code lines (non-empty, non-comment lines) covered by code duplications in the component.</description>
    <severity>INFO</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AAI</key>
    <name>__all__ After Imports</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Put any relevant __all__ specification after the imports.</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BE</key>
    <name>Bare Except</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;If you really want to catch all exceptions, then use 'except Exception:', but it is many times better to only trap exceptions that you expect. A bare 'except:' clause will catch SystemExit and KeyboardInterrupt exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems.</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BT</key>
    <name>Big Try</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;For all try/except clauses, limit the 'try' clause to the absolute minimum amount of code necessary. This avoids masking bugs.</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BoC</key>
    <name>Bool Compare</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Don't compare boolean values to True or False using '==' or 'is'</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DDV</key>
    <name>Dangerous Default Value</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Default arguments are created on parsing, not when a function/method is called. You mustn't use mutable objects (like dictionaries or lists) as default arguments.</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MS</key>
    <name>Multiple Statements</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Multiple statements per line should be avoided.</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MeN</key>
    <name>Method Naming</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Function/method names should also be lowercase with underscores to separate words.</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MoN</key>
    <name>Module Naming</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Module names should be lowercase with underscores instead of spaces.</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NoC</key>
    <name>None Comparison</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Comparisons to singletons like None should always be done with 'is' or 'is not', never the equality operators.  This is because None is a singleton and the identity test is more efficient than testing for equality.</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OC</key>
    <name>Object Comparison</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Object type comparisons should always use isinstance() instead of comparing types directly.</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ORS</key>
    <name>Old Raise Syntax</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;The parentheses-using form is preferred because when the exception arguments are long or include string formatting, you don't need to use line continuation characters thanks to the containing parentheses.</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OSC</key>
    <name>Old Style Class</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;If a class has no base classes, then it is better to make it a new style class by inheriting from object.</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RI</key>
    <name>Relative Import</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Relative imports for intra-package imports are highly discouraged. Always use the absolute package path for all imports.</description>
    <type>VULNERABILITY</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RS</key>
    <name>Raising String</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;String exceptions in new code are forbidden, because this language feature is being removed in Python 2.6. Modules or packages should define their own domain-specific base exception class, which should be subclassed from the built-in Exception class.</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SFC</key>
    <name>Sequence False Checking</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;For sequences, (strings, lists, tuples), use the fact that empty sequences are false. Method of usage should be: if not seq: or if seq:</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SI</key>
    <name>Single Import</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Imports should usually be on separate lines.</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSP</key>
    <name>String Slicing Prefix</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Use ''.startswith() instead of string slicing to check for prefixes. The startswith() is cleaner and less error prone.</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSS</key>
    <name>String Slicing Suffix</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Use ''.endswith() instead of string slicing to check for suffixes. The endswith() is cleaner and less error prone.</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TI</key>
    <name>Top Import</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WI</key>
    <name>Wildcard Import</name>
    <description>&lt;h3&gt;FaultHunterPython&lt;/h3&gt;Even for importing a lot of names it is better to be able to see where your names come from. Tools like pylint and PyFlakes can help warn you about unused imports.</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AB</key>
    <name>Apply Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the apply built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ABIS</key>
    <name>Anomalous Backslash In String</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a backslash is in a literal string but not as an escape.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ACI</key>
    <name>Abstract Class Instantiated</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an abstract class with &lt;code&gt;abc.ABCMeta&lt;/code&gt; as metaclass has abstract methods and is instantiated.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AD</key>
    <name>Arguments Differ</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a method has a different number of arguments than in the implemented interface or in an overridden method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ADOI</key>
    <name>Attribute Defined Outside Init</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an instance attribute is defined outside the __init__ method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AFN</key>
    <name>Assignment From None</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an assignment is done on a function call but the inferred function returns nothing but None.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AFNR</key>
    <name>Assignment From No Return</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an assignment is done on a function call but the inferred function doesn’t return anything.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AM</key>
    <name>Abstract Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AMBD</key>
    <name>Access Member Before Definition</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an instance member is accessed before it’s actually assigned.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ANS</key>
    <name>Assigning Non Slot</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when assigning to an attribute not defined in the class slots.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AOT</key>
    <name>Assert On Tuple</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ATNK</key>
    <name>Assign To New Keyword</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when assignment will become invalid in future Python release due to introducing new keyword.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>AUEIS</key>
    <name>Anomalous Unicode Escape In String</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an escape like \u is encountered in a byte string where it has no effect.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>B</key>
    <name>Backtick</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the deprecated “``” (backtick) operator is used instead of the str() function.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BC</key>
    <name>Bad Continuation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;TODO&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BCA</key>
    <name>Bad Classmethod Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to “cls”), recommended to easily differentiate them from regular instance methods.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BD</key>
    <name>Boolean Datetime</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See &lt;a href=&quot;http://bugs.python.org/issue13936&quot; class=&quot;uri&quot;&gt;http://bugs.python.org/issue13936&lt;/a&gt; for reference. This message can’t be emitted when using Python &gt;= 3.5.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BEC</key>
    <name>Bad Exception Context</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when using the syntax “raise … from …”, where the exception context is not an exception, nor None.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BEO</key>
    <name>Bad Except Order</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when except clauses are not in the correct order (from the more specific to the more generic). If you don’t fix the order, some exceptions may not be caught by the most specific handler.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BFC</key>
    <name>Bad Format Character</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an unsupported format character is used in a format string.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BFS</key>
    <name>Bad Format String</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a PEP 3101 format string is invalid.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BFSK</key>
    <name>Bad Format String Key</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BI</key>
    <name>Bad Indentation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an unexpected number of indentation’s tabulations or spaces has been found.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BMCA</key>
    <name>Bad Mcs Classmethod Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to “mcs”), recommended to easily differentiate them from regular instance methods.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BMMA</key>
    <name>Bad Mcs Method Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to “cls”), recommended to easily differentiate them from regular instance methods.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BN</key>
    <name>Blacklisted Name</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the name is listed in the black list (unauthorized names).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BOE</key>
    <name>Binary Op Exception</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the exception to catch is of the form “except A or B:”. If intending to catch multiple, rewrite as “except (A, B):”.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BOM</key>
    <name>Bad Open Mode</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See &lt;a href=&quot;http://docs.python.org/2/library/functions.html#open&quot; class=&quot;uri&quot;&gt;http://docs.python.org/2/library/functions.html#open&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BP3I</key>
    <name>Bad Python3 Import</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when importing a module that no longer exists in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BRS</key>
    <name>Bad Reversed Sequence</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the first argument to reversed() builtin isn’t a sequence (does not implement __reversed__, nor __getitem__ and __len__.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BSA</key>
    <name>Bad Staticmethod Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a static method has “self” or a value specified in valid-classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BSC</key>
    <name>Bad Super Call</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when another argument than the current class is given as first argument of the super builtin.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BSFT</key>
    <name>Bad String Format Type</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a type required by format string is not suitable for actual argument type.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BSSC</key>
    <name>Bad Str Strip Call</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;The argument to a str.{l,r,}strip call contains a duplicate character.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BTI</key>
    <name>Bad Thread Instantiation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BW</key>
    <name>Bad Whitespace</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a wrong number of spaces is used around an operator, bracket or block opener.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BaB</key>
    <name>Basestring Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the basestring built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BrE</key>
    <name>Broad Except</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an except catches a too general exception, possibly burying unrelated errors.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>BuB</key>
    <name>Buffer Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the buffer built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CB</key>
    <name>Cmp Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the cmp built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CC</key>
    <name>Chained Comparison</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;This message is emitted when pylint encounters boolean operation like“a &lt; b and b &lt; c”, suggesting instead to refactor it to “a &lt; b &lt; c”.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CE</key>
    <name>Comprehension Escape</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CENM</key>
    <name>C Extension No Member</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CI</key>
    <name>Cyclic Import</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a cyclic import between two or more modules is detected.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CID</key>
    <name>Consider Iterating Dictionary</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in “for key in dictionary”.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CIF</key>
    <name>Continue In Finally</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when the &lt;code&gt;continue&lt;/code&gt; keyword is found inside a finally clause, which is a SyntaxError.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CM</key>
    <name>Cmp Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __cmp__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CMI</key>
    <name>Consider Merging Isinstance</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when multiple consecutive isinstance calls can be merged into one.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CNE</key>
    <name>Catching Non Exception</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class which doesn’t inherit from Exception is used as an exception in an except clause.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CSV</key>
    <name>Consider Swap Variables</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;You do not have to use a temporary variable in order to swap variables. Using “tuple unpacking” to directly swap variables makes the intention more clear.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CUDC</key>
    <name>Consider Using Dict Comprehension</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension.Also it is faster since you don’t need to create another transient list.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CUE</key>
    <name>Consider Using Enumerate</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CUG</key>
    <name>Consider Using Get</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slower.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CUI</key>
    <name>Consider Using In</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;To check if a variable is equal to one of many values,combine the values into a tuple and check if the variable is contained “in” it instead of checking for equality against each of the values.This is faster and less verbose.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CUJ</key>
    <name>Consider Using Join</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Using str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CUSC</key>
    <name>Consider Using Set Comprehension</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension.Also it is faster since you don’t need to create another transient list.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CUT</key>
    <name>Consider Using Ternary</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when one of known pre-python 2.5 ternary syntax is used.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CVFL</key>
    <name>Cell Var From Loop</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CWC</key>
    <name>Comparison With Callable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CWI</key>
    <name>Comparison With Itself</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when something is compared against itself.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CWS</key>
    <name>Confusing With Statement</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a &lt;code&gt;with&lt;/code&gt; statement component returns multiple values and uses name binding with &lt;code&gt;as&lt;/code&gt; only for a part of those values, as in with ctx() as a, b. This can be misleading, since it’s not clear if the context manager returns a tuple or if the node without a name binding is another context manager.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CoB</key>
    <name>Coerce Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the coerce built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>CoM</key>
    <name>Coerce Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __coerce__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DAN</key>
    <name>Duplicate Argument Name</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Duplicate argument names in function definitions are syntax errors.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DB</key>
    <name>Duplicate Bases</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class has duplicate bases.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DE</key>
    <name>Duplicate Except</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an except catches a type that was already caught by a previous handler.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DIF</key>
    <name>Deprecated Itertools Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing a function on itertools that has been removed in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DIM</key>
    <name>Dict Iter Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DINI</key>
    <name>Dict Items Not Iterating</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DK</key>
    <name>Duplicate Key</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a dictionary expression binds the same key multiple times.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DKNI</key>
    <name>Dict Keys Not Iterating</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DM</key>
    <name>Delslice Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __delslice__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DOF</key>
    <name>Deprecated Operator Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing a field on operator module that has been removed in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSF</key>
    <name>Deprecated String Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing a string function that has been deprecated in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSFA</key>
    <name>Duplicate String Formatting Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when we detect that a string formatting is repeating an argument instead of using named string arguments.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DSTC</key>
    <name>Deprecated Str Translate Call</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired characters.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DTF</key>
    <name>Deprecated Types Field</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing a field on types that has been removed in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DUF</key>
    <name>Deprecated Urllib Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing a field on urllib module that has been removed or moved in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DVM</key>
    <name>Dict View Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DVNI</key>
    <name>Dict Values Not Iterating</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DeM</key>
    <name>Deprecated Module</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used a module marked as deprecated is imported.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DeSF</key>
    <name>Deprecated Sys Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing a field on sys module that has been removed in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DepM</key>
    <name>Deprecated Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>DiM</key>
    <name>Div Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __div__ method is defined. Using &lt;code&gt;__truediv__&lt;/code&gt; and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EB</key>
    <name>Execfile Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the execfile built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ED</key>
    <name>Empty Docstring</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a module, function, class or method has an empty docstring (it would be too easy ;).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EE</key>
    <name>Exception Escape</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EMA</key>
    <name>Exception Message Attribute</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the message attribute is accessed on an Exception. Use str(exception) instead.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ENA</key>
    <name>Expression Not Assigned</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EU</key>
    <name>Eval Used</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when you use the “eval” function, to discourage its usage. Consider using &lt;code&gt;ast.literal_eval&lt;/code&gt; for safely evaluating strings containing Python expressions from untrusted sources.&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>EWH</key>
    <name>Eq Without Hash</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ExU</key>
    <name>Exec Used</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when you use the “exec” statement (function for Python 3), to discourage its usage. That doesn’t mean you cannot use it!&lt;/p&gt;
</description>
    <type>VULNERABILITY</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FB</key>
    <name>File Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the file built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FBNI</key>
    <name>Filter Builtin Not Iterating</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FCS</key>
    <name>Format Combined Specification</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a PEP 3101 format string contains both automatic field numbering (e.g. ‘{}’) and manual field specification (e.g. ‘{0}’).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FNM</key>
    <name>Format Needs Mapping</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>FR</key>
    <name>Function Redefined</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function / class / method is redefined.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>Fi</key>
    <name>Fixme</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a warning note as FIXME or XXX is detected.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GAML</key>
    <name>Global At Module Level</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when you use the “global” statement at the module level since it has no effect.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GM</key>
    <name>Getslice Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __getslice__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GS</key>
    <name>Global Statement</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when you use the “global” statement to update a global variable. Pylint just try to discourage this usage. That doesn’t mean you cannot use it!&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GVNA</key>
    <name>Global Variable Not Assigned</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable is defined through the “global” statement but no assignment to this variable is done.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>GVU</key>
    <name>Global Variable Undefined</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable is defined through the “global” statement but the variable is not defined in the module scope.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>HM</key>
    <name>Hex Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __hex__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IAO</key>
    <name>Invalid All Object</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an invalid (non-string) object occurs in __all__.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IB</key>
    <name>Input Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the input built-in is referenced (backwards-incompatible semantics in Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ICID</key>
    <name>Invalid Characters In Docstring</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a word in docstring cannot be checked by enchant.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IED</key>
    <name>Invalid Encoded Data</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a source line cannot be decoded using the specified source file encoding. This message can’t be emitted when using Python &gt;= 3.0.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IEV</key>
    <name>Invalid Envvar Value</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Env manipulation functions support only string type arguments. See &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.getenv&quot; class=&quot;uri&quot;&gt;https://docs.python.org/3/library/os.html#os.getenv&lt;/a&gt;.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IFI</key>
    <name>Invalid Format Index</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn’t contain or doesn’t have that key as an attribute.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IIG</key>
    <name>Init Is Generator</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the special class method __init__ is turned into a generator by a yield in its body.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ILR</key>
    <name>Invalid Length Returned</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __len__ method returns something which is not a non-negative integer.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IM</key>
    <name>Inconsistent Mro</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class has an inconsistent method resolution order.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IN</key>
    <name>Invalid Name</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the name doesn’t conform to naming rules associated to its type (constant, variable, class…).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>INC</key>
    <name>Inherit Non Class</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class inherits from something which is not a class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IRS</key>
    <name>Inconsistent Return Statements</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable).&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IS</key>
    <name>Import Self</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a module is importing itself.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISAT</key>
    <name>Invalid Star Assignment Target</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a star expression is used as a starred assignment target.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISC</key>
    <name>Invalid Str Codec</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISCIS</key>
    <name>Implicit Str Concat In Sequence</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;String literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISI</key>
    <name>Invalid Sequence Index</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISML</key>
    <name>Import Star Module Level</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the import star syntax is used somewhere else than the module level. This message can’t be emitted when using Python &gt;= 3.0.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ISO</key>
    <name>Invalid Slots Object</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an invalid (non-string) object occurs in __slots__.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IUOT</key>
    <name>Invalid Unary Operand Type</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a unary operand is used on an object which does not support this type of operation.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>IdM</key>
    <name>Idiv Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an __idiv__ method is defined. Using &lt;code&gt;__itruediv__&lt;/code&gt; and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>InB</key>
    <name>Intern Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the intern built-in is referenced (Moved to sys.intern in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>InE</key>
    <name>Indexing Exception</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Indexing exceptions will not work on Python 3. Use &lt;code&gt;exception.args[index]&lt;/code&gt; instead.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>InED</key>
    <name>Invalid Envvar Default</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. See &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.getenv&quot; class=&quot;uri&quot;&gt;https://docs.python.org/3/library/os.html#os.getenv&lt;/a&gt;.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>InM</key>
    <name>Invalid Metaclass</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>InS</key>
    <name>Invalid Slots</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>InSI</key>
    <name>Invalid Slice Index</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a slice index is not an integer, None, or an object with an __index__ method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>KABV</key>
    <name>Keyword Arg Before Vararg</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LAC</key>
    <name>Len As Condition</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when Pylint detects that len(sequence) is being used inside a condition to determine if a sequence is empty. Instead of comparing the length to 0, rely on the fact that empty sequences are false.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LB</key>
    <name>Long Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the long built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LC</key>
    <name>Literal Comparison</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LFI</key>
    <name>Logging Format Interpolation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a logging statement has a call form of “logging.&lt;logging method&gt;(format_string.format(format_args…))”. Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LFT</key>
    <name>Logging Format Truncated</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a logging statement format string terminates before the end of a conversion specifier.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LNL</key>
    <name>Logging Not Lazy</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a logging statement has a call form of “logging.&lt;logging method&gt;(format_string % (format_args…))”. Such calls should leave string interpolation to the logging method itself and be written “logging.&lt;logging method&gt;(format_string, format_args…)” so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see &lt;a href=&quot;http://www.python.org/dev/peps/pep-0282/&quot; class=&quot;uri&quot;&gt;http://www.python.org/dev/peps/pep-0282/&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LS</key>
    <name>Long Suffix</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when “l” or “L” is used to mark a long integer. This will not work in Python 3, since &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; types have merged. This message can’t be emitted when using Python &gt;= 3.0.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LTFA</key>
    <name>Logging Too Few Args</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a logging format string is given too few arguments.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LTL</key>
    <name>Line Too Long</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a line is longer than a given number of characters.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LTMA</key>
    <name>Logging Too Many Args</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a logging format string is given too many arguments.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LUF</key>
    <name>Logging Unsupported Format</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an unsupported format character is used in a logging statement format string.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LoE</key>
    <name>Lost Exception</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a break or a return statement is found inside the finally clause of a try…finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>LoFI</key>
    <name>Logging Fstring Interpolation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a logging statement has a call form of “logging.method(f”…“))”. Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MA</key>
    <name>Metaclass Assignment</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MBNI</key>
    <name>Map Builtin Not Iterating</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MBR</key>
    <name>Misplaced Bare Raise</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MCC</key>
    <name>Misplaced Comparison Constant</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MD</key>
    <name>Missing Docstring</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a module, function, class or method has no docstring.Some special methods like __init__ doesn’t necessary require a docstring.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MF</key>
    <name>Misplaced Future</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MFA</key>
    <name>Missing Format Attribute</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn’t have that attribute.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MFAK</key>
    <name>Missing Format Argument Key</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a PEP 3101 format string that uses named fields doesn’t receive one or more required keywords.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MFF</key>
    <name>Misplaced Format Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when format function is not called on str object. e.g doing print(“value: {}”).format(123) instead of print(“value: {}”.format(123)). This might not be what the user intended to do.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MFN</key>
    <name>Missing Final Newline</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the last line in a file is missing a newline.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MFS</key>
    <name>Mixed Format String</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string contains both named (e.g. ‘%(foo)d’) and unnamed (e.g. ‘%d’) conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MFSK</key>
    <name>Missing Format String Key</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string that uses named conversion specifiers is used with a dictionary that doesn’t contain all the keys required by the format string.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MH</key>
    <name>Method Hidden</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MI</key>
    <name>Mixed Indentation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when there are some mixed tabs and spaces in a module.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MK</key>
    <name>Missing Kwoa</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function call does not pass a mandatory keyword-only argument.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MLE</key>
    <name>Mixed Line Endings</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when there are mixed (LF and CRLF) newline signs in a file.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MSA</key>
    <name>Missing Super Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the super builtin didn’t receive an argument. This message can’t be emitted when using Python &gt;= 3.0.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>MuI</key>
    <name>Multiple Imports</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when import statement importing multiple modules is detected.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NABL</key>
    <name>Non Ascii Bytes Literal</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when non-ascii bytes literals are found in a program. They are no longer supported in Python 3. This message can’t be emitted when using Python &gt;= 3.0.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NACM</key>
    <name>Not Async Context Manager</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an async context manager is used with an object that does not implement the async context management protocol. This message can’t be emitted when using Python &lt; 3.5.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NAG</key>
    <name>Nonlocal And Global</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a name is both nonlocal and global.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NAI</key>
    <name>No Absolute Import</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an import is not accompanied by &lt;code&gt;from __future__ import absolute_import&lt;/code&gt; (default behaviour in Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NAM</key>
    <name>Not A Mapping</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a non-mapping value is used in place where mapping is expected.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NC</key>
    <name>Not Callable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an object being called has been inferred to a non callable object.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NCD</key>
    <name>No Classmethod Decorator</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class method is defined without using the decorator syntax.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NCM</key>
    <name>Not Context Manager</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an instance in a with statement doesn’t implement the context manager protocol(__enter__/__exit__).&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NER</key>
    <name>No Else Return</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NI</key>
    <name>No Init</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class has no __init__ method, neither its parent classes.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NIL</key>
    <name>Not In Loop</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when break or continue keywords are used outside a loop.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NIR</key>
    <name>Non Iterator Returned</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an __iter__ method returns something which is not an iterable (i.e. has no &lt;code&gt;__next__&lt;/code&gt; method).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NM</key>
    <name>No Member</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable is accessed for an unexistent member.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NMA</key>
    <name>No Method Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a method which should have the bound instance as first argument has no argument defined.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NMC</key>
    <name>Next Method Called</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an object’s next() method is called (Python 3 uses the next() built-in function).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NMD</key>
    <name>Next Method Defined</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NNIM</key>
    <name>No Name In Module</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a name cannot be found in a module.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NO</key>
    <name>Nonexistent Operator</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn’t exist in Python.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NPIC</key>
    <name>Non Parent Init Called</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NR</key>
    <name>Notimplemented Raised</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when NotImplemented is raised instead of NotImplementedError.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSA</key>
    <name>No Self Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a method has an attribute different the “self” as first argument. This is considered as an error since this is a so common convention that you shouldn’t break it!&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSD</key>
    <name>No Staticmethod Decorator</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a static method is defined without using the decorator syntax.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NSU</key>
    <name>No Self Use</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a method doesn’t use its bound instance, and so could be written as a function.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NVFP</key>
    <name>No Value For Parameter</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function call passes too few arguments.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NWB</key>
    <name>Nonlocal Without Binding</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NoAI</key>
    <name>Not An Iterable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a non-iterable value is used in place where iterable is expected.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NoER</key>
    <name>No Else Raise</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used in order to highlight an unnecessary block of code following an if containing a raise statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a raise statement.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>NoM</key>
    <name>Nonzero Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __nonzero__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OD</key>
    <name>Old Division</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used for non-floor division w/o a float literal or &lt;code&gt;from __future__ import division&lt;/code&gt; (Python 3 returns a float for int division unconditionally).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OM</key>
    <name>Oct Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an __oct__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ONO</key>
    <name>Old Ne Operator</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the deprecated “&lt;&gt;” operator is used instead of “!=”. This is removed in Python 3. This message can’t be emitted when using Python &gt;= 3.0.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>OOL</key>
    <name>Old Octal Literal</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when encountering the old octal syntax, removed in Python 3. To use the new syntax, prepend 0o on the number. This message can’t be emitted when using Python &gt;= 3.0.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PA</key>
    <name>Protected Access</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it’s defined.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PS</key>
    <name>Pointless Statement</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a statement doesn’t have (or at least seems to) any effect.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PSS</key>
    <name>Pointless String Statement</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you’re using those strings as documentation, instead of comments.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PU</key>
    <name>Parameter Unpacking</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when parameter unpacking is specified for a function(Python 3 doesn’t allow it).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PUV</key>
    <name>Possibly Unused Variable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>PrS</key>
    <name>Print Statement</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a print statement is used (&lt;code&gt;print&lt;/code&gt; is a function in Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>R</key>
    <name>Reimported</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a module is reimported multiple times.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RAFL</key>
    <name>Redefined Argument From Local</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RAIG</key>
    <name>Return Arg In Generator</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a “return” statement with an argument is found outside in a generator function or method (e.g. with some “yield” statements). This message can’t be emitted when using Python &gt;= 3.3.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RB</key>
    <name>Raw_input Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the raw_input built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RBNI</key>
    <name>Range Builtin Not Iterating</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the range built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RBT</key>
    <name>Raising Bad Type</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when something which is neither a class, an instance or a string is raised (i.e. a &lt;code&gt;TypeError&lt;/code&gt; will be raised).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RBTL</key>
    <name>Relative Beyond Top Level</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a relative import tries to access too many levels in the current package.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RFT</key>
    <name>Raising Format Tuple</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RIH</key>
    <name>Redefine In Handler</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an exception handler assigns the exception to an existing name.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RII</key>
    <name>Return In Init</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the special class method __init__ has an explicit return value.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RK</key>
    <name>Repeated Keyword</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a function call got multiple values for a keyword.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RKA</key>
    <name>Redundant Keyword Arg</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RM</key>
    <name>Rdiv Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __rdiv__ method is defined. Using &lt;code&gt;__rtruediv__&lt;/code&gt; and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RNE</key>
    <name>Raising Non Exception</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a new style class which doesn’t inherit from BaseException is raised.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ROF</key>
    <name>Return Outside Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a “return” statement is found outside a function or method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RON</key>
    <name>Redefined Outer Name</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable’s name hides a name defined in the outer scope.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RUA</key>
    <name>Redundant Unittest Assert</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ReB</key>
    <name>Redefined Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable or function override a built-in.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RedB</key>
    <name>Reduce Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the reduce built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RelB</key>
    <name>Reload Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>RoB</key>
    <name>Round Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the round built-in is referenced (backwards-incompatible semantics in Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SB</key>
    <name>Standarderror Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the StandardError built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SBE</key>
    <name>Simplify Boolean Expression</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when redundant pre-python 2.5 ternary syntax is used.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SC</key>
    <name>Singleton Comparison</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an expression is compared to singleton values like True, False or None.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SCA</key>
    <name>Self Cls Assignment</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Invalid assignment to self or cls in instance or class method respectively.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SCE</key>
    <name>Shallow Copy Environ</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See &lt;a href=&quot;https://bugs.python.org/issue15373&quot; class=&quot;uri&quot;&gt;https://bugs.python.org/issue15373&lt;/a&gt; for reference.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SD</key>
    <name>Signature Differs</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a method signature is different than in the implemented interface or in an overridden method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIE</key>
    <name>Simplifiable If Expression</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an if expression can be replaced with ‘bool(test)’.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SINC</key>
    <name>Super Init Not Called</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an ancestor class method has an __init__ method which is not called by a derived class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIR</key>
    <name>Stop Iteration Return</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SIS</key>
    <name>Simplifiable If Statement</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an if statement can be replaced with ‘bool(test)’.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SM</key>
    <name>Setslice Method</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a __setslice__ method is defined (method is not used by Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SMI</key>
    <name>Sys Max Int</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing sys.maxint. Use sys.maxsize instead.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SNAT</key>
    <name>Star Needs Assignment Target</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a star expression is not used in an assignment target.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SP</key>
    <name>Superfluous Parens</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a single item in parentheses follows an if, for, or other keyword.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SPPF</key>
    <name>Subprocess Popen Preexec Fn</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into.&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot; class=&quot;uri&quot;&gt;https://docs.python.org/3/library/subprocess.html#popen-constructor&lt;/a&gt;.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>SSUFS</key>
    <name>Single String Used For Slots</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class __slots__ is a simple string, rather than an iterable.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TCT</key>
    <name>Trailing Comma Tuple</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TER</key>
    <name>Try Except Raise</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TFFA</key>
    <name>Too Few Format Args</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string that uses unnamed conversion specifiers is given too few arguments.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TFPM</key>
    <name>Too Few Public Methods</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when class has too few public methods, so be sure it’s really worth it.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TFS</key>
    <name>Truncated Format String</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string terminates before the end of a conversion specifier.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMA</key>
    <name>Too Many Ancestors</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMB</key>
    <name>Too Many Branches</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function or method has too many branches, making it hard to follow.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMBE</key>
    <name>Too Many Boolean Expressions</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an if statement contains too many boolean expressions.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMFA</key>
    <name>Too Many Format Args</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string that uses unnamed conversion specifiers is given too many arguments.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMIA</key>
    <name>Too Many Instance Attributes</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TML</key>
    <name>Too Many Lines</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a module has too many lines, reducing its readability.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMNB</key>
    <name>Too Many Nested Blocks</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMPM</key>
    <name>Too Many Public Methods</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMRS</key>
    <name>Too Many Return Statements</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function or method has too many return statement, making it hard to follow.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMS</key>
    <name>Too Many Statements</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function or method has too many statements. You should then split it in smaller functions / methods.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TMSE</key>
    <name>Too Many Star Expressions</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when there are more than one starred expressions (&lt;code&gt;*x&lt;/code&gt;) in an assignment. This is a SyntaxError.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TN</key>
    <name>Trailing Newlines</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when there are trailing blank lines in a file.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>TW</key>
    <name>Trailing Whitespace</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when there is whitespace between the end of a line and the newline.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ToMA</key>
    <name>Too Many Arguments</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function or method takes too many arguments.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ToMFA</key>
    <name>Too Many Function Args</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function call passes too many positional arguments.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ToML</key>
    <name>Too Many Locals</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function or method has too many local variables.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>U</key>
    <name>Unreachable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when there is some code behind a “return” or “raise” statement, which will never be accessed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UA</key>
    <name>Unused Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function or method argument is not used.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UAO</key>
    <name>Unsupported Assignment Operation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when an object does not support item assignment (i.e. doesn’t define __setitem__ method).&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UAV</key>
    <name>Undefined All Variable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an undefined variable name is referenced in __all__.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UB</key>
    <name>Unicode Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the unicode built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UBA</key>
    <name>Used Before Assignment</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a local variable is accessed before its assignment.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UBO</key>
    <name>Unsupported Binary Operation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a binary arithmetic operation between two operands is not supported.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UCA</key>
    <name>Using Cmp Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either &lt;code&gt;key&lt;/code&gt; or &lt;code&gt;functools.cmp_to_key&lt;/code&gt; should be preferred.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UCT</key>
    <name>Using Constant Test</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UDK</key>
    <name>Unhashable Dict Key</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a dict key is not hashable (i.e. doesn’t define __hash__ method).&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UDO</key>
    <name>Unsupported Delete Operation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when an object does not support item deletion (i.e. doesn’t define __delitem__ method).&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UEOL</key>
    <name>Useless Else On Loop</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UFSA</key>
    <name>Unused Format String Argument</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UFSK</key>
    <name>Unused Format String Key</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UIA</key>
    <name>Useless Import Alias</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an import alias is same as original package.e.g using import numpy as numpy instead of import numpy as np.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UIE</key>
    <name>Unpacking In Except</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Python3 will not allow implicit unpacking of exceptions in except clauses. See &lt;a href=&quot;http://www.python.org/dev/peps/pep-3110/&quot; class=&quot;uri&quot;&gt;http://www.python.org/dev/peps/pep-3110/&lt;/a&gt;.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UKA</key>
    <name>Unexpected Keyword Arg</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a function call passes a keyword argument that doesn’t correspond to one of the function’s parameter names.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UL</key>
    <name>Unnecessary Lambda</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ULEF</key>
    <name>Unexpected Line Ending Format</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when there is different newline than expected.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ULV</key>
    <name>Undefined Loop Variable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UMT</key>
    <name>Unsupported Membership Test</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when an instance in membership test expression doesn’t implement membership protocol (__contains__/__iter__/__getitem__).&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UN</key>
    <name>Unneeded Not</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a boolean expression contains an unneeded negation.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UNS</key>
    <name>Unpacking Non Sequence</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when something which is not a sequence is used in an unpack assignment.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UO</key>
    <name>Unsubscriptable Object</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a subscripted value doesn’t support subscription (i.e. doesn’t define __getitem__ method or __class_getitem__ for a class).&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UOI</key>
    <name>Useless Object Inheritance</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UP</key>
    <name>Unnecessary Pass</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a “pass” statement that can be avoided is encountered.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UPGD</key>
    <name>Used Prior Global Declaration</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message can’t be emitted when using Python &lt; 3.6.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UR</key>
    <name>Useless Return</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a single “return” or “return None” statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return None.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>US</key>
    <name>Unnecessary Semicolon</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a statement is ended by a semi-colon (“;”), which isn’t necessary (that’s python, not C ;).&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>USD</key>
    <name>Useless Super Delegation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>USMI</key>
    <name>Use Symbolic Message Instead</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a message is enabled or disabled by id.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>USMS</key>
    <name>Unexpected Special Method Signature</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UT</key>
    <name>Unidiomatic Typecheck</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UTU</key>
    <name>Unbalanced Tuple Unpacking</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when there is an unbalanced tuple unpacking in assignment.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UV</key>
    <name>Undefined Variable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an undefined variable is accessed.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UWI</key>
    <name>Unused Wildcard Import</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an imported module or variable is not used from a &lt;code&gt;'from X import *'&lt;/code&gt; style import.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UnB</key>
    <name>Unichr Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the unichr built-in is referenced (Use chr in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UnI</key>
    <name>Unused Import</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an imported module or variable is not used.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UnV</key>
    <name>Unused Variable</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a variable is defined but not used.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>UngI</key>
    <name>Ungrouped Imports</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when imports are not grouped by packages.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WEO</key>
    <name>Wrong Exception Operation</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WIO</key>
    <name>Wrong Import Order</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports).&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WIP</key>
    <name>Wrong Import Position</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when code and imports are mixed.&lt;/p&gt;
</description>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WSIC</key>
    <name>Wrong Spelling In Comment</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a word in comment is not spelled correctly.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>WSID</key>
    <name>Wrong Spelling In Docstring</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a word in docstring is not spelled correctly.&lt;/p&gt;
</description>
    <type>CODE_SMELL</type>
    <severity>MINOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XA</key>
    <name>Xreadlines Attribute</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when accessing the xreadlines() function on a file stream, removed in Python 3.&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>XB</key>
    <name>Xrange Builtin</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the xrange built-in function is referenced (missing from Python 3).&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>YIAF</key>
    <name>Yield Inside Async Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when an &lt;code&gt;yield&lt;/code&gt; or &lt;code&gt;yield from&lt;/code&gt; statement is found inside an async function. This message can’t be emitted when using Python &lt; 3.5.&lt;/p&gt;
</description>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>YOF</key>
    <name>Yield Outside Function</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when a “yield” statement is found outside a function or method.&lt;/p&gt;
</description>
    <type>BUG</type>
    <severity>CRITICAL</severity>
    <tag>sourcemeter</tag>
  </rule>
  <rule>
    <key>ZBNI</key>
    <name>Zip Builtin Not Iterating</name>
    <description>&lt;h3&gt;Pylint&lt;/h3&gt;&lt;p&gt;Used when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;
</description>
    <severity>MAJOR</severity>
    <tag>sourcemeter</tag>
  </rule>
</rules>
