<%
# SonarQube, open source software quality management tool.
# Copyright (C) 2008-2014 SonarSource
# Copyright (c) 2014-2015, FrontEndART Software Ltd.
# mailto:contact AT sonarsource DOT com
#
# SonarQube is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# SonarQube is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
%>
<%
  sourcemeter_qualifiers = Api::Utils.java_facade.getComponentByClassname('SourceMeterGUI', 'com.sourcemeter.gui.resources.SourceMeterQualifiers').class

  class_qualifiers = sourcemeter_qualifiers::CLASS_QUALIFIERS 
  method_qualifiers = sourcemeter_qualifiers::METHOD_QUALIFIERS 
  all_qualifiers = sourcemeter_qualifiers::ALL_QUALIFIERS  
%>

<link rel="stylesheet" type="text/css" href=<%= "#{url_for_static(:plugin => 'SourceMeterGUI', :path => 'css/duplications.css')}" %>>

<script src=<%= "#{url_for_static(:plugin => 'SourceMeterGUI', :path => 'js/duplications.js')}" %>></script>

<script type="text/javascript">
    <% if params[:clone] %>
        document.location.hash="<%= params[:clone] %>";
    <% else %>
        document.location.hash='#'
    <% end %>
<%
if method_qualifiers.include? @resource.qualifier
    file_snapshot=Snapshot.find(:last, :conditions => ['id=?', @snapshot.path.split(".").last(2).first], :order => 'created_at desc')
%>
    var url = '<%= ApplicationController.root_context -%>/resource/index/' + <%= file_snapshot.resource.id %> + '?tab=sm-duplications&display_title=true';
    $j(document).ready(function() {
      openAccordionItem(url);
    });
<%
elsif class_qualifiers.include? @resource.qualifier
    file_snapshot=Snapshot.find(:last, :conditions => ['id=?', @snapshot.path.split(".").last], :order => 'created_at desc')
%>
    var url = '<%= ApplicationController.root_context -%>/resource/index/' + <%= file_snapshot.resource.id %> + '?tab=sm-duplications&display_title=true';
    $j(document).ready(function() {
        openAccordionItem(url);
    });
<% end %>
</script>
<%
# Based on resource_controller: 
#   https://github.com/SonarSource/sonar/blob/branch-3.7/sonar-server/src/main/webapp/WEB-INF/app/controllers/resource_controller.rb
require "rexml/document"

@metrics_of_domain.each do |metricObj|
    m_key = metricObj.key

    threshold=configuration('sm.' + @resource.language + '.cloneclass.baseline.' + m_key)
    if threshold.nil?
        baseline_def=Api::Utils.java_facade.propertyDefinitions.get('sm.' + @resource.language + '.cloneclass.baseline.' + m_key)
        if !baseline_def.nil?
            threshold=baseline_def.defaultValue
        end
    end
    @ccl_threshold[m_key] = threshold

    threshold=configuration('sm.' + @resource.language + '.cloneinstance.baseline.' + m_key)
    if threshold.nil?
        baseline_def=Api::Utils.java_facade.propertyDefinitions.get('sm.' + @resource.language + '.cloneinstance.baseline.' + m_key)
        if !baseline_def.nil?
            threshold=baseline_def.defaultValue
        end
    end
    @cin_threshold[m_key] = threshold
end



duplications_data = @snapshot.measure('duplications_data')

duplication_groups = []
if duplications_data && duplications_data.data
    dups = REXML::Document.new duplications_data.data.to_s
    if REXML::XPath.match(dups, "//g").size > 0
        resource_by_key = {}
        resource_by_key[@resource.key] = @resource
        dups_found_on_deleted_resource = false
        dups.elements.each("duplications/g") do |group|
            dup_group = []
            clone_class = group.attributes['c']
            @metric = params[:metric] || 'CI'
            metric_value = Project.by_key(clone_class).last_snapshot.measure(@metric).value
            group.each_element("b") do |block|
                resource_key = block.attributes['r']
                resource = resource_by_key[resource_key]
                unless resource
                    resource = Project.by_key(resource_key)
                    resource_by_key[resource_key] = resource
                end
                if resource
                    dup_group << {
                        :resource => resource,
                        :lines_count => block.attributes['l'],
                        :from_line => block.attributes['s'],
                        :clone_instance => block.attributes['c'],
                        :clone_class => clone_class,
                        :metric_value => metric_value
                    }
                else
                    dups_found_on_deleted_resource = true
                end
            end
            duplication_groups << dup_group if dup_group.size > 1
        end
        @duplication_group_warning = message('duplications.dups_found_on_deleted_resource') if dups_found_on_deleted_resource
    else
        @duplication_group_warning = message('duplications.old_format_should_reanalyze')
    end
end
if duplication_groups.empty?
  warning_message = message('duplications.no_duplicated_block')
  warning_message = @duplication_group_warning if @duplication_group_warning
%>
  <div class="duplicationsMessage"><%= warning_message -%></div>
<%
else 
%><%
    if @duplication_group_warning %>
        <div class="duplicationsMessage"><%= @duplication_group_warning -%></div>
<%  end
if !params[:listNotNeeded]
      metrics = []
      metrics<< Metric.by_key('CLLOC')
      metrics<< Metric.by_key('CI')
      metrics<< Metric.by_key('CCO')
      metrics<< Metric.by_key('NCR')
      metrics<< Metric.by_key('CE')
      metrics<< Metric.by_key('CV')
      metrics<< Metric.by_key('CA')
      html = metric_select_tag('cloneclass_order', metrics , :selected_key => @metric)
  %>
  <div class="metric-selector">
  <table>
      <tr>
          <td>Sort Clone Classes by: <%= html %></td>
          <td><%= draw_maintainability %></td>
      </tr>
  </table>
  </div>
<% end %>
<div id='base-clone-container'>
  <div id="accordion-panel">
<%
    duplication_groups.sort! { |group1, group2| group2[0][:metric_value] <=> group1[0][:metric_value] }
    duplication_groups.each_with_index do |group, group_index|
        s_index = 0
        s_class = ''
        if params[:clone]
          group.each_with_index do |dup, index|
            if dup[:clone_instance] == params[:clone]
              s_index = index
              s_class = dup[:clone_class]
              break
            elsif dup[:clone_class] == params[:clone]
              s_class = dup[:clone_class]
              break
            end 
          end
        end
%>
        <div class="tab_header" id="<%= group[0][:clone_class] %>">
        <table class="metrics">
        <%= clone_metrics(group[0][:clone_class], "Clone Class: ", "", false, true) %>
<%      group.each_with_index do |dup, index|
            if index == s_index %>
                <%= clone_metrics(dup[:clone_instance], "Clone Instance: ", "", true, false) %>
<%          else %>
                <%= clone_metrics(dup[:clone_instance], "Clone Instance: ", "none", false, false) %>
<%          end
        end %>
        </table></div>

<%      if params[:clone] && !s_class.blank? %>
            <script type="text/javascript"> document.getElementById("<%= s_class %>").className += " selected2"  </script>
<%        end

        if has_role?('codeviewer', @resource) %>
            <table class="data duplications">
            <thead><tr>
                <th class="thin nowrap"><%= message('duplications.blocks') %></th>
                <th class="thin nowrap"><%= message('duplications.number_of_lines') %></th>
                <th class="thin nowrap"><%= message('duplications.from_line') %></th>
                <th class="thin nowrap"><%= message('duplications.file') %></th>
                <th><%= message('duplications.details') %></th>
            </tr></thead><tbody>
            <tr id="<%= 'duplGroup_' + group_index.to_s %>">
            <td class="item">
                <p><strong><%= group.size().to_s %></strong></p>
            </td><td class="item">
<%          group.each_with_index do |dup, index|
                css='' 
                css = 'class="selected"' if index==s_index %>
                <p id="<%= 'duplCount-' + group_index.to_s + '-' + index.to_s %>" <%= css %> > <%= dup[:lines_count].to_s %></p>
<%          end %>
            </td>
            <td class="item">
<%          group.each_with_index do |dup, index|
                css='' 
                css = 'class="selected"' if index==s_index %>
                <p id="<%= 'duplFrom-' + group_index.to_s + '-' + index.to_s %>" <%= css %> > <%= dup[:from_line].to_s %></p>
<%          end %>
            </td><td id="switch" class="fileItem">
<%          group.each_with_index do |dup, index|
                resource = dup[:resource]
                external = resource.root_id != @resource.root_id
                lines_count = dup[:lines_count].to_i
                from_line = dup[:from_line].to_i
                included_to_line = from_line + [ResourceHelper::DUPLICATION_SNIPPET_DEFAULT_NB_OF_LINES, lines_count].min - 1

                css=''
                update_snippet_script = "'#{url_for :action => :show_duplication_snippet, :params => {:id => resource.id, :original_resource_id => @resource.id}}',#{group_index}, #{index}, #{lines_count}, #{from_line}, #{included_to_line}, '#{dup[:clone_instance]}', '#{dup[:clone_class]}'"
                css = 'class="selected"' if index==s_index
%>
                <p id="<%= 'duplName-' + group_index.to_s + '-' + index.to_s %>" <%= css %> >
                    <a href="#" onclick="return updateCloneInstanceAndMetrics(<%= update_snippet_script %>);"><%= resource.name %></a>
                    <%= image_tag "links/external.png" if external %>
                </p>
<%          end %>

            </td><td class="sourceItem sm-source-item">
<%          duplication = group[s_index]
            resource = duplication[:resource]
            from_line = duplication[:from_line].to_i
            lines_count = duplication[:lines_count].to_i
            external = resource.root_id != @resource.root_id
            included_to_line = from_line + [ResourceHelper::DUPLICATION_SNIPPET_DEFAULT_NB_OF_LINES, lines_count].min - 1
%>
            <div id="<%= 'source-' + group_index.to_s %>">
            <%= render :partial => 'duplications_source_snippet.html.erb', :locals => {:resource => resource, :original_resource => @resource, :from_line => from_line, :to_line => included_to_line, :lines_count => lines_count, :external => external, :group_index => group_index} %> 
            </div></td></tr><tr><td colspan="5" style="height: 10px"></td></tr></tbody></table>
<%      end
    end %>
</div>
</div>
<script>
    $j('#cloneclass_order').change(function() {
        var url = '<%= ApplicationController.root_context -%>/sourcemeter_duplications/sourcemeter_duplications_page?data_key=<%= @project.key %>&listNotNeeded=1&metric=<%= @metric if @metric -%>';
        url = url.replace(/(metric=)[^\&]+/, '$1' +$j('#cloneclass_order option:selected').val());
        var panel = $j("#accordion-panel");
        panel.html("<div class='loading sm-loading'></div>");
        $j.ajax({
            url: url
        }).fail(function (jqXHR, textStatus) {
            var error = "Server error. Please contact your administrator. The status of the error is : "+ jqXHR.status + ", textStatus is : "+ textStatus;
            $j("#accordion-panel").append($j('<div class="error">').append(error));
        }).done(function (html) {

            panel.html(html);
        });
    });

</script>
<% end %>
